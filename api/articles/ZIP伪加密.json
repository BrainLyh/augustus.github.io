{"title":"ZIP's things","slug":"ZIP伪加密","date":"2019-03-23T07:13:47.000Z","updated":"2019-09-03T14:32:19.109Z","comments":true,"path":"api/articles/ZIP伪加密.json","photos":[],"link":"","excerpt":"只要我E的够快，寂寞就追不上我！对不起，走错片场了~😄","covers":["http://wx4.sinaimg.cn/mw690/006boCb9ly1g5kazyuumnj30gx0de41x.jpg","http://wx4.sinaimg.cn/mw690/006boCb9ly1g5kb023lp3j30gx0d4jug.jpg","http://wx2.sinaimg.cn/mw690/006boCb9ly1g5kb052ll8j30g70fhwhx.jpg","http://wx2.sinaimg.cn/mw690/006boCb9ly1g5kb0bwn1ej305b02bt8i.jpg","http://wx3.sinaimg.cn/mw690/006boCb9ly1g5kb0ltqooj30fh0f0gp8.jpg","http://wx3.sinaimg.cn/mw690/006boCb9ly1g5kb0oiik6j30f206d0tr.jpg","http://wx1.sinaimg.cn/mw690/006boCb9ly1g5kb0955f3j30ls0fndvz.jpg"],"content":"<p>只要我E的够快，寂寞就追不上我！</p>\n<p>对不起，走错片场了~😄</p>\n<a id=\"more\"></a>\n<p>##0x01 zip文件组成 ##</p>\n<p><strong>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</strong></p>\n<h3 id=\"1-压缩源文件数据区\"><a href=\"#1-压缩源文件数据区\" class=\"headerlink\" title=\"1 压缩源文件数据区\"></a>1 压缩源文件数据区</h3><p>在这个数据区中每个压缩文件的源文件/目录都是一条记录，记录格式如下[文件头+文件数据+数据描述符]</p>\n<h4 id=\"文件头结构\"><a href=\"#文件头结构\" class=\"headerlink\" title=\"文件头结构\"></a>文件头结构</h4><hr>\n<pre><code>      组成    　                长度\n  文件头标记                  4 bytes  (0x04034b50)\n  解压文件所需 pkware 版本    2 bytes\n 全局方式位标记              2 bytes\n压缩方式                    2 bytes\n最后修改文件时间             2 bytes\n最后修改文件日期             2 bytes\nCRC-32校验                  4 bytes\n压缩后尺寸                  4 bytes\n未压缩尺寸                  4 bytes\n文件名长度                  2 bytes\n  扩展记录长度                2 bytes\n文件名                     （不定长度）\n扩展字段                   （不定长度）</code></pre><h4 id=\"文件数据\"><a href=\"#文件数据\" class=\"headerlink\" title=\"文件数据\"></a>文件数据</h4><p>就是数据</p>\n<h4 id=\"数据描述符\"><a href=\"#数据描述符\" class=\"headerlink\" title=\"数据描述符\"></a>数据描述符</h4><hr>\n<pre><code> 　　　组成    　长度\nCRC-32校验                  4 bytes\n压缩后尺寸                   4 bytes\n未压缩尺寸                   4 bytes</code></pre><p>这个数据描述符只在全局方式位标记的第三位设为1时才存在，紧接在压缩数据的最后一个字节后。</p>\n<h3 id=\"2-压缩源文件目录区\"><a href=\"#2-压缩源文件目录区\" class=\"headerlink\" title=\"2.压缩源文件目录区\"></a>2.压缩源文件目录区</h3><p>在这个数据区中每一条记录对应在压缩源文件区中的一条数据</p>\n<hr>\n<pre><code>   　　　组成               　            长度\n　　目录中文件文件头标记             4 bytes  (0x02014b50)\n　　压缩使用的　pkware 版本          2 bytes\n　　解压文件所需 pkware 版本         2 bytes\n　　全局方式位标记                   2 bytes\n　　压缩方式                        2 bytes\n　　最后修改文件时间                 2 bytes\n　　最后修改文件日期                 2 bytes\n　　ＣＲＣ－３２校验                 4 bytes\n　　压缩后尺寸                      4 bytes\n　　未压缩尺寸                      4 bytes\n　　文件名长度                      2 bytes\n　　扩展字段长度                    2 bytes\n　　文件注释长度                    2 bytes\n　　磁盘开始号                      2 bytes\n　　内部文件属性                    2 bytes\n　　外部文件属性                    4 bytes\n局部头部偏移量                  4 bytes\n　　文件名                       （不定长度）\n　　扩展字段                     （不定长度）\n文件注释                     （不定长度）</code></pre><h3 id=\"3-压缩源文件目录结束标志\"><a href=\"#3-压缩源文件目录结束标志\" class=\"headerlink\" title=\"3.压缩源文件目录结束标志\"></a>3.压缩源文件目录结束标志</h3><hr>\n<pre><code>　　　组成               　          长度\n目录结束标记                    4 bytes  (0x02014b50)\n当前磁盘编号                    2 bytes\n目录区开始磁盘编号              2 bytes\n　　本磁盘上纪录总数                 2 bytes\n　　目录区中纪录总数                 2 bytes\n　　目录区尺寸大小                   4 bytes\n　　目录区对第一张磁盘的偏移量        4 bytes\n　　ZIP 文件注释长度                 2 bytes\n\n　　ZIP 文件注释                   （不定长度）</code></pre><p>这里可以注意到文件目录结束标志只有22位，如果超出这部分则可能是隐藏数据(今天真的是被桂电的MISC给虐哭了/(ㄒoㄒ)/~~)。</p>\n<h2 id=\"0x02-ZIP伪加密\"><a href=\"#0x02-ZIP伪加密\" class=\"headerlink\" title=\"0x02 ZIP伪加密\"></a>0x02 ZIP伪加密</h2><p><img src=\"http://wx4.sinaimg.cn/mw690/006boCb9ly1g5kazyuumnj30gx0de41x.jpg\" alt></p>\n<p>压缩源文件数据区–头文件标志：50 4B 03 04</p>\n<p>压缩源文件目录区：</p>\n<ul>\n<li>目录中文件文件头标志：50 4B 01 02</li>\n<li>压缩使用的pkware:     3F 00</li>\n<li>紧跟着是解压文件所需要的pkware版本：14 00</li>\n<li>全局方式位标记：00 00(更改这里进行伪加密，改为09 00就会提示有密码，实际上只要是以奇数结尾即可)</li>\n</ul>\n<p>压缩源文件目录结束标志：50 4B 05 06</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/006boCb9ly1g5kb023lp3j30gx0d4jug.jpg\" alt></p>\n<p>如何判断伪加密？</p>\n<p>无加密</p>\n<p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为00 00</p>\n<p>假加密</p>\n<p>压缩源文件数据区的全局加密应当为00 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p>\n<p>真加密</p>\n<p>压缩源文件数据区的全局加密应当为09 00<br>且压缩源文件目录区的全局方式位标记应当为09 00</p>\n<h2 id=\"0x03-ZIP明文攻击\"><a href=\"#0x03-ZIP明文攻击\" class=\"headerlink\" title=\"0x03 ZIP明文攻击\"></a>0x03 ZIP明文攻击</h2><p>如果一个压缩包你不知道密码，但是压缩包里有一个已知文件（文件大小大于12Byte），因为同一个压缩包里的文件都是采用同一个密钥加密，所以可以用已知文件来找密钥。</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/006boCb9ly1g5kb052ll8j30g70fhwhx.jpg\" alt></p>\n<h2 id=\"0x03-ZIP掩码攻击\"><a href=\"#0x03-ZIP掩码攻击\" class=\"headerlink\" title=\"0x03 ZIP掩码攻击\"></a>0x03 ZIP掩码攻击</h2><p>已知密码的某几位进行构造，这里以桂电的MISC为例，前面我们已经解开两层加密，得到了最后的111.zip,<br>里面有</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/006boCb9ly1g5kb0bwn1ej305b02bt8i.jpg\" alt></p>\n<p>打开.sh文件是这样的内容</p>\n<pre><code>#!/bin/bash\n#\nzip -e --password=`python -c &quot;print(__import__(&apos;time&apos;).time())&quot;` flag.zip flag</code></pre><p>跑一下命令</p>\n<pre><code>&gt;&gt;&gt; print(__import__(&apos;time&apos;).time())\n1558685006.11</code></pre><p>大概形式知道了尝试掩码攻击</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/006boCb9ly1g5kb0ltqooj30fh0f0gp8.jpg\" alt></p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/006boCb9ly1g5kb0oiik6j30f206d0tr.jpg\" alt></p>\n<h2 id=\"0x04-CRC32碰撞\"><a href=\"#0x04-CRC32碰撞\" class=\"headerlink\" title=\"0x04 CRC32碰撞\"></a>0x04 CRC32碰撞</h2><p>CRC本身是循环冗余校验码的意思，CRC32则表示产生一个32bit（8位十六进制数）的校验值</p>\n<p>在生成该校验值的时候源数据每一位都参与了运算，因此即使数据块中只有一位发生改变也会得到不同的CRC32值，利用这个原理我们可以直接爆破出加密文件的内容。<br>这里做测试用我们创建了一个内容只有‘1234’的txt文件并进行压缩，得到压缩的CRC值，写脚本进行爆破</p>\n<pre><code>import binascii\n\ncrc=0x9BE3E0A3\nfor i in range(1000,9999+1):\nif (binascii.crc32(str(i)) &amp; 0xffffffff) == crc:\n    print i</code></pre><p>由于内容较短几秒就碰撞出文件内容。</p>\n<p>在PY2.x版本中。binascii.crc32中所计算出的CRC值域为[-2^31,2^31-1]之间的有符号整数，为了与一般的CRC结果对比，需要将其转换为无符号整数，所以加上 &amp; 0xfffffffff来进行转换</p>\n<pre><code>&gt;&gt;&gt; str1=0x4D2\n&gt;&gt;&gt; str2=str1 &amp; 0xffff\n&gt;&gt;&gt; print str2\n1234</code></pre><p>如果是py3.x版本计算结果为无符号整数，就不用加了。 </p>\n<h2 id=\"0x05-其他乱七八糟的\"><a href=\"#0x05-其他乱七八糟的\" class=\"headerlink\" title=\"0x05 其他乱七八糟的\"></a>0x05 其他乱七八糟的</h2><h3 id=\"关于fcrackzip\"><a href=\"#关于fcrackzip\" class=\"headerlink\" title=\"关于fcrackzip\"></a>关于fcrackzip</h3><p>作为kali自带的工具，可以使用它来进行爆破工作，这里还是用桂电的MISC-222.zip为例</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5kb0955f3j30ls0fndvz.jpg\" alt></p>\n<p>由菜单可知-b 是爆破，-c 指定字符集,-l指定长度,-u 用解压的方式淘汰掉错误的密码。当然我们也可以跑字典</p>\n<pre><code># fcrackzip -D -p /字典位置/xxx.txt  -u crack_this.zip</code></pre><h3 id=\"关于图片格式问题\"><a href=\"#关于图片格式问题\" class=\"headerlink\" title=\"关于图片格式问题\"></a>关于图片格式问题</h3><p>png文件署名域</p>\n<ul>\n<li>十进制数：137 80 78 71 13 10 26 10</li>\n<li>十六进制：89 50 4e 47 0d 0a 1a 0a</li>\n</ul>\n<h3 id=\"文件头总结\"><a href=\"#文件头总结\" class=\"headerlink\" title=\"文件头总结\"></a>文件头总结</h3><pre><code>JPEG (jpg)，                        　　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　\nPNG (png)，                       　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82\nGIF (gif)，                           　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                                                 ZIP Archive (zip)，                     文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B\n\nTIFF (tif)，                           　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：\nWindows Bitmap (bmp)，      　  文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：\nCAD (dwg)，                        　  文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：\nAdobe Photoshop (psd)，          文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：\nRich Text Format (rtf)，             文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：\nXML (xml)，                              文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：\nHTML (html)，                           文件头：68746D6C3E\nEmail [thorough only] (eml)，     文件头：44656C69766572792D646174653A\nOutlook Express (dbx)，            文件头：CFAD12FEC5FD746F\nOutlook (pst)，                         文件头：2142444E\nMS Word/Excel (xls.or.doc)，      文件头：D0CF11E0\nMS Access (mdb)，                    文件头：5374616E64617264204A\nWordPerfect (wpd)，                  文件头：FF575043\nAdobe Acrobat (pdf)，               文件头：255044462D312E\nQuicken (qdf)，                         文件头：AC9EBD8F\nWindows Password (pwl)，         文件头：E3828596\n\nRAR Archive (rar)，                    文件头：52617221\nWave (wav)，                            文件头：57415645\nAVI (avi)，                                 文件头：41564920\nReal Audio (ram)，                     文件头：2E7261FD\nReal Media (rm)，                       文件头：2E524D46\nMPEG (mpg)，                           文件头：000001BA\nMPEG (mpg)，                           文件头：000001B3\nQuicktime (mov)，                     文件头：6D6F6F76\nWindows Media (asf)，               文件头：3026B2758E66CF11\nMIDI (mid)，                              文件头：4D546864</code></pre><h3 id=\"zip文件格式\"><a href=\"#zip文件格式\" class=\"headerlink\" title=\"zip文件格式\"></a>zip文件格式</h3><p>翻译作者的文章链接<br><a href=\"https://blog.csdn.net/luoye7422/article/details/41878969\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/luoye7422/article/details/41878969</a></p>\n<p>参考链接</p>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/4d8cace82028\" title=\"图片格式详解\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4d8cace82028</a><br>更详细解释：<a href=\"https://blog.csdn.net/u012611878/article/details/52215985\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012611878/article/details/52215985</a><br><a href=\"https://blog.csdn.net/xiangshangbashaonian/article/details/80156865\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xiangshangbashaonian/article/details/80156865</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"zip","slug":"zip","count":1,"path":"api/tags/zip.json"},{"name":"misc","slug":"misc","count":1,"path":"api/tags/misc.json"}]}