{"title":"JavaScript Prototype 污染攻击","slug":"JavaScript原型污染","date":"2019-08-31T13:55:35.000Z","updated":"2019-09-03T14:19:49.369Z","comments":true,"path":"api/articles/JavaScript原型污染.json","photos":[],"link":"","excerpt":"JS真有趣！","covers":["https://cdn.nlark.com/yuque/0/2019/png/258679/1560690468868-ed7f7f4f-6356-49eb-bb93-8f73aea44ae0.png#align=left&display=inline&height=209&name=image.png&originHeight=418&originWidth=952&size=54718&status=done&width=476","https://cdn.nlark.com/yuque/0/2019/png/258679/1560691466319-0c780440-b626-4d58-a3c0-315ccc5c3210.png#align=left&display=inline&height=444&name=image.png&originHeight=888&originWidth=1110&size=127913&status=done&width=555"],"content":"<p>JS真有趣！</p>\n<a id=\"more\"></a>\n\n\n<h1 id=\"JavaScript-Prototype-污染攻击\"><a href=\"#JavaScript-Prototype-污染攻击\" class=\"headerlink\" title=\"JavaScript Prototype 污染攻击\"></a>JavaScript Prototype 污染攻击</h1><h2 id=\"JS基本语法\"><a href=\"#JS基本语法\" class=\"headerlink\" title=\"JS基本语法\"></a>JS基本语法</h2><h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><ul>\n<li><p>window.alert();弹出警告框</p>\n</li>\n<li><p>console.log();将内容写到控制台</p>\n<p>  a = 5;<br>  b = 6;<br>  c = a + b;<br>  console.log(c);<br>  11 debugger eval code:1:9<br>  undefined</p>\n</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>JS使用对象(Object)定义一个对象</p>\n<pre><code>var person = {firstname:&quot;John&quot;,lastname:&quot;Doe&quot;};\n\nperson\nObject { firstname: &quot;John&quot;, lastname: &quot;Doe&quot; }</code></pre><p>JS语句可以写在函数内，函数可以重复引用：<strong>引用一个函数</strong> = 调用函数(执行函数内的语句)</p>\n<pre><code>function myFuncion(a,b) {\n  return a * b;\n}\n\nmyFuncion(2,3)\n6</code></pre><p>JS大小写敏感</p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>我们可以通过定义变量来创建对象</p>\n<pre><code>var car = {type:&quot;tzla&quot;,modle:500,color:&quot;white&quot;};</code></pre><p>这里，3个值<code>{&quot;tzle&quot;,500,&quot;white&quot;}</code>赋予变量car、3个变量<code>{type,modle,color}</code>赋予变量car.</p>\n<p>通常认为JS对象是键值对的容器。</p>\n<p>我们有两种方式访问对象属性</p>\n<pre><code>car.modle;\ncar[&quot;modle&quot;];</code></pre><p>对象的方法定义了一个函数，并作为对象的属性存储</p>\n<pre><code>var person = {\n    firstName: &quot;John&quot;,\n    lastName : &quot;Doe&quot;,\n    id : 5566,\n    fullName : function() \n    {\n       return this.firstName + &quot; &quot; + this.lastName;\n    }\n};</code></pre><p>对象方法通过添加()调用(作为一个函数)。</p>\n<pre><code>name = person.fullName();</code></pre><p>如果访问person对象的fullName属性，<code>name = person.fullName;</code> 他将作为一个字符串返回。</p>\n<h2 id=\"prototype-和-proto-分别是什么\"><a href=\"#prototype-和-proto-分别是什么\" class=\"headerlink\" title=\"prototype 和 __proto__ 分别是什么\"></a><code>prototype</code> 和 <code>__proto__</code> 分别是什么</h2><p>我们以构造函数的方式来定义一个类</p>\n<pre><code>function Foo() {\n    this.bar = 1\n}\n\nnew Foo()</code></pre><p>Foo函数的内容就是Foo类的构造函数,而this.bar就是Foo类的一个属性。</p>\n<p>我们也可以将方法定义在构造函数内部：</p>\n<pre><code>function Foo() {\n    this.bar = 1\n    this.show = function() {\n    console.log(this.bar)\n    }\n}\n\n(new Foo()).show()</code></pre><p>但是这样的问题是每当我们新建一个Foo对象时，this.show = function…就会执行一次，这个show方法实际上是绑定在对象上的，而不是绑定在”类”中。</p>\n<p>我们使用原型(prototype)来实现在创建类的时候只创建一次show方法：</p>\n<pre><code>function Foo() {\n    this.bar = 1\n}\n\nFoo.prototype.show = function show() {\n  console.log(this.bar)\n}\n\nlet foo = new Foo()\n\nfoo.show()</code></pre><p>foo可以调用<code>show</code>方法来输出结果<code>1</code>。</p>\n<p>我们可以认为<code>prototype</code>是类<code>Foo</code>的一个属性，而所有Foo类实例化出来的对象都将拥有这个属性中的所有内容，包括变量和方法，就像foo具有<code>foo.show()</code>方法。</p>\n<p>我们可以通过prototype来访问Foo类的原型，但是Foo类实例化出来的对象是不能访问原型的，这里我们用到<code>__proto__</code>。</p>\n<p>一个Foo类实例化出来的对象是可以通过foo.<strong>proto</strong>属性来访问Foo类的原型：</p>\n<pre><code>foo.__proto__\nObject { show: show(), … }\n\nFoo.prototype\nObject { show: show(), … }\n\nFoo.prototype === foo.__proto__ \ntrue</code></pre><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/258679/1560690468868-ed7f7f4f-6356-49eb-bb93-8f73aea44ae0.png#align=left&display=inline&height=209&name=image.png&originHeight=418&originWidth=952&size=54718&status=done&width=476\" alt=\"二者的关系\"></p>\n<p>于是我们知道：</p>\n<ol>\n<li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>\n<li>一个对象的<code>__proto__</code>属性指向这个对象所在类的<code>prototype</code>属性</li>\n</ol>\n<h2 id=\"JavaScript原型链继承\"><a href=\"#JavaScript原型链继承\" class=\"headerlink\" title=\"JavaScript原型链继承\"></a>JavaScript原型链继承</h2><p>所有类对象在实例化的时候将会拥有prototype中的属性和方法，这个特性被用来实现JavaScript中的继承</p>\n<pre><code>function Father() {\n    this.first_name = &apos;Donald&apos;\n    this.last_name = &apos;Trump&apos;\n}\n\nfunction Son() {\n    this.first_name = &apos;Melania&apos;\n}\n\nSon.prototype = new Father()\n\nlet son = new Son()\nconsole.log(`Name: ${son.first_name} ${son.last_name}`)\n\n\nName: Melania Trump</code></pre><p>在调用<code>son.last_name</code>的时候，JavaScript引擎做了这些事：</p>\n<ol>\n<li>在对象<code>son</code>中寻找<code>last_name</code></li>\n<li>如果找不到，则在<code>son.__proto__</code>中寻找<code>last_name</code></li>\n<li>如果仍然找不到，则在<code>son.__proto__.__proto__</code>中寻找<code>last_name</code></li>\n<li>一次寻找，直到找到<code>Null</code>结束。<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code>，因此<code>Object</code>是所有原型链的最顶层。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/258679/1560691466319-0c780440-b626-4d58-a3c0-315ccc5c3210.png#align=left&display=inline&height=444&name=image.png&originHeight=888&originWidth=1110&size=127913&status=done&width=555\" alt></p>\n<p>于是我们知道：</p>\n<ol>\n<li>每个构造函数(constructor)都含有一个原型对象<code>prototype</code></li>\n<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>\n<li><code>JavaScript</code>使用<code>prototype</code>链实现继承机制</li>\n</ol>\n<h2 id=\"什么是原型链污染\"><a href=\"#什么是原型链污染\" class=\"headerlink\" title=\"什么是原型链污染\"></a>什么是原型链污染</h2><p>由上文我们可以知道<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>.那么，如果我们修改了<code>foo.__proto__</code>中的值，就可以修改<code>Foo</code>类.</p>\n<p>同时我们也知道我们有两种方式去访问对象的属性，当我们通过指定下标的方式去访问的时候，我们可以通过<code>b[&quot;__proto__&quot;]</code>的方式去访问其原型对象</p>\n<pre><code>a = []\nb = []\nb[&quot;__proto__&quot;][&quot;admintoken&quot;]=&quot;123456&quot;;\na.admintoken\n&quot;123456&quot;</code></pre><p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"}]}