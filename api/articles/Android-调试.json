{"title":"搭建 Android 调试环境","slug":"Android-调试","date":"2020-04-29T05:40:34.000Z","updated":"2020-04-29T05:46:39.591Z","comments":true,"path":"api/articles/Android-调试.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"搭建-Android-调试环境\"><a href=\"#搭建-Android-调试环境\" class=\"headerlink\" title=\"搭建 Android 调试环境\"></a>搭建 Android 调试环境</h1><h2 id=\"安装adb\"><a href=\"#安装adb\" class=\"headerlink\" title=\"安装adb\"></a>安装adb</h2><p>首先保证 <code>java</code>, <code>javac</code>, <code>java -version</code> 都正常。</p>\n<p>打开 <code>adt-bundle-windows-x86_64-20130219</code> 压缩包，里边已经装好了必需的包。打开 <code>sdk</code>文件夹，将 <code>tools</code> 和 <code>platform-tools</code> 路径配置到系统变量中。</p>\n<p>此时打开 <code>cmd</code> 输入 <code>adb</code> 就能看到 <code>adb options</code> 了。</p>\n<h2 id=\"安装-drozer\"><a href=\"#安装-drozer\" class=\"headerlink\" title=\"安装 drozer\"></a>安装 drozer</h2><p>打开下载的 <code>drozer-install</code> 压缩包，双击里边的  <code>setup.exe</code> 安装，里边还有一个 <code>agent.apk</code> ，这个装到要调试的手机里。</p>\n<p>安装完将 <code>bin</code> 目录添加到环境变量中即可。</p>\n<p><strong>在 <code>drozer</code> 目录中</strong>打开 cmd ，输入 <code>drozer</code> 即可看到 options 选项。</p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>cmd 输入 <code>adb devices</code> 查看连接的设备</p>\n<p>注：如果找不到设备可以在电脑设备管理器处打开便携设备，查看当前连接的手机的硬件ID，类似于这样： <code>USB\\VID_05C6&amp;PID_9039&amp;MI_00</code> ，然后进入 <code>C:\\Users\\xxx\\.android</code> 目录 <code>adb_usb.ini</code> 文件(没有就新建这个文件),输入 <code>0x05C6</code> </p>\n<p>重新 <code>adb devices</code> 即可看到设备。</p>\n<p>常用命令：</p>\n<p><code>adb shell</code> 即可进入命令交互界面</p>\n<p><code>adb connect ip:port</code> 连接指定设备</p>\n<p>使用 <code>drozer agent</code> 中的 <code>server embedded</code> 将测试设备与 PC 连接起来</p>\n<p>先选择一个合适的端口以便 PC 能连接到 drozer agent 开放的 TCP socket</p>\n<pre><code>adb forward tcp:31415 tcp:31415</code></pre><p>然后在要调试的手机中安装 agent.apk ，安装完后打开监听，默认端口是31415，将手机连到电脑上打开开发者模式调试状态(进入关于手机，版本号处连续点击3次即可进入开发者模式)。</p>\n<p>然后就可以使用 drozer 连接了</p>\n<p>进入 drozer 安装目录命令行输入： <code>drozer console connect</code> 即可进入命令行调试界面</p>\n<p>注：如果这里报错需要检查如下项目</p>\n<p>1、JDK是否安装</p>\n<p>2、环境变量是否正确配置（命令行下执行：java、javac、java -version 命令是否返回正常数据）</p>\n<p>如果以上项目均正常的话可做如下修复：</p>\n<p>建立名为 .drozer_config的文件，文件中添加如下内容：</p>\n<pre><code>[executables]\njava=D:\\Java\\jdk1.7.0_65\\bin\\java.exe\njavac=D:\\Java\\jdk1.7.0_65\\bin\\javac.exe</code></pre><p>即java和javac的路径，保存后存放到C:\\Users\\XXX\\ 目录下，其中XXX为当前用户名目录下，之后重新连接成功</p>\n<h3 id=\"drozer-使用\"><a href=\"#drozer-使用\" class=\"headerlink\" title=\"drozer 使用\"></a>drozer 使用</h3><p><strong>What is drozer?</strong></p>\n<blockquote>\n<p>drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as make use ofAndroid’s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system. </p>\n<p>drozer also helps to you to remotely exploit Android devices, by building malicious files or web pages that exploit known vulnerabilities. The payload that is used in these exploits is a rogue drozer agent that is essentially a remote administration tool. Depending on the permissions granted to the vulnerable app, drozer can install a full agent, inject a limited agent into the process using a novel technique or spawn a reverse shell.</p>\n</blockquote>\n<h4 id=\"找到目标\"><a href=\"#找到目标\" class=\"headerlink\" title=\"找到目标\"></a>找到目标</h4><p>第一步是查找我们要调试的包</p>\n<pre><code>run app.package.list 查看所有安装在手机上应用程序的包名</code></pre><p>查找要测试的包名 xxx</p>\n<pre><code>dz&gt; run app.package.list -f xxx\ncom.example.xxx (xxx)</code></pre><p>我们可以让 drozer 提供一些关于这个包的基本信息，使用 <code>app.package.info</code> </p>\n<pre><code>dz&gt; run app.package.info -a com.mwr.example.sieve \nPackage: com.mwr.example.sieve\nProcess Name: com.mwr.example.sieve\nVersion: 1.0\nData Directory: /data/data/com.mwr.example.sieve\nAPK Path: /data/app/com.mwr.example.sieve-2.apk\nUID: 10056\nGID: [1028, 1015, 3003]\nShared Libraries: null\nShared User ID: null\nUses Permissions:</code></pre><h4 id=\"探测攻击面\"><a href=\"#探测攻击面\" class=\"headerlink\" title=\"探测攻击面\"></a>探测攻击面</h4><p>我们可以让 drozer 报告包的攻击面</p>\n<pre><code>dz&gt; run app.package.attacksurface com.mwr.example.sieve\nAttack Surface:\n    3 activities exported\n    0 broadcast receivers exported\n    2 content providers exported\n    2 services expo\n        is debuggable</code></pre><p>This shows that we have a number of potential vectors. The app ‘exports’ (makes accessible to other apps) a number of activities (screens used by the app), content providers (database objects) and services (background workers).</p>\n<p>We also note that the service is debuggable, which means that we can attach a debugger to the process, using adb, and step through the code.</p>\n<h4 id=\"Launching-Activities\"><a href=\"#Launching-Activities\" class=\"headerlink\" title=\"Launching Activities\"></a>Launching Activities</h4><p>我们可以使用更精确的命令来深入挖掘攻击面</p>\n<pre><code>dz&gt; run app.activity.info -a com.mwr.example.sieve \nPackage:com.mwr.example.sieve\n    com.mwr.example.sieve.FileSelectActivity\n    com.mwr.example.sieve.MainLoginActivit\n    com.mwr.example.sieve.PWLi</code></pre><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/JDragons/p/5596258.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JDragons/p/5596258.html</a></p>\n</blockquote>\n","categories":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/categories/penetration-test.json"}],"tags":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/tags/penetration-test.json"},{"name":"Android","slug":"Android","count":1,"path":"api/tags/Android.json"}]}