{"name":"APK","slug":"APK","count":1,"postlist":[{"title":"APP Penetration testing","slug":"Penetration-testing","date":"2019-12-25T12:56:41.000Z","updated":"2020-04-29T05:44:52.700Z","comments":true,"path":"api/articles/Penetration-testing.json","excerpt":"","keywords":null,"cover":"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98w5qqs0j30ne0j9abm.jpg","content":"<h1 id=\"记一次授权的APK渗透测试\"><a href=\"#记一次授权的APK渗透测试\" class=\"headerlink\" title=\"记一次授权的APK渗透测试\"></a>记一次授权的APK渗透测试</h1><p>作为一个渗透测试小白，本文的目的是希望能为那些和我一样的小白提供一些测试思路。</p>\n<p>涉及的内容可能比较基础，表哥们见谅。</p>\n<h2 id=\"APK-解包\"><a href=\"#APK-解包\" class=\"headerlink\" title=\"APK 解包\"></a>APK 解包</h2><p>拿到 apk 之后直接用 7-Zip 解压可以得到几个文件夹、一个 <strong>AndroidManifest.xml</strong> 文件、一个dex文件。使用 dex2jar <a href=\"https://sourceforge.net/projects/dex2jar/\" title=\"工具\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/dex2jar/</a> 将这个dex文件解压会生成一个jar文件，然后使用jd-gui就可以查看java源代码了。</p>\n<p>当然可以从源码里找代码的漏洞，但是一般会有混淆，在这也不做深入讨论。</p>\n<p>上边提到的 xml 文件一定不能发放过，里边涉及到许多重要的配置项，比如：</p>\n<ul>\n<li>AndroidManifest.xml文件中android:debuggable为true。app 可被任意调试</li>\n<li>AndroidManifest.xml文件中android: allowBackup为true。app 数据可以被备份导出。</li>\n<li>等等…</li>\n</ul>\n<p>还有一点在实际测试过程中可能会用到：在对 apk 解压之后可以尝试在 powershell 里边搜一下 <code>db</code> 文件，说不定有敏感信息(为什么这么说，因为我碰到过一次…)</p>\n<pre><code>for /r F:\\source-code %i in (*.db) do echo %i </code></pre><h2 id=\"登陆页面\"><a href=\"#登陆页面\" class=\"headerlink\" title=\"登陆页面\"></a>登陆页面</h2><h3 id=\"用户名可枚举\"><a href=\"#用户名可枚举\" class=\"headerlink\" title=\"用户名可枚举\"></a>用户名可枚举</h3><p>输入用户名之后响应用户名不存在，这就是最简单的枚举用户名的情形了。</p>\n<p>这次碰到的是登陆不需要密码，但是要输入已经注册过的用户名，之后会根据用户名发送验证码到对应手机，同时设置了 120s 内不能重新发送，并且验证码 120s 内有效。</p>\n<p>这时候看起来我们没办法通过验证码做什么事，但是在实际测试过程中发现</p>\n<ol>\n<li><p>当我们输入存在的账号之后提示发送成功；</p>\n</li>\n<li><p>重复发送，会响应 120s 内不能重复发送；</p>\n</li>\n<li><p>输入不存在用户会提示发送失败。</p>\n</li>\n</ol>\n<p>所以这个时间限制对用户名枚举其实没什么影响，我们可以通过爆破用户名根据返回的信息来查看用户名是否存在。</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98w5qqs0j30ne0j9abm.jpg\" alt=\"枚举用户\"></p>\n<p>等等，既然咱都不知道手机号，也不让输密码登陆，就算得到用户名生成社工字典也没法用啊，那拿到了用户名有什么用？</p>\n<p>当然有用，不过要看具体场景，比如下面这个案例</p>\n<h3 id=\"任意验证码绕过\"><a href=\"#任意验证码绕过\" class=\"headerlink\" title=\"任意验证码绕过\"></a>任意验证码绕过</h3><p>当我们登陆时服务端给账号绑定的手机号发送短信验证码，我们输入一个上一步得到的账号，验证码随便输，点击登陆后抓包，登陆失败，发现响应中有两个 code 字段</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98w9rlloj30l2070aaa.jpg\" alt></p>\n<p>改改试试：</p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1ga98wgjh7kj30is057mx6.jpg\" alt></p>\n<p><strong>It works!</strong></p>\n<h2 id=\"功能页面\"><a href=\"#功能页面\" class=\"headerlink\" title=\"功能页面\"></a>功能页面</h2><p>成功登录之后，各个功能都点点看看，在个人信息页面有一个查询实时在线人数功能，那一栏只显示了人数，旁边并没有箭头</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98wd0il6j307n04bdfo.jpg\" alt></p>\n<p>我一度以为那里不能点击(事实上因为数据量太大，加载了好长时间，我直接点返回了，给我的感觉就是这里没有东西)，进去之后就可以看到所有登陆人员的信息了。</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98voejstj30qf09pdh7.jpg\" alt=\"图打码水平实在不够\"></p>\n<p>在我尝试了不同用户之后，发现这里的用户信息并没有权限限制，也就是说对所有人都是可见的，明显的权限配置不当。</p>\n<p>除此之外，应用存在几处查询功能，通过BURP 看到返回的数据包都是 JSON 类型</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1ga98wmervqj30m404vt90.jpg\" alt></p>\n<p>因为没什么经验，所以就多尝试吗，在 json 那里注入，xxe 都来一遍，没啥用。</p>\n<p>前面还有一个参数，试试？</p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1ga98x8llxwj30q203f74b.jpg\" alt></p>\n<p>有戏！</p>\n<p>试试 xss 吧</p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1ga98xbyv4fj30q002q74d.jpg\" alt></p>\n<p>放到浏览器成功弹窗！</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>平时做测试还是要细心，多总结，每一个能输入的地方都不能放过，多试试总是好的。</p>\n","text":"记一次授权的APK渗透测试作为一个渗透测试小白，本文的目的是希望能为那些和我一样的小白提供一些测试思路。涉及的内容可能比较基础，表哥们见谅。APK 解包拿到 apk 之后直接用 7-Zip 解压可以得到几个文件夹、一个 AndroidManifest.xml 文件、一个dex文件","link":"","raw":null,"photos":[],"categories":[{"name":"渗透测试","slug":"渗透测试","count":5,"path":"api/categories/渗透测试.json"}],"tags":[{"name":"APK","slug":"APK","count":1,"path":"api/tags/APK.json"}]}]}