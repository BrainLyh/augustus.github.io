{"name":"os","slug":"os","count":1,"postlist":[{"title":"OS","slug":"OS","date":"2020-04-29T05:40:34.000Z","updated":"2020-05-05T05:57:20.565Z","comments":true,"path":"api/articles/OS.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"OS\"><a href=\"#OS\" class=\"headerlink\" title=\"OS\"></a>OS</h1><h2 id=\"实验一-进程控制\"><a href=\"#实验一-进程控制\" class=\"headerlink\" title=\"实验一 进程控制\"></a>实验一 进程控制</h2><p> <strong>fork()</strong></p>\n<p>用于创建一个新进程（子进程）。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> fork(<span class=\"keyword\">void</span>);</span><br></pre></td></tr></table></figure>\n\n<p>返回：子进程中为0，父进程中为子进程ID，出错为-1。</p>\n<p>子进程被创建后就进入就绪队列和父进程分别独立地等待调度。子进程继承父进程的程序段代码，子进程被调度执行时，也会和父进程一样从fork()返回。从共享程序段代码的角度来看，父进程和子进程所执行的程序代码是同一个，在内存中只有一个程序副本；但是从编程的角度来看，为了使子进程和父进程做不同的事，需要在程序中区分父进程和子进程的代码段。这需要借助于fork()的返回值来标志当前进程的身份。从fork()返回后，都会执行语句：<code>pid=frok();</code></p>\n<p>得到返回值pid有三种情况，分别对应出错（小于0）、在父进程中（大于0）、在子进程中（等于0）。</p>\n<p>由于父进程和子进程各自独立地进入就绪队列等待调度，所以谁会先得到调度是不确定的，这与系统的调度策略和系统当前的资源状态有关。因此谁会先从fork()返回并继续执行后面的语句也是不确定的。</p>\n<p> <strong>wait()</strong></p>\n<p>查询子进程的退出状态(即正常退出的退出码或导致异常终止的信号)，并回收子进程的内核资源。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">pid_t</span> wait(<span class=\"keyword\">int</span> *status);</span><br></pre></td></tr></table></figure>\n\n<p>返回值：若成功则返回进程ID，若出错则返回-1。</p>\n<p>Wait()函数常用来控制父进程和子进程的同步。在父进程中调用wait()函数，则父进程被阻塞，进入等待队列，等待子进程结束。当子进程结束时，会产生一个终止状态字，系统会向父进程发送SIGCHLD信号。当接到信号后，父进程提取子进程的终止状态字，从wait()函数返回继续执行原程序。</p>\n<p><strong>exit()</strong></p>\n<p>exit()是进程结束最长调用的函数，在main()函数中调用return，最终也是调用exit()函数。这些都是进程的正常终止。在正常终止时，exit()函数返回进程结束状态。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exit</span><span class=\"params\">(<span class=\"keyword\">int</span> status)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>从OS角度来看，进程终止会释放进程用户空间的所有资源，而进程描述符并不释放，它将来由其父进程回收。若父进程先于子进程终止，子进程成为“孤儿进程”，“孤儿进程”会被init进程（进程号为1）领养；若子进程先于父进程终止，子进程成为“僵尸进程”，父进程尚未对其进行善后处理(获取终止子进程的有关信息，释放它仍占用的资源)。</p>\n<p><strong>execl()</strong></p>\n<p>系统调用execl()可以将新程序加载到某一进程的内存空间，该进程会从新程序的main()函数开始执行。</p>\n<p>函数原型：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execl</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*pathname, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg0,…<span class=\"comment\">/*(char*)0*/</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\">pathname是要加载程序的全路径名，arg0及以后为参数列表。</span><br></pre></td></tr></table></figure>\n\n<p>  进程的用户内存空间被替换，而进程的其他属性基本不改变。进程完整的内存空间：正文区、堆区、栈区、数据区都被替换，原内容不存在了。代码替换完后，在execl()后面的代码毫无意义。</p>\n<p>example.c</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//print.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">char</span> *m=(<span class=\"keyword\">char</span> *)argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,m);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//example1.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((pid=fork())&lt;<span class=\"number\">0</span>)&#123;   <span class=\"comment\">//出错</span></span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"fork faild\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid==<span class=\"number\">0</span>)&#123;    <span class=\"comment\">//子进程执行</span></span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Child process!\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"PID=%d  PPID=%d \\n\"</span>,getpid(),getppid()); <span class=\"comment\">//getpid()获取进程号, getppid()获取父进程号</span></span><br><span class=\"line\">     execl(<span class=\"string\">\"print\"</span>,<span class=\"string\">\"print\"</span>,<span class=\"string\">\"hello\"</span>,<span class=\"literal\">NULL</span>);  <span class=\"comment\">//代码替换</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;    <span class=\"comment\">//父进程执行</span></span><br><span class=\"line\">     wait();</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Parent process!\\n\"</span>);</span><br><span class=\"line\">     <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">编译运行方法：</span><br><span class=\"line\"><span class=\"meta\">#gcc print.c –o print</span></span><br><span class=\"line\"><span class=\"meta\">#gcc example1.c –o example</span></span><br><span class=\"line\">#./example</span><br></pre></td></tr></table></figure>\n\n<p>编写一段程序，使用系统调用fork()创建两个子进程，当此程序运行时，在系统中有一个父进程和两个子进程活动。让每一个进程在屏幕上显示“身份信息”：父进程显示“Parent process! PID=xxx1 PPID=xxx2”；子进程显示“Childx process! PID=xxx PPID=xxx”。多运行几次，观察记录屏幕上的显示结果，并分析原因。</p>\n<p>说明：</p>\n<blockquote>\n<p>xxx1为进程号，用getpid()函数可获取进程号；</p>\n<p>xxx2为父进程号，用getppid()函数可获取父进程号；</p>\n<p>Childx中x为1和2，用来区别两个子进程；</p>\n<p>wait()函数用来避免父进程在子进程终止之前终止。</p>\n</blockquote>\n<p>fork.c</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> child1,child2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(child1=fork()==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Child1 process! PID=%d  PPID=%d \\n\"</span>,getpid(),getppid());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(child1&lt;<span class=\"number\">0</span>||child2&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fork error.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//exit(0);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> status;</span><br><span class=\"line\">\t\twait(&amp;status);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Parent process! PID=%d  PPID=%d \\n\"</span>,getpid(),getppid());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(child2=fork()==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Child2 process! PID=%d  PPID=%d \\n\"</span>,getpid(),getppid());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(child2&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"fork error.\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//exit(0);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> status;</span><br><span class=\"line\">\t\twait(&amp;status);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Parent process! PID=%d  PPID=%d \\n\"</span>,getpid(),getppid());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>fork()和exec()系列函数能同时运行多个程序，利用上述函数将下面单进程顺序执行的程序single.c改造成可并发执行3个进程的程序 multi_process.c ；并用time命令获取程序的执行时间，比较单进程和多进程运行时间，并分析原因。 </p>\n<p>multi_process.c</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_msg</span><span class=\"params\">(<span class=\"keyword\">char</span> *m)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i&lt;NUM; i++)&#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,m); </span><br><span class=\"line\">\t\tfflush(<span class=\"built_in\">stdout</span>); </span><br><span class=\"line\">\t\tsleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpid[i<span class=\"number\">-1</span>]=fork();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pid[i<span class=\"number\">-1</span>]==<span class=\"number\">0</span>||pid[i<span class=\"number\">-1</span>]==<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pid[<span class=\"number\">0</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tprint_msg(<span class=\"string\">\"Good\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pid[<span class=\"number\">1</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tprint_msg(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(pid[<span class=\"number\">2</span>]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tprint_msg(<span class=\"string\">\"2017****10\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twait();</span><br><span class=\"line\"></span><br><span class=\"line\">\twait();</span><br><span class=\"line\"></span><br><span class=\"line\">\twait();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验二-进程同步\"><a href=\"#实验二-进程同步\" class=\"headerlink\" title=\"实验二 进程同步\"></a>实验二 进程同步</h2><p>为了简化对多个信号量的操作，Linux系统中提出了信号量集的概念。一个信号量集对象中可以容纳多个信号量，System V 信号量的分配和操作是以信号量集为单位的。</p>\n<p><strong>进程利用信号量获得共享资源的步骤</strong></p>\n<blockquote>\n<p>使用资源时，进程将该信号量减1(P操作)；</p>\n<p>不再使用资源时，进程将该信号量值加1(V操作)；</p>\n</blockquote>\n<p><strong>创建或打开信号量集</strong></p>\n<p><code>semget()</code> 系统调用创建一个新信号量集或获取一个既有信号量集的表示符。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">int</span> nsems, <span class=\"keyword\">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回值：成功返回信号量集ID，出错返回-1。<strong>注意：建立信号量集时每个信号量的初始值不确定。</strong></p>\n<p><strong>信号量控制操作</strong></p>\n<p><code>semctl()</code> 系统调用在一个信号量集或集合中的单个信号量上执行各种控制操作。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semctl</span> <span class=\"params\">(<span class=\"keyword\">int</span> semid, <span class=\"keyword\">int</span> semnum, <span class=\"keyword\">int</span> cmd,  …<span class=\"comment\">/*union semun arg*/</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n<p><code>semnum:</code> 信号量编号或0，表示对指定信号量做控制操作；</p>\n<p><code>cmd:</code>  操作命令，实施的控制操作；</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">IPC_STAT   获取信号量集的属性              IPC_SET   设置信号量集的属性     IPC_RMID  删除信号量集</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GETVAL   返回 semnum 信号量的值        SETVAL    设置semnum信号量的值</td>\n</tr>\n<tr>\n<td align=\"left\">GETALL   获取所有信号量的值                 SETALL    设置所有信号量的初始值</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> semun&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span>  *<span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  *<span class=\"built_in\">array</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>信号量集操作</strong></p>\n<p>semop()系统调用在semid标识的信号量集中的信号量上执行一个或多个up或down操作，可用于进程间的同步和互斥。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">semop</span><span class=\"params\">(<span class=\"keyword\">int</span> semid, struct sembuf *semop, <span class=\"keyword\">size_t</span> nops)</span></span>;</span><br><span class=\"line\">返回：成功返回<span class=\"number\">0</span>，出错返回<span class=\"number\">-1</span>。</span><br><span class=\"line\">Struct sembuf&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> sem_num;   <span class=\"comment\">/*member # in set*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">short</span> \tsem_op; <span class=\"comment\">/*operation(negative, 0, positive*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">short</span>   sem_flg;      <span class=\"comment\">/*IPC_NOWAIT,SEM_UNDO*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>组合权限说明</strong></p>\n<p>0666 文件或目录的所有者、所有者所在组、其他用户对该对象均可读、可写 rw-rw-rw-</p>\n<p>0777 文件或目录的所有者、所有者所在组、其他用户对该对象均可读、可写、可执行 rwxrwxrwx</p>\n<p>example.c</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span>\t_SEM_SEMUN_UNDEFINED</span></span><br><span class=\"line\"><span class=\"keyword\">union</span> semun</span><br><span class=\"line\">&#123;       <span class=\"comment\">//semctl() 的第四个参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span> *<span class=\"title\">buf</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> *<span class=\"built_in\">array</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seminfo</span> *__<span class=\"title\">buf</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tERR_EXIT(m) \\</span></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123; \\</span><br><span class=\"line\">\t\tperror(m); \\</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE); \\</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">wait_1chopstick</span><span class=\"params\">(<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> semid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t<span class=\"comment\">//p(1) -1，use sourcec</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">sb</span> = &#123;</span>no,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//对第 no 个信号量-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">\tret = semop(semid,&amp;sb,<span class=\"number\">1</span>); <span class=\"comment\">//对semid信号量集按照sb指示对第一个信号进行操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tERR_EXIT(<span class=\"string\">\"semop\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">free_1chopstick</span><span class=\"params\">(<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> semid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t/V(<span class=\"number\">1</span>) +<span class=\"number\">1</span>, release source</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">sb</span> = &#123;</span>no,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;; <span class=\"comment\">//对第 no 个信号量 +1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">\tret = semop(semid,&amp;sb,<span class=\"number\">1</span>); <span class=\"comment\">//对semid信号量集按照sb指示对第一个信号进行操作</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tERR_EXIT(<span class=\"string\">\"semop\"</span>);  </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>\tDELAY (rand() % 5 + 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait_for_2chopstick</span><span class=\"params\">(<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> semid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t<span class=\"comment\">// left and right both -1 p(1),use source</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = no;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = (no + <span class=\"number\">1</span>) % <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>[2] = &#123;</span> <span class=\"comment\">// left and right both -1</span></span><br><span class=\"line\">\t\t&#123;left,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t\t&#123;right,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tsemop(semid,buf,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">free_2chopstick</span><span class=\"params\">(<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> semid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t<span class=\"comment\">// left and right both +1,release source</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = no;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = (no + <span class=\"number\">1</span>) % <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">buf</span>[2] = &#123;</span></span><br><span class=\"line\">\t\t&#123;left,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">\t\t&#123;right,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tsemop(semid,buf,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">philosophere</span><span class=\"params\">(<span class=\"keyword\">int</span> no,<span class=\"keyword\">int</span> semid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsrand(getpid()); <span class=\"comment\">//初始化随机数发生器</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is thinking\\n\"</span>,no);</span><br><span class=\"line\">\t\tsleep(DELAY);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is hungry\\n\"</span>,no);</span><br><span class=\"line\">\t\twait_for_2chopstick(no,semid);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is eating\\n\"</span>,no);</span><br><span class=\"line\">\t\tsleep(DELAY);</span><br><span class=\"line\">\t\tfree_2chopstick(no,semid);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> left = no;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> right = (no + <span class=\"number\">1</span>) % <span class=\"number\">5</span>; <span class=\"comment\">// 一个哲学家的两边</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is thinking\\n\"</span>,no);</span><br><span class=\"line\">\t\tsleep(DELAY);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is hungry\\n\"</span>,no);</span><br><span class=\"line\">\t\twait_1chopstick(left,semid);</span><br><span class=\"line\">\t\tsleep(DELAY);</span><br><span class=\"line\">\t\twait_1chopstick(right,semid);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d is eating\\n\"</span>,no);</span><br><span class=\"line\">\t\tsleep(DELAY);</span><br><span class=\"line\">\t\tfree_1chopstick(left,semid);</span><br><span class=\"line\">        free_1chopstick(right,semid);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> semid;</span><br><span class=\"line\">\tsemid = semget(IPC_PRIVATE,<span class=\"number\">5</span>,IPC_CREAT | <span class=\"number\">0666</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(semid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tERR_EXIT(<span class=\"string\">\"semid\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">union</span> semun su;</span><br><span class=\"line\">\tsu.val = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>;++i) &#123;</span><br><span class=\"line\">\t\tsemctl(semid,i,SETVAL,su);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>;i &lt; <span class=\"number\">5</span>;++i) &#123;</span><br><span class=\"line\">\t\tpid = fork();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tERR_EXIT(<span class=\"string\">\"fork\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"number\">0</span> == pid) &#123;</span><br><span class=\"line\">\t\t\tnum = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tphilosophere(num,semid);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实验三-添加模块\"><a href=\"#实验三-添加模块\" class=\"headerlink\" title=\"实验三 添加模块\"></a>实验三 添加模块</h2><p>操作系统在处理应用程序时的过程为：</p>\n<p><code>code -&gt; 编辑(debug) -&gt; 编译(产生等待连接的目标程序) -&gt; 连接(确定本模块和其他所需目标模块调用关系，进行主存连接) -&gt; 运行(调入主存启动运行)</code></p>\n<p><strong>Linux的内核模块</strong></p>\n<p>内核模块是Linux内核向外部提供的一个插口，其全称为动态可加载内核模块（Loadable Kernel Module，LKM），简称模块。Linux内核之所以提供模块机制，是因为它本身是一个单内核（monolithic kernel）。单内核的最大优点是效率高，因为所有的内容都集成在一起，但其缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。 </p>\n<p>模块是具有独立功能的程序，它可以被单独编译，但不能独立运行。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户空间的进程是不同的。模块通常由一组函数和数据结构组成，用来实现一种文件系统、一个驱动程序或其他内核上层的功能。</p>\n<p>总之，模块是一个为内核（从某种意义上来说，内核也是一个模块）或其他内核模块提供使用功能的代码块。</p>\n<ol>\n<li>利用内核模块的动态装载性的优点：<br>将内核映象的尺寸保持在最小，并具有最大的灵活性；便于检验新的内核代码，而不需重新编译内核并重新引导。 </li>\n<li>内核模块的缺点：<br>装入的内核模块和其他内核部分一样，具有相同的访问权限，因此，差的内核模块会导致系统崩溃；为了使内核模块访问所有内核资源，内核必须维护符号表，并在装入和卸载模块时修改这些符号表；有些模块要求利用其他模块的功能，因此，内核要维护模块之间的依赖性。内核必须能够在卸载模块时通知模块，并且要释放分配给模块的内存和中断等资源；内核版本和模块版本的不兼容，也可能导致系统崩溃。</li>\n</ol>\n<p><strong>相关操作说明</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a、必需模块函数</span><br><span class=\"line\">加载函数    module_init(hello_init);  </span><br><span class=\"line\">卸载函数    module_exit(hello_exit);</span><br><span class=\"line\"></span><br><span class=\"line\">b、可选模块函数</span><br><span class=\"line\">MODULE_LICENSE(“*******”);    许可证申明</span><br><span class=\"line\">MODULE_AUTHOR(“********”);    作者申明</span><br><span class=\"line\">MODELE_DESCRIPTION(“***”);    模块描述</span><br><span class=\"line\">MODULE_VERSION(“V1<span class=\"number\">.0</span>”);       模块版本</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"*********\"</span>);    模块别名</span><br><span class=\"line\">c、加载内核模块</span><br><span class=\"line\">载入模块使用insmod命令：</span><br><span class=\"line\"><span class=\"meta\">#insmod hello.ko</span></span><br><span class=\"line\">卸载内核模块使用rmmod命令：</span><br><span class=\"line\"><span class=\"meta\">#rmmod hello</span></span><br><span class=\"line\">查看内核模块使用lsmod命令：</span><br><span class=\"line\"><span class=\"meta\">#lsmod</span></span><br><span class=\"line\">d、查看模块调用printk输出的信息</span><br><span class=\"line\">   终端方式下，模块加载后即可在屏幕上看到；</span><br><span class=\"line\">   图形界面终端下，使用dmesg命令.</span><br></pre></td></tr></table></figure>\n\n<p>设计一个模块，功能是列出系统中所有内核进程的程序名、<code>PID</code> 号和进程状态。主要步骤：<br>    阅读内核源代码，了解进程描述符 <code>task_struct</code> 中与本实验有关的成员项，以及访问进程队列的宏 <code>for_each_process</code>；<br>    编写 <code>readprocess</code> 模块，获取进程信息；<br>    修改 Makefile 文件，编译、安装模块，查看输出信息；<br>    查看模块信息，卸载模块。</p>\n<p>下面是动态添加模块的示例</p>\n<p>readprocess.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;linux/module.h&gt; //每个模块都要包括的头文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;linux/kernel.h&gt; //printk()</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;linux/sched.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;linux/init_task.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hello_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span> *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">\tp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp = &amp;init_task;</span><br><span class=\"line\">\tprintk(KERN_ALERT <span class=\"string\">\"名称\\t进程号\\t状态\\t父进程号\\t\"</span>); <span class=\"comment\">////只能使用内核里定义好的C函数，printk会根据日志级别将指定信息输出到控制台或日志文件中，KERN_ALERT会输出到控制台</span></span><br><span class=\"line\">\tfor_each_process(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;mm == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintk(KERN_ALERT <span class=\"string\">\"%s\\t%d\\t%d\\t%d\\n\"</span>,p-&gt;comm,p-&gt;pid,p-&gt;state,p-&gt;real_parent);&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">hello_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tprintk(KERN_ALERT <span class=\"string\">\"hello world exit\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(hello_init);</span><br><span class=\"line\">module_exit(hello_exit);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"Dual BSD/GPL\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Makefile</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifneq ($(KERNELRELEASE),)</span><br><span class=\"line\">\tobj-m:=readprocess.o</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tKDIR:= /lib/modules/$(shell uname -r)/build</span><br><span class=\"line\">\tPWD:= $(shell pwd)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t$(MAKE) -C $(KDIR) M=$(PWD) modules</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t$(MAKE) -C $(KDIR) M=$(PWD) clean</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<p>利用内核模块编程，在 /proc 目录下用自己的学号创建一个目录，如 /proc/201300834101</p>\n<blockquote>\n<p>Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc 文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。</p>\n<p>用户和应用程序可以通过 proc 得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取 proc 文件时，proc 文件系统是动态从系统内核读出所需信息并提交的。下面列出的这些文件或子文件夹，并不是都是在你的系统中存在，这取决于你的内核配置和装载的模块。另外，在 /proc 下还有三个很重要的目录：net，scsi 和sys。 Sys 目录是可写的，可以通过它来访问或修改内核的参数，而 net 和 scsi 则依赖于内核配置。例如，如果系统不支持 scsi，则 scsi 目录不存在。</p>\n<p>还有一些以数字命名的目录，它们是进程目录。系统中当前运行的每一个进程都有对应的一个目录在 /proc下，以进程的 PID号为目录名，它们是读取进程信息的接口。而self目录则是读取进程本身的信息接口，是一个link。</p>\n</blockquote>\n<p>然后在学号目录下创建一个 processinfo 文件，/proc/201300834101/processinfo ，此文件为只读文件，用于显示所有内核进程的程序名、PID 号和进程状态。主要步骤：</p>\n<p>修改 readprocess 模块，在模块初始化函数中创建目录及 proc 文件，并定义产生 proc 文件内容的函数（获取进程信息）；</p>\n<p>在卸载模块函数中删除相应的 proc 文件及目录；<br>​修改Makefile文件，编译、安装模块；<br>​执行cat /proc/201300834101/processinfo 命令，查看进程信息。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Processinfo.c</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;\t// 初始化模块</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/proc_fs.h&gt;\t// 创建进程信息入口</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/sched/task.h&gt;\t// 初始进程</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/seq_file.h&gt;\t// 序列文件</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/slab.h&gt;       // 内存分配释放  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/sched/signal.h&gt;   //下一个进程</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> modname[] = <span class=\"string\">\"201708034210\"</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">task_struct</span>  *<span class=\"title\">task</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  taskcounts=<span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// 全局进程变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> * <span class=\"title\">my_seq_start</span><span class=\"params\">(struct seq_file *m, <span class=\"keyword\">loff_t</span> *pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">///printk(KERN_INFO\"Invoke start\\n\");   //可以输出调试信息</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( *pos == <span class=\"number\">0</span> )  <span class=\"comment\">// 表示遍历开始</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">\t   task = &amp;init_task;\t<span class=\"comment\">//遍历开始的记录地址</span></span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> &amp;task;   <span class=\"comment\">//返回一个非零值表示开始遍历</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"comment\">//遍历过程中</span></span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (task == &amp;init_task ) \t<span class=\"comment\">//重新回到初始地址，退出</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> (<span class=\"keyword\">void</span>*)pos\t;<span class=\"comment\">//否则返回一个非零值</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">my_seq_show</span><span class=\"params\">(struct seq_file *m, <span class=\"keyword\">void</span> *v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">//获取进程的相关信息</span></span><br><span class=\"line\">  <span class=\"comment\">//printk(KERN_INFO\"Invoke show\\n\");</span></span><br><span class=\"line\">  \t\t\t\t</span><br><span class=\"line\">  seq_printf( m,  <span class=\"string\">\"#%-3d\\t \"</span>, taskcounts );   <span class=\"comment\">//输出进程序号</span></span><br><span class=\"line\">  seq_printf( m,  <span class=\"string\">\"%d\\t\"</span>, task-&gt;pid );\t\t\t<span class=\"comment\">//输出进程pid</span></span><br><span class=\"line\">  seq_printf( m,  <span class=\"string\">\"%lu\\t \"</span>, task-&gt;state );\t\t<span class=\"comment\">//输出进程state</span></span><br><span class=\"line\">  seq_printf( m,  <span class=\"string\">\"%s\\t \"</span>, task-&gt;comm );\t\t<span class=\"comment\">//输出进程名称(comm)</span></span><br><span class=\"line\">  seq_puts( m, <span class=\"string\">\"\\n\"</span> );\t  \t\t\t\t  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> * <span class=\"title\">my_seq_next</span><span class=\"params\">(struct seq_file *m, <span class=\"keyword\">void</span> *v, <span class=\"keyword\">loff_t</span> *pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//printk(KERN_INFO\"Invoke next\\n\");  </span></span><br><span class=\"line\">  (*pos)++;   </span><br><span class=\"line\">  <span class=\"comment\">//task指向下一个进程?</span></span><br><span class=\"line\">  taskcounts++;</span><br><span class=\"line\">  task= next_task(task);  <span class=\"comment\">//指向下一个进程</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">my_seq_stop</span><span class=\"params\">(struct seq_file *m, <span class=\"keyword\">void</span> *v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//printk(KERN_INFO\"Invoke stop\\n\");\t\t</span></span><br><span class=\"line\">\t<span class=\"comment\">// do nothing        </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seq_operations</span> <span class=\"title\">my_seq_fops</span> = &#123;</span><span class=\"comment\">//序列文件记录操作函数集合</span></span><br><span class=\"line\">        .start  = my_seq_start,</span><br><span class=\"line\">        .next   = my_seq_next,</span><br><span class=\"line\">        .stop   = my_seq_stop,</span><br><span class=\"line\">        .show   = my_seq_show</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">my_open</span><span class=\"params\">(struct inode *inode, struct file *file)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> seq_open(file, &amp;my_seq_fops); <span class=\"comment\">//打开序列文件并关联my_seq_fops</span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> <span class=\"title\">my_proc</span> =   </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span>  <span class=\"comment\">//proc文件操作函数集合</span></span><br><span class=\"line\">\t.owner      = THIS_MODULE,  </span><br><span class=\"line\">\t.open       = my_open,</span><br><span class=\"line\">\t.read       = seq_read,     </span><br><span class=\"line\">\t.llseek     = seq_lseek,</span><br><span class=\"line\">\t.release    = seq_release  \t    </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">my_init</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">proc_dir_entry</span>* <span class=\"title\">my_proc_entry</span>;</span></span><br><span class=\"line\">\tprintk( <span class=\"string\">\"&lt;1&gt;\\nInstalling \\'%s\\' module\\n\"</span>, modname );</span><br><span class=\"line\">\tmy_proc_entry = proc_create(modname, <span class=\"number\">0x644</span>, <span class=\"literal\">NULL</span>, &amp;my_proc);<span class=\"comment\">//生成proc文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == my_proc_entry)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>\t<span class=\"number\">0</span>;  <span class=\"comment\">//SUCCESS</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">my_exit</span><span class=\"params\">( <span class=\"keyword\">void</span> )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tremove_proc_entry( modname, <span class=\"literal\">NULL</span> );<span class=\"comment\">//删除proc文件</span></span><br><span class=\"line\">\tprintk( <span class=\"string\">\"&lt;1&gt;Removing \\'%s\\' module\\n\"</span>, modname );\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(my_init);</span><br><span class=\"line\">module_exit(my_exit);</span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Makefile</span><br><span class=\"line\">ifneq ($(KERNELRELEASE),)</span><br><span class=\"line\">\tobj-m:=processinfo.o</span><br><span class=\"line\">else</span><br><span class=\"line\">\tKDIR:= /lib/modules/$(shell uname -r)/build</span><br><span class=\"line\">\tPWD:= $(shell pwd)</span><br><span class=\"line\"></span><br><span class=\"line\">default:</span><br><span class=\"line\"><span class=\"meta\">\t$</span><span class=\"bash\">(MAKE) -C $(KDIR) M=$(PWD) modules</span></span><br><span class=\"line\">clean:</span><br><span class=\"line\"><span class=\"meta\">\t$</span><span class=\"bash\">(MAKE) -C $(KDIR) M=$(PWD) clean</span></span><br><span class=\"line\">Endif</span><br></pre></td></tr></table></figure>\n\n","text":"OS实验一 进程控制 fork()用于创建一个新进程（子进程）。函数原型：1<br>2<br>3<br>#include &lt;unistd.h&gt;<br><br>pid_t fork(void);<br>返回：子进程中为0，父进程中为子进程ID，出错为-1。子进程被创建后","link":"","raw":null,"photos":[],"categories":[{"name":"os","slug":"os","count":1,"path":"api/categories/os.json"}],"tags":[{"name":"os","slug":"os","count":1,"path":"api/tags/os.json"}]}]}